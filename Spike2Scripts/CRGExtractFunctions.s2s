#include "ExtractionUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"

var tLast := -1;
var isInitialized% := -1;
const stateError% := -1;
const stateStart% := 0;
const stateFixpt% := 1;
const stateStimUp% := 2;
const stateStimDn% := 3;

var dataWindow% := -1;
var outputHandle := -1;
var doRasterPlot% := 1;
var iState% := stateStart%;
var rasterWindow%;
var chanFixpt% := 24;
var chanStim% := 25;

' Trial vars
var tS;     ' onset time of stim
var tE;     ' off time of stim

LogInit(1);


func CRGExtractInit%(hData%, hOutput, crgFixationDuration, crgSegmentTime)
    isInitialized% := 1;
    dataWindow% := hData%;
    outputHandle := hOutput;
    
   	' Raster plot
    var electrodeChannelList%[10];
    ChanList(electrodeChannelList%[], 16);
    if electrodeChannelList%[0] > 0 then
        ' assume data window is current
        rasterWindow% := SetPSTH(electrodeChannelList%[], 1, crgSegmentTime + crgFixationDuration, crgFixationDuration, 0, 2);
        View(RasterWindow%);
        WindowVisible(1);
        Window(50, 0, 100, 50);
        ChanHide(electrodeChannelList%[]);
    endif
    
    View(dataWindow%);
    
    return;
end

proc FlushTrial(t0, t1)
    var s$;
    s$ := Print$("%f %f\n", t0, t1);
    PrintLog("%s\n", s$);
    if outputHandle > -1 then
        View(outputHandle).Print("%s\n", s$);
    endif
    
    if doRasterPlot% = 1 then
        View(RasterWindow%).Process(t0, t1, 0, 1);
    endif

    return;
end


' CRGExtract%(tStart, tStop)
' 
' Extract crg data betwen tStart and tStop. If tStart<0, start at beginning of file. 
' If tStop<0, extract to the end of the file. 
'
' When called the current view must be the data file/time view to be analyzed. 

func CRGExtract%(tStart, tStop)
    var status% := 0;
    var tFound := -1;
    var sFound$;
    var sIgnore$;
    var tTrigger;
    var t1;
    
    tLast := tStart;
    tStop := tStop;
    sIgnore$ := "0Q";
    tFound := NextKey(tLast, sFound$, sIgnore$);
    while tFound >= 0 and (tStop < 0 or (tStop > 0 and tFound <= tStop)) and iState% <> stateError% do

        'LogInfo(sFound$ + " " + str$(tFound));
           
        docase 
            
        case iState% = stateStart% then
            
            docase                
            case InStr(sFound$, "F") = 1 then
                iState% := stateFixpt%;
            case InStr(sFound$, "J") = 1 then
                ' Nothing to do. Its OK to get J here. 
            else
                LogError("Start", "Unexpected key \"" + sFound$ + "\" found at " + str$(tFound) + "\n");
                iState% := stateError%;
            endcase
            
        case iState% = stateFixpt% then
            docase       
            case InStr(sFound$, "S") = 1 then
                if FindRisingEdge%(chanStim%, tFound, tS) < 0 then
                    LogError("", "Rising edge not found after S at t=" + str$(tFound) + "\n");
                    iState% := stateError%;
                else
                    iState% := stateStimUp%;
                endif
            case InStr(sFound$, "X") = 1 then
                iState% := stateStart%;
            else
                LogError("Fixpt", "Unexpected key \"" + sFound$ + "\" found at " + str$(tFound) + "\n");
                iState% := stateError%;
            endcase
        case iState% = stateStimUp% then
            ' Expecting "X"
            docase 
            case sFound$ = "X" then
                iState% := stateStimDn%;
            else
                LogError("StimUp", "Unexpected key \"" + sFound$ + "\" found at " + str$(tFound) + "\n");
                iState% := stateError%;
            endcase
         
        case iState% = stateStimDn% then
            ' Expecting "J" (successful trial) or "F"
            docase
            case sFound$ = "J" then
                if FindFallingEdge%(chanStim%, tS, tE) < 0 then
                    LogError("", "Falling edge not found after S at t=" + str$(tFound) + "\n");
                    iState% := stateError%;
                else
                    FlushTrial(tS, tE);
                    iState% := stateStart%;
                endif
            case sFound$ = "F" then
                tS := -1;
                iState% := stateFixpt%;
            else
                LogError("StimDn", "Unexpected key \"" + sFound$ + "\" found at " + str$(tFound) + "\n");
                iState% := stateError%;
            endcase
        else
            LogError("CRGExtract", "Unknown state (" + str$(iState%) + ") at " + str$(tLast));
            halt;
        endcase
        tLast := tFound;
        tFound := NextKey(tLast, sFound$, sIgnore$);
            
    wend
        
    return 0;
end
