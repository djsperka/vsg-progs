' $Id: CoolMouse.s2s,v 1.19 2011-11-16 00:48:00 jeff Exp $
' Update 11/8/11 Jeff, includes SafeSampleKey and multi-juicer updates

#include "../../Spike2util\UsreyUtil.s2s"
#include "UsreyGratings.s2s"
#include "UsreyDAQ.s2s"
#include "UsreyFixationPoint.s2s"

' Cool Mouse specific parameters
var cmAcquisitionTime := 1.0;
var cmFixationDuration := 1.0;
var cmMaintainFixation := 1.0;
var cmTimeOutTime := 1.0;
var cmAlwaysLooking% := 0;          ' testing only

' Window handles and channel numbers
var XChannel%,YChannel%;		' Channel number assigned to eye x and y
var TriggerChannel%;			' Channel number assigned to vsg trigger input (i.e. trigger sent by vsg)
var ReadyChannel%;			' channel number for VSG ready pulse signal
var DataWindow%;	' time view
var XYWindow%;		' window with eye pos shown
var iStimChannel%;	' channel number for stimulus in xy window
var iStimWindowChannel%;' channel number for stimulus window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var StimHandle%;	' handle for stimulus application

' Display stuff
var FixWindowX[36],FixWindowY[36];	' points for displaying fixation window in xy view
var windowX[36], windowY[36];
' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];
var iStimIndex%;


' Dialog
if CoolMouseDialog%() <> 1 then
    halt;
endif





' Assign channel numbers for eye X,Y and trigger. 
XChannel% := GetNumberOfElectrodes%() + 1;
YChannel% := GetNumberOfElectrodes%() + 2;
TriggerChannel% := GetNumberOfElectrodes%() + 3;
ReadyChannel% := GetNumberOfElectrodes%() + 4;
CreateSampleConfiguration();


' Get display windows ready
InitializeWindows();

' Prepare the toolbar buttons
InitializeToolbar();


'===============================================================================================



var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tTrigger:=-1;	' temp var for newly discovered trigger times
var tStimOn:=-1;	' time that stim was turned on. Used to measure spike rates 


' Constants for states
const stateStartTrial%:=0;		' Start trial state
const stateWaitForFixPtOn%:=1;		' Waiting for fixation point return trigger (on)
const stateWaitForBlank%:=2;		' Waiting for fixation point return trigger (off)
const stateWaitForStimOn%:=3;		' Wait for stimulus return trigger (on)
const stateWaitForStimOff%:=4;		' Wait for stimulus return trigger (off)
const stateWaitForAcquisition%:=5;	' Waiting for subject to acquire fixation point
const stateHoldFixation%:=6;		' Holding fixation point
const stateAbort%:=7;			' Failed trial state
const stateMaintainFixation%:=8;	' Maintaining fixation (stim off period)
const stateInterTrialInterval%:=9;	' time out after failed trial
const stateVSGWait%:=10;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%:=11;		' waif for vsg to send ready signal #2
const stateTrialCompleted%:=12;		' trial has been completed successfully
const stateDone%:=13;	
var iState% := stateVSGWait%;	' present state

var nTrialsStarted%:=0;
var nTrialsCompleted%:=0;
var nTrialsAborted% :=0;		' 



func IdleProcessing%()
	var iStatus% := 1;	
	tNow := MaxTime();

	xEye := ChanMeasure(XChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltX;
	yEye := ChanMeasure(YChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltY;

	' Don't update display every time....
	if tNow-tLastUpdate > .005 then
		View(XYWindow%).XYAddData(1,xEye,yEye);
		tLastUpdate := tNow;
	endif


	docase 
		case iState% = stateVSGWait% then

			' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
			tTrigger := NextTime(ReadyChannel%, tLast, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 0 then
				PrintLog("state stateVSGWait: Got leading edge of trigger\n");
				tLastTrigger := tTrigger;
				ChangeStateTo(stateVSGWaitConfirm%, tTrigger);
			endif;

		case iState% = stateVSGWaitConfirm% then

			' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
			tTrigger := NextTime(ReadyChannel%, tLastTrigger, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 1 then
				PrintLog("state stateVSGWaitConfirm: Got trailing edge of trigger\n");
				tLastTrigger := tTrigger;
				ChangeStateTo(stateStartTrial%, tTrigger);
			endif;


		case iState% = stateStartTrial% then

			' Start trial. Put up fixation point.
			PrintLog("stateStartTrial: Send F key\n");
			SafeSampleKey("F");
			ChangeStateTo(stateWaitForFixPtOn%, tTrigger);
		
		case iState% = stateWaitForFixPtOn% then

			tTrigger := NextTime(TriggerChannel%, tLast, vTrigger);
			if tTrigger > tLast and vTrigger = 0 then
				' Fixation point is up
				PrintLog("stateWaitForFixPtOn: signal received.\n");
				tLastTrigger := tTrigger;
				ChangeStateTo(stateWaitForAcquisition%, tTrigger);
				DrawStim(1);	' actually this draws the location of the fixpt.
			endif

		case iState% = stateWaitForAcquisition% then

			' Waiting for eye to fall inside of fixation window
			if InFixationWindow%(xEye, yEye) = 1 then
				PrintLog("stateWaitForAcquisition: eye in fixation window\n");
				ChangeStateTo(stateHoldFixation%, tNow);
			else 
				if tNow - tStateStart > cmAcquisitionTime then
					' failed to acquire target. 
					PrintLog("stateWaitForAcquisition: failed.\n");
					ChangeStateTo(stateAbort%, tNow);
				endif
			endif

		case iState% = stateAbort% then

			' Signal "X" turns off fixpt and stimulus. The next state 'stateWaitForBlank' only checks for 
			' fixpt off. 
			PrintLog("stateAbort: send f key.\n");
			SafeSampleKey("f");
			ChangeStateTo(stateWaitForBlank%, tNow);

		case iState% = stateWaitForBlank% then

			' we just wait for fix point off signal in this case. 
			tTrigger := NextTime(TriggerChannel%, tLast, vTrigger);
			if tTrigger > tLast and vTrigger = 1 then
				' Fixation point is off
				PrintLog("stateWaitForBlank: Fix pt is off.\n");
				tLastTrigger := tTrigger;
				ChangeStateTo(stateInterTrialInterval%, tTrigger);
				DrawStim(0);	' actually this draws the location of the fixpt.
			endif

		case iState% = stateInterTrialInterval% then

			if tNow - tStateStart > cmTimeOutTime then

				PrintLog("stateInterTrialInterval: time out is done.\n");
				ChangeStateTo(stateStartTrial%, tNow);

			endif

		case iState% = stateHoldFixation% then

			if InFixationWindow%(xEye, yEye) = 0 then
	       		
				PrintLog("stateWaitForFixation: outside fixation window, aborting trial.\n");
				ChangeStateTo(stateAbort%, tNow);

			else 

				if tNow - tStateStart > cmFixationDuration then

					' update tStateStart
					ChangeStateTo(stateMaintainFixation%, tNow);
					PrintLog("stateWaitForFixation: successful trial.\n");
	
					' Reward
					DefaultReward();
	
				endif

			endif
        
  		case iState% = stateMaintainFixation% then

			if InFixationWindow%(xEye, yEye) = 0 then
	       		
				PrintLog("stateWaitForFixation: outside fixation window, aborting trial.\n");
				ChangeStateTo(stateAbort%, tNow);

			else 

				if tNow - tStateStart > cmMaintainFixation then

					' update tStateStart
					ChangeStateTo(stateMaintainFixation%, tNow);
					PrintLog("stateMaintainFixation: again....\n");
	
					' Reward
					DefaultReward();
	
				endif

			endif

		else
			
			' Unknown state!
			Message("Unknown state=" + str$(iState%));
			halt;

	endcase;

	tLast := tNow;
	return iStatus%;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;
	SampleClear(); 'Set standard sampling state
	SampleAutoFile(0); 'Enable automatic file naming
    
	' Set path for new data files
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1, 1);
	SampleAutoName$(dataCellName$ + "_cm_000");
	SampleAutoFile(1);
    
	'Channel recording definitions
	SampleEvent(TriggerChannel%, 2, 2, 3600); 'Trigger channel, level
	SampleComment$(TriggerChannel%, "Trigger");
	SampleTitle$(TriggerChannel%, "Trigger");
    
	' channel to look for ready signal from vsg
	SampleEvent(ReadyChannel%, 1, 2, 3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");

	'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
	SampleWaveform(XChannel%, GetEyeXPort%(), 1000);
	SampleTitle$(XChannel%,"Eye X");
	SampleWaveform(YChannel%, GetEyeYPort%(), 1000);
	SampleTitle$(YChannel%, "Eye Y");
    
	SampleSequencer(script$ + "CoolMouse.pls");
	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawStim
' 
' Draws stimulus in xy window (iDraw%==1) or blanks it (0). 
proc DrawStim(iDraw%)

	if iDraw% > 0 then
		var xstim, ystim;
		xstim := GetStimX();
		ystim := GetStimY();

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iStimChannel%, xstim, ystim);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], xstim);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], ystim);

		View(XYWindow%).XYAddData(iStimWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iStimChannel%);
		View(XYWindow%).XYDelete(iStimWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(-0.235849,52.746,97.2484,99.8856);
    XRange(0, 30);
	View(DataWindow%).WindowVisible(1);

	'Open an XY view to display eye position
	XYWindow% := FileNew(12);
	XRange(-30,30);
	YRange(-2,-30,30);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(-0.550314,0.114416,41.5094,52.746);
	XYColour(1,16);
	XYSize(1,-1);

	'Calcuate the fixation window
	var index%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for index% := 0 to 35 do
		FixWindowX[index%] := WindowRadius * Cos(index% * twopi/36.0);
		FixWindowY[index%] := WindowRadius * Sin(index% * twopi/36.0);
	next;

	'Create a new channel in the XY view to display the fixation window
	iStimWindowChannel% := XYSetChan(0);
	XYColour(2,13);
	XYDrawMode(2,2,1);
	XYJoin(2,1);

	'Draw the fixation window ON SECOND THOUGHT, DON'T
	'XYAddData(2, FixWindowX[], FixWindowY[]);	

	'Create a new channel in the XY view to display the fixation point
	iStimChannel% := XYSetChan(0);

	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(4,13);
	XYDrawMode(4,3,1);
	XYJoin(4,2);
	XYAddData(4,-9,-7);
	XYAddData(4,9,-7);
	XYAddData(4,9,7);
	XYAddData(4,-9,7);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(1,"Start",Start%);
	ToolbarSet(2,"Stop", Stop%);
	ToolbarSet(3,"Juice", Juice%);
	ToolbarEnable(2,0);
	Toolbar("Go", 0x3ff);

end;


' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
	var CommandLine$;
	var Extras$;
    
	SampleStart(0); 'Start sampling
    ' Set Sequencer Variable #3 based on juicer type 
    SetJuicerSequencerVariable%();
    ' Clear any trigger bits on digout lines.
    SafeSampleKey("0");

	Extras$ := " -b gray -p 2 -A " + GetFixationArg$() + " -d " + GetDistanceToScreenMM$() + " -g " + GetGratingParameters$("Stimulus");
	CommandLine$ := "cmd /c " + bin$ + "\\cmouse" + Extras$;

	'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
	PrintLog(CommandLine$+"\n");
	StimHandle% := ProgRun(CommandLine$,1);
	if StimHandle% <0 then 
		Message("Could not start stimulus."); 
		SampleStop();
		halt; 
	endif
	Yield(5);	'Wait a few seconds to make sure the VSG has time to initialize.

	ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
	View(DataWindow%);
	Yield(.1);
	return 1;	
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()

	' Disable idle process func
	ToolbarSet(0,"");

	' Tell stim app to shut down
	SafeSampleKey("q");
	Yield(.1);
	SampleStop();
'	ProgKill(StimHandle%);
'	while ProgStatus(StimHandle%) > 0 do
'		Yield();
'	wend
'	ProgRun(bin$ + "\\ClearTrigger",0);

end;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetStimX()
	return FixationX;
end;

func GetStimY()
	return FixationY;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InFixationWindow%(EyePosX,EyePosY)
	var i% := 0;
	var xstim, ystim;
    
    if cmAlwaysLooking% = 1 then
        return 1;
    endif
        
	xstim := GetStimX();
	ystim := GetStimY();
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-xstim, 2) + Pow(EyePosY-ystim, 2)) <= Pow(WindowRadius,2) then 
		i% := 1;
	endif
	return i%;
end;



func Juice%()
    DefaultReward();
    return 1;
end


proc GetCoolMouseParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\CoolMouse";
    cmAcquisitionTime := GetFloatRegistryValue(key$, "AcquisitionTime", cmAcquisitionTime);
    cmFixationDuration := GetFloatRegistryValue(key$, "FixationDuration", cmFixationDuration);
    cmMaintainFixation := GetFloatRegistryValue(key$, "MaintainFixation", cmMaintainFixation);
    cmTimeOutTime := GetFloatRegistryValue(key$, "TimeOutTime", cmTimeOutTime);
end

proc SaveCoolMouseParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\CoolMouse";
    SetFloatRegistryValue(key$, "AcquisitionTime", cmAcquisitionTime);
    SetFloatRegistryValue(key$, "FixationDuration", cmFixationDuration);
    SetFloatRegistryValue(key$, "MaintainFixation", cmMaintainFixation);
    SetFloatRegistryValue(key$, "TimeOutTime", cmTimeOutTime);
end


func CoolMouseDialog%()
    var status% := 0;
    GetCoolMouseParameters();
    DlgCreate("Alert Cool Mouse Parameters");
    DlgReal(1, "Acquisition Time", 0.01, 100.0);
    DlgReal(2, "Fixation Time", 0.01, 100.0);
    DlgReal(3, "Maintain Fixation Time", 0.01, 100.0);
    DlgReal(4, "Time Out Time", 0.01, 100.0);
    status% := DlgShow(cmAcquisitionTime, cmFixationDuration, cmMaintainFixation, cmTimeOutTime);
    if status% = 1 then
        SaveCoolMouseParameters();
    endif
    return status%;
end

