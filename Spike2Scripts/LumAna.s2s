#include "../../Spike2Util/FileUtilities.s2s"

var iUseIntervals% := 0;
var intervalSize := 0;
var iDoMins%;
var mean, stdev;
var t1, t2, t;
var i%;
var sFilename$;
var v;

' Check view type
if ViewKind() <> 0 then
    Message("Need time view to be current.");
    halt;
endif
v := View();

t1 := Cursor(1);
t2 := Cursor(2);

if t1 < 0 or t2 < 0 then
    Message("Set cursor 1 and 2 to be beginning and end of interval to be measured.");
    halt;
endif


DlgCreate("LumAna");
DlgCheck(1, "Use intervals");
DlgReal(2, "interval size", 0.1, 1000);
DlgCheck(3, "just mins");
'DlgString(4, "filename", 32);
sFilename$ := ReplaceFileExtension$(v, ".mon");
i% := DlgShow(iUseIntervals%, intervalSize, iDoMins%, sFilename$);
if i% = 0 then
    halt;
endif

docase
case iDoMins% = 1 then
    DumpMinima(t1, t2, sFilename$, v);
case iUseIntervals% = 1 then
    for t:= t1 to t2 step intervalSize do
        GetStatistics(1, t, t+intervalSize, mean, stdev);
    next
else
    GetStatistics(1, t1, t2, mean, stdev);
endcase


proc DumpMinima(t1, t2, sFile$, v)
    var h;
    var t, tLast;
    var codes%[4];
    var data%[34];
    var tMark;
    var m%;
    
    h := FileOpen(sFile$, 8, 1); 
    if h<0 then
        Message("Cannot open file");
        return;
    else

        tLast := t1;
'        View(v);
        tMark := View(v).NextTime(1, tLast, codes%[], data%[]);
        while tMark > 0 and tMark < t2 do
            ' Get min value, write to file
            m% := data%[Min(data%[])];
            View(h).Print("%f %d\n", tMark, m%);
            tLast := tMark;
            tMark := View(v).NextTime(1, tLast, codes%[], data%[]);
        wend
    endif
    return;
end

            
            
        

    


proc GetStatistics(ichannel%, t1, t2, &mean, &stdev)
    var t, tLast;
    var codes%[4];
    var data%[34];
    var n%;
    var tMark;
    var i%;
    var mins%[200000];
    var mmin, mmax;

    t := -1;
    tLast := t1;
    n% := 0;
    tMark := NextTime(1, tLast, codes%[], data%[]);
    while tMark > 0 and tMark < t2 do
        ' Get min value, save it
        mins%[n%] := data%[Min(data%[])];
        
        'PrintLog("Mark %d: min %d\n", n%, mins%[n%]);
        
        n% += 1;
        tLast := tMark;
        tMark := NextTime(1, tLast, codes%[], data%[]);
    wend

    ArrSum(mins%[0:n%], mean, stdev);
    mmax := mins%[max(mins%[0:n%])];
    mmin := mins%[min(mins%[0:n%])];
    PrintLog("%d\t%f\t%f\t%f\t%f\t%f\t%f\n", n%, t1, t2, mmin, mmax, mean, stdev);

    return;
end
