var ntests%;
var count% := 0;
var i%;
var iquit% := 0;
var DataWindow%;
var handle%;

var bin$, script$;
bin$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\bin";	' Location of executables is ..\bin, relative to script dir
script$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2);	' folder containing this script

DlgCreate("Latency test parameters", 25, 10);
DlgInteger(1, "Pulses", 1, 1000);
i% := DlgShow(ntests%);

CreateSampleConfiguration();

ToolbarSet(1, "Start", start%);
ToolbarSet(2, "Quit", quit%);
Toolbar("Go",0);



const stateQuit% := 99;
const stateStart% := 0;
const stateTesting% := 1;
const stateDone% := 98;
var iState% := stateStart%;
var tLast := -1;
var tNow;
var tTrigger;
var vTrigger;
var tLastTrigger := -1;

func idle%()
	tNow := MaxTime();

	if iquit% = 1 then
		iState% := stateQuit%;
	endif
	
	docase 
		case iState% = stateQuit% then
			done%();
			return 0;
		case iState% = stateDone% then
		 	done%();
			return 0;
		case iState% = stateStart% then
			iState% := stateTesting%;
		case iState% = stateTesting% then
			SampleKey("A");
			count% += 1;
			if count% = ntests% then
				done%();
			endif
		else
			Message("Error! Unknownn state " + str$(iState%));
			halt;
	endcase;
	tLast := tNow;

		 	

	return 1;
end;



func start%()
	var CommandLine$;
	SampleStart(0); 'Start sampling
	ToolbarSet(0, "", idle%);
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
	View(DataWindow%);
	return 1;
end;

func quit%()
	iquit% := 1;
	return 1;
end;

func done%()
'	ToolbarSet(0, "");
	SampleStop();
	quit%();
	return 1;
end;

		

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	View(DataWindow%).WindowVisible(1);

	SampleClear(); 'Set standard sampling state
'	SampleAutoFile(0); 'Enable automatic file naming
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit

	SampleOptimise(2,2,2,2,50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling

end;
















