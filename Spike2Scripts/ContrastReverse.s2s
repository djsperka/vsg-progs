' $Id: ContrastReverse.s2s,v 1.9 2011-11-14 22:38:45 jeff Exp $
' Update 11/8/11 Jeff, includes SafeSampleKey and multi-juicer updates

#include "../../Spike2util/UsreyUtil.s2s"
#include "../../Spike2util/ChannelUtilities.s2s"
#include "../../Spike2util/FileUtilities.s2s"
#include "../../Spike2util/LogUtilities.s2s"
#include "UsreyGratings.s2s"
#include "UsreyDAQ.s2s"
#include "UsreyFixationPoint.s2s"


' Script dialog vars

var crgFixationDuration;		' Time required to maintain fixation, seconds
var crgAcquisitionTime;			' Time allowed to acquire target before fail trial, seconds
var crgInterTrialTime;			' Blank time following a trial (both successful and failed), seconds
var crgSegmentLength%;			' Terms in a segment of the msequence
var crgSegmentTime;				' Time in a segment of the msequence - this is entered as a parameter - vsg app returns segment length!
var crgFramesPerTerm%;			' frames that each msequence term is shown
var crgFirstTerm% := 20;        ' first term in msequence to use here
var crgBalanceStim% := 0;
var crgOldSkoolJuicer% := 1;

' Hard-code frames per second 

const crgFramesPerSecond% := 100;


' Useful for testing

var crgAlwaysLooking% := 1;     ' set to 1 so InFixationWindow always returns 1 (testing only!)

' electrode info

const crgNPorts% := 16;
var crgWavemarkPorts%[crgNPorts%]; 
var crgContinuousPorts%[crgNPorts%];
var crgNWavemarks% := 0;
var crgNContinuous% := 0;
var crgDoRasterPlot% := 0;      ' set to 1 if there are wavemark channels configured

' Window handles and channel numbers
var XChannel% := 21;
var YChannel% := 22;
var FixationPointChannel% := 24;
var StimChannel% := 25;
var ReadyChannel% := 27;
var FrameChannel% := 28;
var FirstElectrodeChannel%;

var DataWindow%;	' time view
var XYWindow%;		' window with eye pos shown
var RasterWindow%;
var iStimChannel%;	' channel number for stimulus in xy window
var iStimWindowChannel%;' channel number for stimulus window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var StimHandle%;	' handle for stimulus application
var baseFileName$;		' basefilename with dir - populated in Start%()


' Experimental control
var Pause%:=0;		' When 1, expt is paused - no idle processing done
var JuicerType%;                'Helps us determine if juicer value has been set

' Display stuff
var FixWindowX[36],FixWindowY[36];	' points for displaying fixation window in xy view
var windowX[36], windowY[36];
' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];
var iStimIndex%;


' Init logging
LogInit(1);

' Fetch electrode information. This can be modified in the dialog, but might not be.
crgNWavemarks% := GetWavemarkPorts%(crgWavemarkPorts%[]);
crgNContinuous% := GetContinuousPorts%(crgContinuousPorts%[]);

' Make sure Juicer information has been set, and set sequencer variable for juicer
' Quit if no juicer information has been set!
JuicerType% := GetJuicerType%();
if JuicerType% = 0 then
    message("You did not select a juicer open state in Config/DAQ!  Quitting!");
    Halt;
else
    if JuicerType% = 3 then
        message("You indicated that you did not know your juicer open state in Config/DAQ!\nYou cannot continue without this information!\nAsk Dan or Jeff for help...Quitting!");
        Halt;
    endif
endif


if CRGScriptDialog%() = 0 then
    halt;
endif

' Figure out how many terms in sequence segment to be shown. The frame rate is hard-coded. Not pretty at all. 

crgSegmentLength% := crgSegmentTime * crgFramesPerSecond% / crgFramesPerTerm%;
if crgBalanceStim% = 1 then 
    crgSegmentLength% /= 2;
    LogInfo("Segment is " + str$(crgSegmentLength%) + " frames in length (" + str$(crgSegmentTime) + " seconds * " + str$(crgFramesPerSecond%) + " frames per second. Balanced stim means segment is inverted and doubled.");
else
    LogInfo("Segment is " + str$(crgSegmentLength%) + " frames in length (" + str$(crgSegmentTime) + " seconds * " + str$(crgFramesPerSecond%) + " frames per second.");    
endif


' Warn user if always looking is turned on!
if crgAlwaysLooking% = 1 then
    if Query("Script is configured to NOT use eye tracker input.\n"
        "Change to use eye tracker?") = 1 then
        crgAlwaysLooking% := 0;
    endif
endif


' Set up channels for sampling
CreateSampleConfiguration();

' Get display windows ready
InitializeWindows();

' Prepare the toolbar buttons
InitializeToolbar();





proc GetCRGScriptParameters()
	var key$;
	key$ := GetRegistryKey$(1) + "\\Scripts\\ContrastReverse";
    
    crgAcquisitionTime := GetFloatRegistryValue(key$, "AcquisitionTime", crgAcquisitionTime);
	crgFixationDuration := GetFloatRegistryValue(key$, "FixationDuration", crgFixationDuration);
    crgSegmentTime := GetFloatRegistryValue(key$, "SegmentTime", crgSegmentTime);
	crgInterTrialTime := GetFloatRegistryValue(key$, "InterTrialTime", crgInterTrialTime);
    crgFramesPerTerm% := GetIntRegistryValue%(key$, "FramesPerTerm", crgFramesPerTerm%);
    crgFirstTerm% := GetIntRegistryValue%(key$, "FirstTerm", crgFirstTerm%);
    crgBalanceStim% := GetIntRegistryValue%(key$, "BalanceStim", crgBalanceStim%);
end;
 	
proc SaveCRGScriptParameters()
	var key$;
	key$ := GetRegistryKey$(1) + "\\Scripts\\ContrastReverse";
    
    SetFloatRegistryValue(key$, "AcquisitionTime", crgAcquisitionTime);
	SetFloatRegistryValue(key$, "FixationDuration", crgFixationDuration);
    SetFloatRegistryValue(key$, "SegmentTime", crgSegmentTime);
	SetFloatRegistryValue(key$, "InterTrialTime", crgInterTrialTime);
    SetIntRegistryValue(key$, "FramesPerTerm", crgFramesPerTerm%);
    SetIntRegistryValue(key$, "FirstTerm", crgFirstTerm%);
    SetIntRegistryValue(key$, "BalanceStim", crgBalanceStim%);
end;



func CRGScriptDialog%()
	var i%;
	GetCRGScriptParameters();
	DlgCreate("CRG Script Parameters", 25, 10);
	DlgReal(1, "Acquisition time(s):", .01, 10);
	DlgReal(2, "Fixation duration(s):", .01, 10);
	DlgReal(3, "Segment time (s):", 0.1, 1000);
	DlgReal(4, "Intertrial time(s):", .01, 10);
	DlgInteger(5, "Frames per term:", 1, 100);
    DlgInteger(6, "First term:", 1, 32767);
    DlgCheck(7, "Balance stim?");
    DlgButton(101, "Stimulus", CRGStimulusDialog%);
'	DlgInteger(7, "Contrast (%):", -100, 100);
'	DlgReal(8, "Spatial frequency:", .01, 100);
'	DlgReal(9, "Diameter(deg):", .01, 100);
	i%:=DlgShow(crgAcquisitionTime, crgFixationDuration, crgSegmentTime, crgInterTrialTime, crgFramesPerTerm%, crgFirstTerm%, crgBalanceStim%);
	if i% = 1 then
		SaveCRGScriptParameters();
	endif;
	return i%;
end;

func CRGStimulusDialog%()    
	var gr$;
	var i%;
	var x:=0;
	var y:=0;
	var w:=1;
	var h:=1;
	var contrast%:=100;
	var orientation:=0;
    var phase := 0;
	var sf:=1;
	var tf:=1;
	var cv$:="b";
	var p$:="s";	' pattern
	var ap$:="e";	' aperture 
    var disable%[1];
    var ndisable% := 0;
    var type$ := "Stimulus";
    
	gr$ := GetGratingParameters$(type$);
	if gr$ <> "" then
        if GratingParametersDialog%(type$, gr$, disable%, ndisable%, x, y, w, h, contrast%, sf, tf, orientation, phase, cv$, p$, ap$) = 1 then
            SaveGratingParameters(type$, gr$);
        endif
    endif
    return 1;
end;







const stateStartTrial%		:= 0;
const stateWaitForFixpt%		:= 1;
const stateWaitForAcquisition%	:= 2;
const stateHoldFixation%	:= 3;
const stateSuccess%		:= 4;
const stateFailure%		:= 5;
const stateStimOff%		:= 6;
const stateWaitForBlank%	:= 7;
const stateCheckTrial%		:= 8;
const stateInterval%		:= 9;
const stateDone%		:= 10;
const stateVSGWait%:=10;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%:=11;		' waif for vsg to send ready signal #2
const stateStimulus% := 12;		' stimulus is up
const stateGetSegmentLength% := 13;		' check for segment length in par file

var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var tRise, tFall;   ' rise and fall times of ready pulse
var iState%:=stateVSGWait%;		' present state
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tTrigger:=-1;	' temp var for newly discovered trigger times
var tAcquisition:= -1;
var nTrialsStarted%:=0;
var nTrialsSuccess%:=0;
var nTrialsFail%:=0;

' vars for keeping track of the msequence. 
var tStartCRGSegment := 0;		' time when msequence segment was started (approx; this is guaranteed to be BEFORE the start of the segment)
var iCRGTriggerCount% := 0;	' running count of triggers during an msequence segment. 


' Run real time analysis here. 
func IdleProcessing%()
	var iStatus% := 1;	' this is return value. value of 1 (0) continues (stops) processing
	tNow := View(DataWindow%).MaxTime();

	xEye := View(DataWindow%).ChanMeasure(XChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltX;
	yEye := View(DataWindow%).ChanMeasure(YChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltY;

	' Don't update display every time....
	if tNow-tLastUpdate > .005 then
		View(XYWindow%).XYAddData(1,xEye,yEye);
		tLastUpdate := tNow;
	endif
    
    ' State handling here
	docase 
    case iState% = stateVSGWait% then
        
        ' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart).
        if View(DataWindow%).FindPulseUp%(ReadyChannel%, -1, tRise, tFall) = 1 then
            LogStatus("VSGWait", "Got Ready Pulse from VSG");
            Yield(1.0);
            tLastTrigger := tFall;
            ChangeStateTo(stateStartTrial%, tFall);
        endif;

    case iState% = stateStartTrial% then

        nTrialsStarted% += 1;
        tStartCRGSegment := -1;         ' Used to determine if stim up signal has been detected.
        SampleKey("F");
        iState% := stateWaitForFixpt%;
        
    case iState% = stateWaitForFixpt% then
        
        if View(DataWindow%).FindRisingEdge%(FixationPointChannel%, tLast, tTrigger) = 0 then
            ' Fixation point is up
            LogStatus("WaitForFixPtOn", "Fixpt on at " + str$(tTrigger) + "\n");
            tLastTrigger := tTrigger;
            ChangeStateTo(stateWaitForAcquisition%, tTrigger);
            DrawStim(1);	' actually this draws the location of the fixpt.
        endif
        
    case iState% = stateWaitForAcquisition% then

	
		case iState% = stateVSGWait% then

			' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
			tTrigger := NextTime(ReadyChannel%, tLast, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 0 then
				PrintLog("state stateVSGWait: Got leading edge of trigger\n");
				tLastTrigger := tTrigger;
				iState% := stateVSGWaitConfirm%;
			endif;

		case iState% = stateVSGWaitConfirm% then

			' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
			tTrigger := NextTime(ReadyChannel%, tLastTrigger, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 1 then
				PrintLog("state stateVSGWaitConfirm: Got trailing edge of trigger\n");
				tLastTrigger := tTrigger;
				iState% := stateGetSegmentLength%;
			endif;

		case iState% = stateGetSegmentLength% then
			if (GetSegmentLength%() = 0) then
				PrintLog("GetSegmentLength() failed!\n");
'				Stop%();
				halt;
			else 
				iState% := stateStartTrial%;
			endif;
	
		case iState% = stateStartTrial% then

			' initial state on startup. 
			' DIGOUT to present stimulus
			' Enter state 1

			nTrialsStarted% += 1;
			SafeSampleKey("D");
			iState% := stateWaitForDot%;
			PrintLog("StateStartTrial - dot trigger sent\n");

		case iState% = stateWaitForDot% then
	
			' Waiting for stimulus to be presented by vsg and trigger to return. 
			' NextTime returns a non-negative value whenever there is a TRANSITION. In that case, the 
			' value of 'vTrigger' returned is 1 (0) if the transition is high (low) to low (high). Maybe not
			' intuitive, but that's the way it is. 
			tTrigger := NextTime(DotChannel%,tLast,vTrigger);
			if tTrigger > tLastTrigger then

				if vTrigger = 0 then
		
					' Stimulus has been presented. Display stim location and window. Enter state 2
					DrawStim(1);
					iState% := stateWaitForAcquisition%;
					tStateStart := tNow;

				endif

			endif

		case iState% = stateWaitForAcquisition% then

			if tNow-tStateStart < crgAcquisitionTime then
				
				' Acquisition happens when the eye falls within the fixation window.
				if InFixationWindow%(xEye, yEye) > 0 then

					PrintLog("StateWaitForAcquisition - acquired target.\n");
					iState% := stateHoldFixation%;
					tStateStart := tNow;
					tAcquisition := tNow;	
				endif

			else

				' Failed. Turn off stim and try again.
				PrintLog("StateWaitForAcquisition - failed.\n");
				SafeSampleKey("x");
				iState% := stateFailure%;
				tStateStart := tNow;

                LogStatus("WaitForAcquisition", "Acq at t=" + str$(tNow));
                ChangeStateTo(stateHoldFixation%, tNow);
				tAcquisition := tNow;	
			endif

		else

            ' Failed. Turn off stim and try again.
            LogStatus("WaitForAcquisition", "Time up.");
            SampleKey("X");
            ChangeStateTo(stateFailure%, tNow);

        endif

				PrintLog("StateHoldFixation - broke fixation.\n");
				SafeSampleKey("x");
				iState% := stateFailure%;
				tStateStart := tNow;

        if InFixationWindow%(xEye, yEye) <= 0 then

				if tNow - tStateStart >= crgFixationDuration then
	
						' put stim up and start counting triggers
						SafeSampleKey("S");
						PrintLog("StateHoldFixation - success, put up stim.\n");
						iState% := stateStimulus%;
						tStateStart := tNow;
						tStartCRGSegment := tNow;
	
				endif

        else

            if tNow - tStateStart >= crgFixationDuration then

                ' put stim up and start counting triggers
                SampleKey("S");
                LogStatus("HoldFixation", "Request stim");
                ChangeStateTo(stateStimulus%, tNow);

            endif

        endif

				PrintLog("StateStimulus - broke fixation.\n");
				SafeSampleKey("x");
				iState% := stateFailure%;
				tStateStart := tNow;

	case iState% = stateStimulus% then

        ' If fixation is broken stop the current segment. 
        ' If fixation still good, check if segment time is done. 

					' Fixation. Reward. New trial.
					SafeSampleKey("s");
					PrintLog("StateHoldFixation - success.\n");
					iState% := stateSuccess%;
					tStateStart := tNow;

            SampleKey("X");
            LogStatus("HoldFixation", "Broken fixation.");
            ChangeStateTo(stateFailure%, tNow);
        else
            
            ' Find stim start time if its not already known.
            if tStartCRGSegment < 0 then
                View(DataWindow%).FindRisingEdge%(StimChannel%, tStateStart, tStartCRGSegment);
            endif
            
            ' if stim start time is known, check if time is up
            if tStartCRGSegment > 0 and tNow - tStartCRGSegment > crgSegmentTime then
                SampleKey("X");
                ChangeStateTo(stateSuccess%, tNow);
                LogStatus("Stimulus", "Successful trial");
                
				' Process raster plot. Time of first trigger is start time; tNow is end time
                if crgDoRasterPlot% = 1 then
                    View(RasterWindow%).Process(tStartCRGSegment, tNow, 0, 1);
                endif
                
			endif
        endif

    case iState% = stateSuccess% then

        PrintLog("StateSuccess - reward.\n");
        nTrialsSuccess% += 1;
        Reward%();
        iState% := stateInterval%;

    case iState% = stateFailure% then

        PrintLog("StateFailure - wait interval starting.\n");
        nTrialsFail% += 1;
        iState% := stateInterval%;
        tStateStart := tNow;

    case iState% = stateInterval% then

        ' Inter-trial wait time
        if tNow - tStateStart > crgInterTrialTime then

            ' Back to state 0
            PrintLog("StateInterval - done, start new trial.\n");
            iState% := stateStartTrial%;
            tStateStart := tNow;

        endif

    else 

        ' Unknown state!
        Message("Unknown state=" + str$(iState%));
        halt;

	endcase;

	tLast := tNow;
	
	return iStatus%;

end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var i%;
    
	SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 3);
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 1);
    SampleAutoName$(dataCellName$ + "_crg_000");
	SampleAutoFile(1);

	' Text mark channel for msequence indicators. The "10" is the max # of characters in a mark.
	SampleTextMark(15);

	'Channel recording definitions
	SampleEvent(FixationPointChannel%,2,2,3600); 'Trigger channel, level
	SampleComment$(FixationPointChannel%,"Fixpt");
	SampleTitle$(FixationPointChannel%,"Fixpt");
	
	SampleEvent(StimChannel%,3,2,3600); 'Trigger channel, level
	SampleComment$(StimChannel%,"Stim");
	SampleTitle$(StimChannel%,"Stim");
    
	SampleEvent(ReadyChannel%, 1, 2, 3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");
    
	SampleEvent(FrameChannel%, 0, 2, 3600); 'Trigger channel, level
	SampleComment$(FrameChannel%,"Frame");
	SampleTitle$(FrameChannel%,"Frame");
    
    ' Electrodes: wavemark/continuous
    for i% := 0 to crgNWavemarks%-1 do
		SampleWaveMark(i% + 1, crgWavemarkPorts%[i%], 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(i% + 1, "WMrk " + str$(crgWavemarkPorts%[i%])); 
	next
    for i% := 0 to crgNContinuous%-1 do
        SampleWaveform(crgNWavemarks% + i% + 1, crgContinuousPorts%[i%], 20000);
        SampleTitle$(crgNWavemarks% + i% + 1, "Cont " + str$(crgContinuousPorts%[i%]));
    next
        
	SampleWaveform(XChannel%, GetEyeXPort%(), 1000);
	SampleTitle$(XChannel%,"Eye X");
	SampleWaveform(YChannel%, GetEyeYPort%(), 1000);
	SampleTitle$(YChannel%,"Eye Y");
    
    if crgOldSkoolJuicer% = 0 then
        SampleSequencer(script$ + "Tuning.pls");
    else
        SampleSequencer(script$ + "TuningOSJ.pls");
    endif
        
	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawStim
' 
' Draws stimulus in xy window (iDraw%==1) or blanks it (0). 
proc DrawStim(iDraw%)

	if iDraw% > 0 then
'		var xstim:=0, ystim:=0;
'		xstim := GetStimX();
'		ystim := GetStimY();

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iStimChannel%, FixationX, FixationY);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], FixationX);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], FixationY);

		View(XYWindow%).XYAddData(iStimWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iStimChannel%);
		View(XYWindow%).XYDelete(iStimWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(0, 50, 50, 100);
	View(DataWindow%).WindowVisible(1);
    XRange(0, 30);

	'Open an XY view to display eye position
	XYWindow% := FileNew(12);
	XRange(-30,30);
	YRange(-2,-30,30);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(0, 0, 50, 50);
	XYColour(1,16);
	XYSize(1,-1);

	'Calcuate the fixation window
	var index%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for index% := 0 to 35 do
		FixWindowX[index%] := WindowRadius * Cos(index% * twopi/36.0);
		FixWindowY[index%] := WindowRadius * Sin(index% * twopi/36.0);
	next;

	'Create a new channel in the XY view to display the fixation window
	iStimWindowChannel% := XYSetChan(0);
	XYColour(2,13);
	XYDrawMode(2,2,1);
	XYJoin(2,1);

	'Draw the fixation window ON SECOND THOUGHT, DON'T
	'XYAddData(2, FixWindowX[], FixWindowY[]);	

	'Create a new channel in the XY view to display the fixation point
	iStimChannel% := XYSetChan(0);

	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(4,13);
	XYDrawMode(4,3,1);
	XYJoin(4,2);
	XYAddData(4,-9,-7);
	XYAddData(4,9,-7);
	XYAddData(4,9,7);
	XYAddData(4,-9,7);
    
   	' Raster plot
    var electrodeChannelList%[10];
    ChanList(electrodeChannelList%[], 16);
    if electrodeChannelList%[0] > 0 then
        crgDoRasterPlot% := 1;
        RasterWindow% := View(DataWindow%).SetPSTH(electrodeChannelList%[], 1, crgSegmentTime + crgFixationDuration, crgFixationDuration, 0, 2);
        View(RasterWindow%);
        WindowVisible(1);
        Window(50, 0, 100, 50);
        ChanHide(electrodeChannelList%[]);
    endif

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(1,"Sample start",Start%);
	ToolbarSet(2,"Sample stop", Stop%);
	ToolbarSet(3,"Juice",Reward%);
	ToolbarSet(4,"Quit",Quit%);
	ToolbarEnable(2,0);
	ToolbarEnable(4,0);
	Toolbar("Go", 0x3ff);

end;



' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
	var CommandLine$;
	var FixationPoint$;
	var Extras$;
	var Distractors$:="";
	var gr$;
	var x, y, w, h, sf, tf, ori;
    var contrast%;
    var cv$, pattern$, aperture$;
	var i%;
	
	SampleStart(0); 'Start sampling
    
    ' Set Sequencer Variable #3 based on juicer type 
    SetJuicerSequencerVariable%();    
    
	SafeSampleKey("0");	' clear trigger lines 
	GetCRGScriptParameters();

'	Get the grating stimulus parameters and parse
	gr$ := GetGratingParameters$("Stimulus");
'    ParseGratingParameters%(gr$, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
'    gr$ := EncodeGratingParameters$(x, y, w, h, crgContrast%, crgSF, 0, ori, cv$, pattern$, aperture$)
    
	CommandLine$ := "cmd /k " + bin$ + "\\fixstim -v -p 2 -d " + GetDistanceToScreenMM$() + GetFixationArg$() + " -s " + gr$; 
    
    if crgBalanceStim% = 1 then
        Extras$ += " -B ";
    else
        Extras$ += " -R ";
    endif
    Extras$ +=  + str$(crgFramesPerTerm%) + "," + str$(crgFirstTerm%) + "," + str$(crgSegmentLength%);
    CommandLine$ += Extras$;
        
	LogInfo(CommandLine$);
	StimHandle% := ProgRun(CommandLine$, 1);
	if StimHandle% <0 then Message("Could not start stimulus."); halt; endif

	ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
	ToolbarEnable(4,1);

	View(DataWindow%);
	Yield(.1);
	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()

	' Disable idle process func
	ToolbarSet(0,"");

	' Tell stim app to shut down
	SafeSampleKey("q");
	Yield(.1);
	SampleStop();
	ProgKill(StimHandle%);
	while ProgStatus(StimHandle%) > 0 do
		Yield();
	wend
	WriteParameterFile();
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InFixationWindow%(EyePosX,EyePosY)
	var i% := 0;
    if crgAlwaysLooking% = 0 then
        if (Pow(EyePosX-FixationX, 2) + Pow(EyePosY-FixationY, 2)) <= Pow(WindowRadius,2) then 
            i% := 1;
        endif
    else
        i% := 1;
    endif
	return i%;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
	'Check juicer type and deliver reward
    if JuicerType% = 1 then  'open-high juicer, dispense based on ms
        DeliverReward();
    else
        if JuicerType% = 2 then  'open-low juicer, dispense based on number of hits
            DeliverRewardNumber();
        endif;
    endif;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc WriteParameterFile()
	var parFileName$;
	var parFileBase$;
	var parHandle%;

	' get filename for parfile (data file + "par" extension) and open it
	View(DataWindow%);
    parFileName$ := ReplaceFileExtension$(0, ".par");
	parHandle% := FileOpen(parFileName$, 8, 1);

	' write general info - eye coil gains, dist to screen
	Print("General information\n");
	Print("-------------------\n\n");
	Print("Distance to screen (MM)    : %s\n", GetDistanceToScreenMM$());
	Print("Eye coil software gain (X) : %f\n", DegreesPerVoltX);
	Print("Eye coil software gain (Y) : %f\n", DegreesPerVoltY);

	' write fixpoint parameters
	Print("\nFixation point\n");
	Print("-------------------\n\n");
	Print("Window radius              : %f\n", WindowRadius);
	Print("Position (x, degrees)      : %f\n", FixationX);
	Print("Position (y, degrees)      : %f\n", FixationY);
	Print("Diameter (degrees)         : %f\n", FixationDiameter);
	Print("Color                      : %s\n", FixationColor$);

	' write stimulus parameters
	Print("\nStimulus\n");
	Print("-------------------\n\n");

	var Tstimstr$;
	var Tstimx$, Tstimy$, Tstimw$, Tstimh$, Tstimcontrast$, Tstimsf$, Tstimtf$, Tstimorientation$, Tstimcv$, Tstimp$, Tstimap$;
	var i%;
	var Tstepsize;
	Tstimstr$ := GetGratingParameters$("Stimulus");
	ReadSetup(",",",",",",",",",");
	i% := ReadStr(Tstimstr$, Tstimx$, Tstimy$, Tstimw$, Tstimh$, Tstimcontrast$, Tstimsf$, Tstimtf$, Tstimorientation$, Tstimcv$, Tstimp$, Tstimap$);
	Print("Position (x, degrees)           : %s\n", Tstimx$);
	Print("Position (y, degrees)           : %s\n", Tstimy$);
	Print("Diameter (degrees)              : %s\n", Tstimw$);
	Print("Color: b/w(b),lms-cone(l,m,s)   : %s\n", Tstimcv$);
	Print("Spatial frequency               : %s\n", Tstimsf$);
	Print("Contrast (%%)                   : %s\n", Tstimcontrast$);
	Print("Segment Length (terms)          : %s\n", str$(crgSegmentLength%));
	Print("Frames per term                 : %s\n", str$(crgFramesPerTerm%));

	Print("\nExperimental parameters\n");
	Print("-------------------------\n\n");

	Print("Acquisition time (s)   : %f\n", crgAcquisitionTime);
	Print("Fixation time(s)       : %f\n", crgFixationDuration);
	Print("InterTrial time (s)    : %f\n", crgInterTrialTime);


	' close parfile
	FileClose(0);

end;


