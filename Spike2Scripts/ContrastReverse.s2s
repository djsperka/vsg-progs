' $Id: ContrastReverse.s2s,v 1.4 2010-10-27 21:04:54 devel Exp $

#include "../../Spike2util\UsreyUtil.s2s"
#include "UsreyGratings.s2s"
#include "UsreyDAQ.s2s"
#include "UsreyFixationPoint.s2s"





'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Contrast Reverse Grating script parameters START
'
'	Vars that control the contrast reverse grating script. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
var crgFixationDuration;			' Time required to maintain fixation, seconds
var crgAcquisitionTime;			' Time allowed to acquire target before fail trial, seconds
var crgInterTrialTime;			' Blank time following a trial (both successful and failed), seconds
var crgSegmentLength%;			' Terms in a segment of the msequence
var crgSegmentTime;				' Time in a segment of the msequence - this is entered as a parameter - vsg app returns segment length!
var crgFramesPerTerm%;			' frames that each msequence term is shown
var crgContrast%;			' High contrast value
var crgSF;							' spatial frequency (not necessarily same as that in stimulus)
var crgDiameter;					' aperture diameter
var crgAlwaysLooking% := 1;     ' set to 1 so InFixationWindow always returns 1 (testing only!)


proc GetCRGScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\ContrastReverse";

	Profile(key$, "FixationDuration", "1.0", stmp$);
	crgFixationDuration := val(stmp$);

	Profile(key$, "AcquisitionTime", "1.0", stmp$);
	crgAcquisitionTime := val(stmp$);

	Profile(key$, "InterTrialTime", "1.0", stmp$);
	crgInterTrialTime := val(stmp$);

	Profile(key$, "SegmentTime", "3.0", stmp$);
	crgSegmentTime := val(stmp$);

	Profile(key$, "FramesPerTerm", 1, crgFramesPerTerm%);
	Profile(key$, "Contrast", 100, crgContrast%);

	Profile(key$, "SF", "1.0", stmp$);
	crgSF := val(stmp$);
	Profile(key$, "Diameter", "4.0", stmp$);
	crgDiameter := val(stmp$);

end;
 	
proc SaveCRGScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\ContrastReverse";

	Profile(key$, "FixationDuration", str$(crgFixationDuration));
	Profile(key$, "AcquisitionTime", str$(crgAcquisitionTime));
	Profile(key$, "InterTrialTime", str$(crgInterTrialTime));
	Profile(key$, "SegmentTime", str$(crgSegmentTime));
	Profile(key$, "FramesPerTerm", crgFramesPerTerm%);
	Profile(key$, "Contrast", crgContrast%);
	Profile(key$, "SF", str$(crgSF));
	Profile(key$, "Diameter", str$(crgDiameter));
end;



func CRGScriptDialog%()
	var i%;
	GetCRGScriptParameters();
	DlgCreate("CRG Script Parameters", 25, 10);
	DlgReal(1, "Fixation duration(s):", .01, 10);
	DlgReal(2, "Acquisition time(s):", .01, 10);
	DlgReal(3, "Intertrial time(s):", .01, 10);
	DlgReal(4, "Segment time (s):", 0.1, 1000);
	DlgInteger(5, "Frames per term:", 1, 100);
	DlgInteger(6, "Contrast (%):", -100, 100);
	DlgReal(7, "Spatial frequency:", .01, 100);
	DlgReal(8, "Diameter(deg):", .01, 100);
	i%:=DlgShow(crgFixationDuration, crgAcquisitionTime, crgInterTrialTime, crgSegmentTime, crgFramesPerTerm%, crgContrast%, crgSF, crgDiameter);
	if i% = 1 then
		PrintLog("Saving params\n");
		SaveCRGScriptParameters();
	endif;
	return i%;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' CRG script END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''












' Window handles and channel numbers
var XChannel%,YChannel%;		' Channel number assigned to eye x and y
var FrameChannel%;
var DotChannel%;				' Channel number assigned to vsg trigger for dot
var StimChannel%;				' Channel number assigned to vsg trigger for stim
var ReadyChannel%;			' channel number for VSG ready pulse signal
var DataWindow%;	' time view
var XYWindow%;		' window with eye pos shown
var PhaseWindow%;		' Phase plot window
var RasterWindow%;	' raster plot window
var iStimChannel%;	' channel number for stimulus in xy window
var iStimWindowChannel%;' channel number for stimulus window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var StimHandle%;	' handle for stimulus application
var baseFileName$;		' basefilename with dir - populated in Start%()
' Experimental control
var Pause%:=0;		' When 1, expt is paused - no idle processing done

' Display stuff
var FixWindowX[36],FixWindowY[36];	' points for displaying fixation window in xy view
var windowX[36], windowY[36];
' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];
var iStimIndex%;



GetCRGScriptParameters();
if CRGScriptDialog%() = 0 then
    halt;
endif

' Warn user if always looking is turned on!
if crgAlwaysLooking% = 1 then
    if Query("Script is configured to NOT use eye tracker input.\n"
        "Change to use eye tracker?") = 1 then
        crgAlwaysLooking% := 0;
    endif
endif


' Assign channel numbers for eye X,Y and trigger. 
XChannel% := NumberOfElectrodes% + 1;
YChannel% := NumberOfElectrodes% + 2;
FrameChannel% := NumberOfElectrodes% + 3;
DotChannel% := NumberOfElectrodes% + 4;
StimChannel% := NumberOfElectrodes% + 5;
ReadyChannel% := NumberOfElectrodes% + 6;
CreateSampleConfiguration();

' Get display windows ready
InitializeWindows();

' Prepare the toolbar buttons
InitializeToolbar();







const stateStartTrial%		:= 0;
const stateWaitForDot%		:= 1;
const stateWaitForAcquisition%	:= 2;
const stateHoldFixation%	:= 3;
const stateSuccess%		:= 4;
const stateFailure%		:= 5;
const stateStimOff%		:= 6;
const stateWaitForBlank%	:= 7;
const stateCheckTrial%		:= 8;
const stateInterval%		:= 9;
const stateDone%		:= 10;
const stateVSGWait%:=10;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%:=11;		' waif for vsg to send ready signal #2
const stateStimulus% := 12;		' stimulus is up
const stateGetSegmentLength% := 13;		' check for segment length in par file

var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var iState%:=stateVSGWait%;		' present state
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tTrigger:=-1;	' temp var for newly discovered trigger times
var tAcquisition:= -1;
var nTrialsStarted%:=0;
var nTrialsSuccess%:=0;
var nTrialsFail%:=0;

' vars for keeping track of the msequence. 
var tStartCRGSegment := 0;		' time when msequence segment was started (approx; this is guaranteed to be BEFORE the start of the segment)
var iCRGTriggerCount% := 0;	' running count of triggers during an msequence segment. 


' Run real time analysis here. 
func IdleProcessing%()
	var iStatus% := 1;	' this is return value. value of 1 (0) continues (stops) processing
	tNow := MaxTime();

	xEye := ChanMeasure(XChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltX;
	yEye := ChanMeasure(YChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltY;

	' Don't update display every time....
	if tNow-tLastUpdate > .005 then
		View(XYWindow%).XYAddData(1,xEye,yEye);
		tLastUpdate := tNow;
	endif

	' What state are we in? 
	docase 

	
		case iState% = stateVSGWait% then

			' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
			tTrigger := NextTime(ReadyChannel%, tLast, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 0 then
				PrintLog("state stateVSGWait: Got leading edge of trigger\n");
				tLastTrigger := tTrigger;
				iState% := stateVSGWaitConfirm%;
			endif;

		case iState% = stateVSGWaitConfirm% then

			' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
			tTrigger := NextTime(ReadyChannel%, tLastTrigger, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 1 then
				PrintLog("state stateVSGWaitConfirm: Got trailing edge of trigger\n");
				tLastTrigger := tTrigger;
				iState% := stateGetSegmentLength%;
			endif;

		case iState% = stateGetSegmentLength% then
			if (GetSegmentLength%() = 0) then
				PrintLog("GetSegmentLength() failed!\n");
'				Stop%();
				halt;
			else 
				iState% := stateStartTrial%;
			endif;
	
		case iState% = stateStartTrial% then

			' initial state on startup. 
			' DIGOUT to present stimulus
			' Enter state 1

			nTrialsStarted% += 1;
			SampleKey("D");
			iState% := stateWaitForDot%;
			PrintLog("StateStartTrial - dot trigger sent\n");

		case iState% = stateWaitForDot% then
	
			' Waiting for stimulus to be presented by vsg and trigger to return. 
			' NextTime returns a non-negative value whenever there is a TRANSITION. In that case, the 
			' value of 'vTrigger' returned is 1 (0) if the transition is high (low) to low (high). Maybe not
			' intuitive, but that's the way it is. 
			tTrigger := NextTime(DotChannel%,tLast,vTrigger);
			if tTrigger > tLastTrigger then

				if vTrigger = 0 then
		
					' Stimulus has been presented. Display stim location and window. Enter state 2
					DrawStim(1);
					iState% := stateWaitForAcquisition%;
					tStateStart := tNow;

				endif

			endif

		case iState% = stateWaitForAcquisition% then

			if tNow-tStateStart < crgAcquisitionTime then
				
				' Acquisition happens when the eye falls within the fixation window.
				if InFixationWindow%(xEye, yEye) > 0 then

					PrintLog("StateWaitForAcquisition - acquired target.\n");
					iState% := stateHoldFixation%;
					tStateStart := tNow;
					tAcquisition := tNow;	
				endif

			else

				' Failed. Turn off stim and try again.
				PrintLog("StateWaitForAcquisition - failed.\n");
				SampleKey("x");
				iState% := stateFailure%;
				tStateStart := tNow;

			endif

		case iState% = stateHoldFixation% then

			' If fixation is broken stop the current segment. 
			' Otherwise, count the number of frame triggers since tStartMsqSegment. If that count equals
			' the number of terms in the segment, the function call will mark the data file accordingly.

			if InFixationWindow%(xEye, yEye) <= 0 then

				PrintLog("StateHoldFixation - broke fixation.\n");
				SampleKey("x");
				iState% := stateFailure%;
				tStateStart := tNow;

			else

				if tNow - tStateStart >= crgFixationDuration then
	
						' put stim up and start counting triggers
						SampleKey("S");
						PrintLog("StateHoldFixation - success, put up stim.\n");
						iState% := stateStimulus%;
						tStateStart := tNow;
						tStartCRGSegment := tNow;
	
				endif

			endif


		case iState% = stateStimulus% then

			' If fixation is broken stop the current segment. 
			' Otherwise, count the number of frame triggers since tStartMsqSegment. If that count equals
			' the number of terms in the segment, the function call will mark the data file accordingly.

			if InFixationWindow%(xEye, yEye) <= 0 then

				PrintLog("StateStimulus - broke fixation.\n");
				SampleKey("x");
				iState% := stateFailure%;
				tStateStart := tNow;

			else

				iCRGTriggerCount% := View(DataWindow%).Count(FrameChannel%, tStartCRGSegment, tNow);
				if iCRGTriggerCount% = crgSegmentLength%+1 then

					' Fixation. Reward. New trial.
					SampleKey("s");
					PrintLog("StateHoldFixation - success.\n");
					iState% := stateSuccess%;
					tStateStart := tNow;


					' Process raster plot. First get time of first trigger. Use that as start time, and tNow as end time
					var tmp%;
					tmp% := View(RasterWindow%).Process(tAcquisition, tNow, 0, 1);
'					PrintLog(str$(tmpFirst) + "-" + str$(tNow) + " " + "Process=" + str$(tmp%) + "\n");


				endif

			endif

		case iState% = stateSuccess% then

			PrintLog("StateSuccess - reward.\n");
			nTrialsSuccess% += 1;
			Reward%();
			iState% := stateInterval%;

		case iState% = stateFailure% then

			PrintLog("StateFailure - wait interval starting.\n");
			nTrialsFail% += 1;
			iState% := stateInterval%;
			tStateStart := tNow;

		case iState% = stateInterval% then

			' Inter-trial wait time
			if tNow - tStateStart > crgInterTrialTime then

				' Back to state 0
				PrintLog("StateInterval - done, start new trial.\n");
				iState% := stateStartTrial%;
				tStateStart := tNow;
	
			endif

		else 

			' Unknown state!
			Message("Unknown state=" + str$(iState%));
			halt;

	endcase;

	tLast := tNow;
	
	return iStatus%;

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;
    
	SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 3);
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 1);
    SampleAutoName$(dataCellName$ + "_crg_000");
	SampleAutoFile(1);

	' Text mark channel for msequence indicators. The "10" is the max # of characters in a mark.
	SampleTextMark(15);

	'Channel recording definitions
	SampleEvent(FrameChannel%, 0, 0, 3600); 'Trigger channel, level
	SampleComment$(FrameChannel%, "Frame");
	SampleTitle$(FrameChannel%, "Frame");
	
	SampleEvent(DotChannel%, 1, 2, 3600); 'Trigger channel, level
	SampleComment$(DotChannel%, "Dot");
	SampleTitle$(DotChannel%, "Dot");

	SampleEvent(StimChannel%, 2, 2, 3600); 'Trigger channel, level
	SampleComment$(StimChannel%, "Stim");
	SampleTitle$(StimChannel%, "Stim");

	' channel to look for ready signal from vsg
	SampleEvent(ReadyChannel%,6,2,3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");


	for index := 1 to NumberOfElectrodes% do
		SampleWaveMark(index,index-1,2000,34,15,28000); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(index, "Electrode_"+Str$(index)); 
	next

	'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
	SampleWaveform(XChannel%, 14, 1000);
	SampleTitle$(XChannel%,"Eye X");
	SampleWaveform(YChannel%, 15, 1000);
	SampleTitle$(YChannel%, "Eye Y");

	SampleSequencer(script$ + "ContrastReverse.pls");
	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawStim
' 
' Draws stimulus in xy window (iDraw%==1) or blanks it (0). 
proc DrawStim(iDraw%)

	if iDraw% > 0 then
'		var xstim:=0, ystim:=0;
'		xstim := GetStimX();
'		ystim := GetStimY();

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iStimChannel%, FixationX, FixationY);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], FixationX);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], FixationY);

		View(XYWindow%).XYAddData(iStimWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iStimChannel%);
		View(XYWindow%).XYDelete(iStimWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(0, 50, 50, 100);
	View(DataWindow%).WindowVisible(1);

	'Open an XY view to display eye position
	XYWindow% := FileNew(12);
	XRange(-30,30);
	YRange(-2,-30,30);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(0, 0, 50, 50);
	XYColour(1,16);
	XYSize(1,-1);

	'Calcuate the fixation window
	var index%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for index% := 0 to 35 do
		FixWindowX[index%] := WindowRadius * Cos(index% * twopi/36.0);
		FixWindowY[index%] := WindowRadius * Sin(index% * twopi/36.0);
	next;

	'Create a new channel in the XY view to display the fixation window
	iStimWindowChannel% := XYSetChan(0);
	XYColour(2,13);
	XYDrawMode(2,2,1);
	XYJoin(2,1);

	'Draw the fixation window ON SECOND THOUGHT, DON'T
	'XYAddData(2, FixWindowX[], FixWindowY[]);	

	'Create a new channel in the XY view to display the fixation point
	iStimChannel% := XYSetChan(0);

	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(4,13);
	XYDrawMode(4,3,1);
	XYJoin(4,2);
	XYAddData(4,-9,-7);
	XYAddData(4,9,-7);
	XYAddData(4,9,7);
	XYAddData(4,-9,7);


	' Raster plot
	var electrodeChannels$;
	electrodeChannels$ := "1.." + str$(NumberOfElectrodes%);

'	RasterWindow% := View(DataWindow%).SetPSTH(electrodeChannels$, 1, crgSegmentTime + crgInterTrialTime, 0, 0, 2);
	RasterWindow% := View(DataWindow%).SetPSTH(electrodeChannels$, 1, crgSegmentTime + crgFixationDuration, crgFixationDuration, 0, 2);
	View(RasterWindow%);
	WindowVisible(1);
	Window(50, 0, 100, 50);
	ChanHide(electrodeChannels$);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(1,"Sample start",Start%);
	ToolbarSet(2,"Sample stop", Stop%);
	ToolbarSet(3,"Juice",Reward%);
	ToolbarSet(4,"Quit",Quit%);
	ToolbarEnable(2,0);
	ToolbarEnable(4,0);
	Toolbar("Go", 0x3ff);

end;



' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
	var CommandLine$;
	var FixationPoint$;
	var Extras$;
	var Distractors$:="";
	var gr$;
	var x, y, w, h;
	var i%;
	
	SampleStart(0); 'Start sampling
	SampleKey("0");	' clear trigger lines 
	GetCRGScriptParameters();

'	Get the grating stimulus parameters and skim off the xy position
	gr$ := GetGratingParameters$("Stimulus");
	if gr$ <> "" then
		ReadSetup("", "", "", "", ",");
		i% := ReadStr(gr$, x, y, w, h);
		if (i% <> 4) then
			Message("Cannot get stimulus settings from registry!");
			return 1;
		endif
	endif
	baseFileName$ := GetBaseFileName$();
	CommandLine$ := "cmd /k " + bin$ + "\\ContrastReverse -m " + GetStimDir$(1) + "msequenceterms";
	CommandLine$ += " -p " + str$(x) + "," + str$(y) + " -l " + str$(crgSegmentTime) + " -t " + str$(crgFramesPerTerm%) + " -D " + DistanceToScreenMM$ + " " + FixationArg$;
	CommandLine$ += " -d " + str$(crgDiameter) + " -s " + str$(crgSF) + " -C " + str$(crgContrast%) + "," + str$(-1*crgContrast%);
	CommandLine$ += " -F " + baseFileName$ + ".par";

	'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
	PrintLog(CommandLine$+"\n");
	StimHandle% := ProgRun(CommandLine$,1);
	if StimHandle% <0 then Message("Could not start stimulus."); halt; endif
'	Yield(5);	'Wait a few seconds to make sure the VSG has time to initialize.

	ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
	ToolbarEnable(4,1);

	View(DataWindow%);
	Yield(.1);
	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()

	' Disable idle process func
	ToolbarSet(0,"");

	' Tell stim app to shut down
	SampleKey("q");
	Yield(.1);
	SampleStop();
	ProgKill(StimHandle%);
	while ProgStatus(StimHandle%) > 0 do
		Yield();
	wend
	ProgRun(bin$ + "\\ClearTrigger",0);
	WriteParameterFile();
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InFixationWindow%(EyePosX,EyePosY)
	var i% := 0;
    if crgAlwaysLooking% = 0 then
        if (Pow(EyePosX-FixationX, 2) + Pow(EyePosY-FixationY, 2)) <= Pow(WindowRadius,2) then 
            i% := 1;
        endif
    else
        i% := 1;
    endif
	return i%;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
	var i;
	for i:=1 to JuicePerReward% do Yield(.05); SampleKey("J"); next
	Yield(.05);
	return 1;
end;


' Get base of data and parameter filename
func GetBaseFileName$()
	var parFileBase$;
	View(DataWindow%);
	parFileBase$ := FileName$(1) + FileName$(2) + FileName$(3) + FileName$(4);
	return parFileBase$;
end;


func GetSegmentLength%()
	var ival% := 0;
	var tmpHandle%;
	var oldHandle%;
	tmpHandle% := FileOpen(baseFileName$ + ".par", 8, 0);
	if (Read(crgSegmentLength%) = 1) then
		ival% := crgSegmentLength%;
		PrintLog("Segment length is " + str$(crgSegmentLength%) + "\n");
	endif;
	FileClose(tmpHandle%);
	View(DataWindow%);
	return ival%;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc WriteParameterFile()
	var parFileName$;
	var parFileBase$;
	var parHandle%;

	' get filename for parfile (data file + "par" extension) and open it
	View(DataWindow%);
	parFileBase$ := GetBaseFileName$();
	parFileName$ := parFileBase$ + ".par";
	PrintLog("par filename is " + parFileBase$ + "\n");
	parHandle% := FileOpen(parFileName$, 8, 1);

	' write general info - eye coil gains, dist to screen
	Print("Parameters for %s\n\n", parFileBase$);

	Print("General information\n");
	Print("-------------------\n\n");
	Print("Distance to screen (MM)    : %s\n", DistanceToScreenMM$);
	Print("Eye coil software gain (X) : %f\n", DegreesPerVoltX);
	Print("Eye coil software gain (Y) : %f\n", DegreesPerVoltY);
	Print("Eye coil sampling freq (Hz): %d\n", EyeCoilSamplingFrequency%);
	Print("Number of electrodes       : %d\n", NumberOfElectrodes%);
	Print("Juices per reward          : %d\n", JuicePerReward%);

	' write fixpoint parameters
	Print("\nFixation point\n");
	Print("-------------------\n\n");
	Print("Window radius              : %f\n", WindowRadius);
	Print("Position (x, degrees)      : %f\n", FixationX);
	Print("Position (y, degrees)      : %f\n", FixationY);
	Print("Diameter (degrees)         : %f\n", FixationDiameter);
	Print("Color                      : %s\n", FixationColor$);

	' write stimulus parameters
	Print("\nStimulus\n");
	Print("-------------------\n\n");

	var Tstimstr$;
	var Tstimx$, Tstimy$, Tstimw$, Tstimh$, Tstimcontrast$, Tstimsf$, Tstimtf$, Tstimorientation$, Tstimcv$, Tstimp$, Tstimap$;
	var i%;
	var Tstepsize;
	Tstimstr$ := GetGratingParameters$("Stimulus");
	ReadSetup(",",",",",",",",",");
	i% := ReadStr(Tstimstr$, Tstimx$, Tstimy$, Tstimw$, Tstimh$, Tstimcontrast$, Tstimsf$, Tstimtf$, Tstimorientation$, Tstimcv$, Tstimp$, Tstimap$);
	Print("Position (x, degrees)           : %s\n", Tstimx$);
	Print("Position (y, degrees)           : %s\n", Tstimy$);
	Print("Diameter (degrees)              : %s\n", str$(crgDiameter));
	Print("Color: b/w(b),lms-cone(l,m,s)   : %s\n", Tstimcv$);
	Print("Spatial frequency               : %s\n", str$(crgSF));
	Print("Contrast (%%)                   : %s\n", str$(crgContrast%));
	Print("Segment Length (terms)          : %s\n", str$(crgSegmentLength%));
	Print("Frames per term                 : %s\n", str$(crgFramesPerTerm%));

	Print("\nExperimental parameters\n");
	Print("-------------------------\n\n");

	Print("Acquisition time (s)   : %f\n", crgAcquisitionTime);
	Print("Fixation time(s)       : %f\n", crgFixationDuration);
	Print("InterTrial time (s)    : %f\n", crgInterTrialTime);


	' close parfile
	FileClose(0);

end;


