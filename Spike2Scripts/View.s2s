' $Log: not supported by cvs2svn $ 


'Determine which monkey we're currently running
var Monkey$;
Profile("AlertRig","CurrentMonkey","",Monkey$);
if Monkey$="" then Message("Could not determine current monkey"); halt; endif

'Get information on current calibration constants (software gains) for the eye coil from the registry
var DegreesPerVoltX, DegreesPerVoltY,DegreesPerVoltX$, DegreesPerVoltY$;
Profile("AlertRig\\"+Monkey$,"DegreesPerVoltX","5",DegreesPerVoltX$); '5 is the default if no registry entry exists
Profile("AlertRig\\"+Monkey$,"DegreesPerVoltY","10",DegreesPerVoltY$); '10 is the default if no registry entry exists

var NumberOfChannels%,XChannel%,YChannel%,TriggerChannel%;
NumberOfChannels%:=Input("Number of channels :",1,1,14);
XChannel% := NumberOfChannels%+1;
YChannel% := NumberOfChannels%+2;
TriggerChannel% := NumberOfChannels%+3;
CreateSampleConfiguration();

'Since registry values are either integers are strings, we store decimals as strings and convert them to decimals
DegreesPerVoltX := val(DegreesPerVoltX$);
DegreesPerVoltY := val(DegreesPerVoltY$);

'Open the data sampling window
var DataWindow%,XYWindow%;
DataWindow% := FileNew(0,4);	
Window(-0.235849,52.746,97.2484,99.8856);
View(DataWindow%).WindowVisible(1);

'Open an XY view window to display eye positions
XYWindow% := FileNew(12);	
WindowVisible(1);
Window(-0.550314,0.114416,41.5094,52.746);
XYColour(1,16);
XYSize(1,-1);

'Go ahead and start sampling
Start%();

'Display the toolbar and start sampling
ToolbarVisible(1);
ToolbarSet(0,"",IdleProcessing%);
ToolbarSet(1,"Sample stop", Stop%);
Toolbar("Go",10);

'Idle processing variables
var Time, LastUpdatedTime, EyePosX, EyePosY;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
SampleStart(0);	'Starts sampling
View(App(8)).WindowVisible(0);	'Hides the standard SampleBar
Yield(.1);	'Wait just a bit to collect some data before starting the IdleProcessing function
return 1;
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
SampleStop();
View(App(8)).WindowVisible(1);
end;
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func IdleProcessing%()   		'This function will be run whenever an interrupt
										'is available.
'Get the current sample time		
View(DataWindow%);
Time := MaxTime();	

'Update the eye position every 5 ms.
if Time > LastUpdatedTime +.005 then
	EyePosX := ChanValue(XChannel%,Time)*DegreesPerVoltX;
	EyePosY := ChanValue(YChannel%,Time)*DegreesPerVoltY;
	View(XYWindow%).XYAddData(1,EyePosX,EyePosY);
	LastUpdatedTime := Time;
endif

return 1;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
var index;
SampleClear(); 'Set standard sampling state
SampleAutoFile(0); 'Enable automatic file naming
SampleAutoComment(0); 'Prompt for comment after sampling
SampleAutoCommit(60); 'Seconds between each file commit

'Channel recording definitions
SampleEvent(TriggerChannel%,2,2,3600); 'Trigger channel, level
SampleComment$(TriggerChannel%,"Trigger");
SampleTitle$(TriggerChannel%,"Trigger");
'DrawMode(TriggerChannel%,2);	'Set the trigger channel to line mode.

for index := 1 to NumberOfChannels% do
	SampleWaveMark(index,index-1,2000,34,15,28000); ' chan, port, event rate, points, pre-trigger, rate
	SampleTitle$(index,"Electrode_"+Str$(index)); 
next

SampleWaveform(XChannel%,14,28000);
SampleTitle$(XChannel%,"Eye X");
SampleWaveform(YChannel%,15,28000);
SampleTitle$(YChannel%,"Eye Y");

SampleSequencer("c:\\alertrig\\Fixation.pls");
SampleOptimise(2,2,2,2,50);  'Set optimise mode (do this last)
SampleMode(1); 'Continuous sampling

end
