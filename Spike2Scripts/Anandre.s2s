' $Id: Anandre.s2s,v 1.3 2011-09-22 00:43:34 djsperka Exp $ 
'
' Anandre.s2s
'
' Does some filtering and downsampling on continuous record data. 
' Filter and downsampling parameters determined by Andre. I have
' tried to indicate where one can tweak the parameters. I also don't
' have any experience with the Spike2 filtering functions, so I 
' hope that I have reproduced the analysis that Andre asked for. 
'
' To run this analysis, open the data file and when it has focus, run this
' script. It takes a while and may consume all resources on your machine. 
' I've run this on a machine with 4GB of memory - I don't know the 
' minimum required. 
'
' Output is in the form of a Matlab ".mat" file, in same dir as the 
' data file, with same base filename. 
'
' Spike2 will appear to freeze while this is running. Be patient; large
' datafiles take a while. Haven't timed any, usually I run it and walk 
' away. Large files.....maybe 30 minutes? 

#include "../../Spike2Util/FileUtilities.s2s"



' These are the channels where we expect to find the 
' continuous record data. 
var lgnChannel% := 2;
var v1Channel% := 1;

' Filtering parameters. See the functions LFP% and MUA% below, and refer
' to Spike2 documentation for FiltCreate function. 
var lpFreq := 120;     ' low pass filter freq
var lpTRW := 70;
var bpLowFreq := 700;  ' band pass low freq
var bpHighFreq := 7000;  ' band pass hi freq
var bpTRW := 2.5;
var tStart := 0, tEnd := 60;
var exportFilename$;
var xchans%[5];
xchans%[0] := 4;
var lgnLFPChannel%;
var lgnMUAChannel%;
var v1LFPChannel%;
var v1MUAChannel%;
var testing% := 0;
var dchan% := -1;

if testing% = 0 then
    tEnd := MaxTime();
endif


' LGN LFP
xchans%[1] := LFP%(lgnChannel%, lpFreq, lpTRW, tStart, tEnd);
xchans%[0] := 1;
ChanTitle$(xchans%[1], "LGN LFP");
exportFilename$ := ModifyFilename$(0, "", "-lgnlfp", ".mat");
ExportStuff(tStart, tEnd, xchans%[], exportFilename$);
ChanDelete(xchans%[]);

' V1 LFP
xchans%[1] := LFP%(v1Channel%, lpFreq, lpTRW, tStart, tEnd);
xchans%[0] := 1;
ChanTitle$(xchans%[1], "V1 LFP");
exportFilename$ := ModifyFilename$(0, "", "-v1lfp", ".mat");
ExportStuff(tStart, tEnd, xchans%[], exportFilename$);
ChanDelete(xchans%[]);

' LGN MUA 
xchans%[1] := MUA%(lgnChannel%, bpTRW, bpLowFreq, bpHighFreq, lpFreq, lpTRW, tStart, tEnd);
xchans%[0] := 1;
ChanTitle$(xchans%[1], "LGN MUA");
exportFilename$ := ModifyFilename$(0, "", "-lgnmua", ".mat");
ExportStuff(tStart, tEnd, xchans%[], exportFilename$);
xchans%[0] := 2;
xchans%[2] := dchan%;
ChanDelete(xchans%[]);

' V1 MUA
xchans%[1] := MUA%(v1Channel%, bpTRW, bpLowFreq, bpHighFreq, lpFreq, lpTRW, tStart, tEnd);
xchans%[0] := 1;
ChanTitle$(xchans%[1], "V1 MUA");
exportFilename$ := ModifyFilename$(0, "", "-v1mua", ".mat");
ExportStuff(tStart, tEnd, xchans%[], exportFilename$);
xchans%[0] := 2;
xchans%[2] := dchan%;
ChanDelete(xchans%[]);


proc ExportStuff(t0, t1, ch%[], fname$)
    ' Optimize and display filtered channels
    Optimise(ch%[]);
    ChanShow(ch%[]);
    
    ' Now export
    ExportChanList();
    ExportChanList(t0, t1, ch%[]);
    PrintLog("Exporting %s\n", fname$);
    FileSaveAs(fname$, 100, 1, "", 2, "");

    return;
end

    
    
func LFP%(ichan%, lpFreq, lpTRW, sTime, eTime)
    var ochan%;
    
    ' Low pass filter
    FiltCreate(-1, 2, lpTRW, lpFreq);
    ochan% := FiltApply(-1, 0, ichan%, sTime, eTime);

    ' Downsample to 1kHz
    PrintLog("Sampling frequency is %f, downsamp 1:%d\n", 1/Binsize(ochan%), Round(1/Binsize(ochan%)/1000.));
    ChanProcessAdd(ochan%, 5, Round(1/Binsize(ochan%)/1000.));
    
    return ochan%;
end

func MUA%(ichan%, bandTRW, bandLow, bandHigh, lpFreq, lpTRW, sTime, eTime)
    var ochan2%;
    
    ' band pass filter
    FiltCreate(-1, 4, bandTRW, bandLow, bandHigh);
    dchan% := FiltApply(-1, 0, ichan%, sTime, eTime);
    
    ' Rectify
    ChanProcessAdd(dchan%, 0);
    
    ' Now do LFP process
    ochan2% := LFP%(dchan%, lpFreq, lpTRW, sTime, eTime);
    
    return ochan2%;
end
