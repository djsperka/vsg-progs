
'not sure which of these will be used
#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"


' tuning daq parameters
var tunNChannels% := 1;  'currently this can't be changed.  Setting to 1 to get a data channel

' tuning type-specific values
var tunFileLabel$ := "piezo";

' window handles
var tunWindowData%;

' DAC and ramp timing variables
var msPerSeqTick;

''
var msRampDur := 10;  'for right now, just use 10 ms, no dialog
''

var ticksPerRamp;  'how many sequencer ticks per ramp
var rampSlope;   'ramp slope, float (in DAC units per sequencer tick)
var rampSlope%;  'ramp slope, integer, for sequencer variable (in DAC units per sequencer tick)

''
var voltageStep := 1;  'for right now, no dialog, just use 9 (max input to Krub 20X amp)
''

var voltageInDACUnits%;
var maxVolts := 10;  'this is the maximum voltage of the Power1401, Krub machine is modified to +-10V
var vScale;
vScale := maxVolts/5;  'this sets the voltage scaling for vdac32% below

''
var msPlateauDur := 2000;  'for right now, just use 2 seconds, no dialog
''

var ticksPerPlateau;  'how many sequencer ticks in the plateau
var ticksPerPlateau%;  'integer version for sequencer variable

' Initialize logging
LogInit(1);


' Sampling config
CreateSampleConfiguration();


' Prepare display windows, input channels, etc. 
InitializeWindows();


' Initialize toolbar
ToolbarSet(1,"Quit",Quit%);
ToolbarSet(2,"Sample start",Start%);
ToolbarSet(3,"Sample stop", Stop%);
ToolbarEnable(3,0);
Toolbar("Go",1023);


' Oh no! Make sure sampling has stopped!
if SampleStatus() <> -1 then
    LogWarn("PiezoCake", "Toolbar exited and sampling status is " + str$(SampleStatus()) + ". Stopping sampling...");
    SampleStop();
    LogWarn("PiezoCake", "Sampling stopped.");
endif


proc CreateSampleConfiguration()
    
    var i%;
    var xy%;
    
	SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 3);
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 1);
    SampleAutoName$(dataCellName$ + "_" + tunFileLabel$ + "_000");
	SampleAutoFile(1);
    
    SampleUsPerTime(10);
    SampleTimePerADC(1);
    
    
    'Channel recording definitions

    for i% := 1 to tunNChannels% do
        SampleWaveMark(i%, i%-1, 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
        SampleTitle$(i%, "Spike " + Str$(i%-1));
    next
    
    'In case one day Deepa wants waveforms
    'for i% := 1 to tunNChannels% do
    '    SampleWaveform(i%+5, i%-1, 28000); ' chan, port, event rate, points, pre-trigger, rate
    '    SampleTitle$(i%+5, "WF " + Str$(i%-1));
    'next


    'Make textmark channel for easier data extraction
    SampleTextMark(200);  'Channel 30 is textmark channel 
    

    ' There is only a sequencer script in use if doing cooling
    SampleSequencer("C:\\CED Tuning\\AlertRig\\Spike2Scripts\\PiezoCake.pls");  'must get absolute location
    ' get correct location of sequencer script
    
    

    SampleOptimise(2, 2, 7, 2, 50);  'Set optimise mode (do this last)
    SampleMode(1); 'Continuous sampling
    
end;


proc InitializeWindows()
    
	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
    
    tunWindowData% := FileNew(0,4);
    View(tunWindowData%).WindowVisible(1);
    View(tunWindowData%).Window(0,33,100,100);
    
end


' Quit is used to exit the script entirely when nothing is running
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Quit%()
    return 0;
end;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Start is used to start sampling  
func Start%()

    
    ' Start sampling
    SampleStart(0);
    View(tunWindowData%);  
    
    
    ' Do timing calculations/DAC calculations, set sequencer variables
    ' Note that this will have to be done multiple times (subfunction?) once tuning curves happen
voltageInDACUnits% := vdac32%(voltageStep,vScale,0); 'not putting offset in a variable, I don't anticipate using it
printlog("voltage step is %d\n",voltageInDACUnits%);
    SampleSeqVar(5,voltageInDACUnits%);  'Set upwards voltage (5) in DAC units
    SampleSeqVar(6,-voltageInDACUnits%);  'Set downwards voltage (6) in DAC units, negative!
msPerSeqTick := SampleSeqClock(1);  'Get the tick period in milliseconds
printlog("ms per tick is %f\n",msPerSeqTick);
    ticksPerRamp := msRampDur/msPerSeqTick;  'Get the number of ticks per ramp
    rampSlope := voltageInDACUnits%/ticksPerRamp;  'get ramp slope in DAC units per tick, floating point
    rampSlope% := rampSlope;  'And put into integer variable
SampleSeqVar(7,rampSlope%);  'Set ramp slope (7) in DAC units per sequencer tick, integer
printlog("ramp slope is %d\n",rampSlope%);
    ticksPerPlateau := msPlateauDur/msPerSeqTick;  'Get the number of ticks per plateau
    ticksPerPlateau% := ticksPerPlateau;  'and convert to integer
    ticksPerPlateau% := ticksPerPlateau% - 3;  'subtract three ticks to account for three sequencer steps (TICKS, MOVI, DELAY)
    SampleSeqVar(8,ticksPerPlateau%);  'Set plateau duration (8) in sequencer ticks
printlog("ticks per plateau is %d\n",ticksPerPlateau%);
    
    ' Set idle here - before vsg launches so we cannot miss the ready signal. 
    ToolbarEnable(3,1); ' stop
    ToolbarEnable(2,0); ' start
    ToolbarEnable(1,0); ' quit 
    ToolbarSet(0, "", Idle%);

    return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Stop must stop applications and sampling nicely. Adjust toolbar to wait for "quit", stop Idle%(). 
' Generate quit file for the visual stim application. 

func Stop%()

    ' remove the idle process. 
    ' seems like much of this does nothing useful
    ToolbarSet(0, "");
    ToolbarEnable(1, 1);
    ToolbarEnable(3, 0);
    
    SampleStop();

    return 1;
end;









'ok, well we're not really stepping through states so I'm not 100% sure what 
'the idle function should be doing right now
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var tNow;               ' Set on entering this func. For this invocation it is the latest time sampled. 
var tLast;              ' This is tNow from the last time Idle%() was called. 
var tStateStart := -1;  ' Start time of current state


' states
const stateStartup%             :=  1;
const stateWaitForRampUp%       :=  2;
const stateWaitForPlateau%      :=  3;
const stateWaitForRampDown%     :=  4;
const stateWaitForV0%           :=  5;
const stateDone%                := 99;
var iState% := stateStartup%;              ' This holds the current state
var iDummy% := 0;

func Idle%()
    var status% := 1;
    var i%;
    var i;
    var temp%;
    var temp;
    var eventTime;
    
    'Get time of loop
    View(tunWindowData%);
	tNow := MaxTime();
    
    'Do state logic
    docase 
    case iState% = stateStartup% then
        
        LogStatus("stateStartup", "Starting up.");
        ChangeStateTo(stateWaitForRampUp%, tNow);
        
    case iState% = stateWaitForRampUp% then
        ' Check that up ramp has started, if so, simply note the time and move on
        temp% := SampleSeqVar(1);  '#1 is up ramp start time, in sequencer ticks
        if temp% > 0 then
            temp := temp%;  'get out of integer
            eventTime := temp*msPerSeqTick/1000; 'this is absolute time of the event
            SampleText("Ramp On",eventTime);
            ChangeStateTo(stateWaitForPlateau%, tNow);
        endif

    case iState% = stateWaitForPlateau% then
        ' Check that plateau has started, if so, simply note the time and move on
        temp% := SampleSeqVar(2);  '#2 is plateau start time, in sequencer ticks
        if temp% > 0 then
            temp := temp%;  'get out of integer
            eventTime := temp*msPerSeqTick/1000; 'this is absolute time of the event
            SampleText("Plateau",eventTime);
            ChangeStateTo(stateWaitForRampDown%, tNow);
        endif
        
    case iState% = stateWaitForRampDown% then
        ' Check that down ramp has started, if so, simply note the time and move on
        temp% := SampleSeqVar(3);  '#3 is down ramp start time, in sequencer ticks
        if temp% > 0 then
            temp := temp%;  'get out of integer
            eventTime := temp*msPerSeqTick/1000; 'this is absolute time of the event
            SampleText("Ramp Off",eventTime);
            ChangeStateTo(stateWaitForV0%, tNow);
        endif
        
    case iState% = stateWaitForV0% then
        ' Check that down ramp has started, if so, simply note the time and move on
        temp% := SampleSeqVar(4);  '#4 is voltage=0 time, in sequencer ticks
        if temp% > 0 then
            temp := temp%;  'get out of integer
            eventTime := temp*msPerSeqTick/1000; 'this is absolute time of the event
            SampleText("Voltage 0",eventTime);
            ChangeStateTo(stateWaitForRampUp%, tNow);
        endif
     
        
    else
        
        LogError("", "Unknown state " + str$(iState%));
        Stop%();
        status% := 0;
        
    endcase
    
    return status%;
end

proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;




'====== Subfunction vdac32% =======

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' The vdac32% function converts a value in user DAC units into an integer value
'  (the result of the function) suitable for passing into a sequencer variable
'  for use in the DAC, ADDAC, RAMP and OFFSET sequencer instructions. It mimics
'  the vdac32() expression in the text sequence compiler.
'
' out     is the output value that you want to generate, in user DAC units.
' scale   is the user DAC units corresponding to one volt on the actual DAC
'         (or two volts for a ten-volt system). This is exactly the same as
'         the DACscale field used with the SET or SDAC directives.
' offset  is the user DAC units corresponding to zero volts output. This is
'         exactly the same as the DACOffset field in SET or SDAC.
'
' If you want to use this function to calculate the slope for a ramp, use
'  vdac32%(volts/sticks%(time)) for maximum accuracy.
'
func vdac32%(out, scale, offset)
var v32;                                ' Real variable for the calculation
out := out - offset;                    ' First compensate for offset
v32 := ((out * (6553.6 / scale)) * 65536.0);   ' Floating point result
var v32%;                               ' Integer value for the result
if v32 > 2147483647.0 then              ' 2147483647 is the largest positive
    v32% := 2147483647;                 '  integer value
else
    if v32 < -2147483647.0 then         ' -2147483648 is the lowest negative value
        v32% := -2147483647;            '  but we have to stay one above that
    else
        v32% := round(v32);             ' We can be sure this will not overflow
    endif;
endif;
return v32%;
end