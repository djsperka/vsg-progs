' $Id: AcuteFFFlash.s2s,v 1.2 2010/12/07 20:32:27 devel Exp $

#include "../../Spike2Util/UsreyUtil.s2s"
#include "UsreyGratings.s2s"

var NChannels% := 1;
var TriggerChannel% := 11;
    
var ffNRepeats% := 10;          ' Number of repeats of pattern
var ffSegmentSeconds := 2.0;    ' Length of mseq segment 
var ffBlankSeconds := 2.0;      ' Length of blank segment
var ffMseqOffsetTerms% := 0;    ' Number of terms to skip in mseq. Start ffSegmentSeconds after this many terms. 
var ffFramesPerTerm% := 4;      ' Frames per mseq term
var ffContrast% := 100;         ' contrast for flash. 
var ffUseGrating% := 0;

var windowData% := -1;
var handleStimulus% := -1;
var handleRaster% := -1;

var FilePathRoot$;
var CellName$;
var ScreenDistanceMM%;

' Vars for grating dialog. 
var status%, i%;
var ffDisabled%[5];
var ffNDisabled% := 5;
var ffGratingParam$ := "";
var ffX := 0;
var ffY := 0;
var ffW := 2;
var ffH := 2;
var ffSF := .5;
var ffTF := 0;
var ffOri := 90;
var ffCV$ := "b";
var ffPattern$ := "s";
var ffAperture$ := "e";


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Script commands start here

LogInit(1);

' Initializations
ffDisabled%[0] := 5;
ffDisabled%[1] := 7;
ffDisabled%[2] := 9;
ffDisabled%[3] := 10;
ffDisabled%[4] := 11;

' TODO This will be replaced
if FetchExperimentInfo%(FilePathRoot$, ScreenDistanceMM%, CellName$) < 0 then
    Message("Experiment info incorrect. Check log window. You may need to re-run NewExp and/or NewCell");
    halt;
endif

' Experimental parameters dialog
if FFDialog%() = 0 then
    halt;
endif

' Sampling config
CreateSampleConfiguration();

' Prepare display windows, input channels, etc. 
InitializeWindows();

' Write parameters file
WriteParametersFile(windowData%);

' Get toolbar functions ready
ToolbarSet(1,"Quit",Quit%);
ToolbarSet(2,"Sample start",Start%);
Toolbar("Go",8191);




proc InitializeWindows()
    
    ' Open data file and make it visible
    windowData%:=FileNew(0,4);
    View(windowData%).WindowVisible(1);
    View(windowData%).Window(0,80,100,100);

    ' Create PSTH view and setup processing B.S.
    handleRaster% := SetPSTH("1", 1, ffSegmentSeconds + ffBlankSeconds - 0.1, 0, TriggerChannel%, 2);
    Window(1, 0, 100, 80);
    ChanHide("1.." + str$(NChannels%));
    WindowVisible(1);
    ProcessTriggered(ffSegmentSeconds + ffBlankSeconds - 0.1, 0, TriggerChannel%, 0, 1);
    
end



func FFDialog%()
    var status% := 0;

    DlgCreate("Full Field Flash Setup", 40, 40);
    DlgReal(1, "Stim time (s):", 0.1, 300);
    DlgReal(2, "Blank time(s):", 0.1, 300);
    DlgInteger(3, "Offset terms", 0, 32767);
    DlgInteger(4, "# Repeats:", 1, 10000);
    DlgInteger(5, "Frames per term", 1, 100);
    DlgInteger(6, "Contrast:", 0, 100);
    DlgCheck(7, "Use Grating", 1, 7);
    DlgButton(107, "Params", GratingParamsDialog%, 18, 7);
    status% := DlgShow(ffSegmentSeconds, ffBlankSeconds, ffMseqOffsetTerms%, ffNRepeats%, ffFramesPerTerm%, ffContrast%, ffUseGrating%);
    if status% = 0 then
        halt;
    endif

    if status% = 1 then
        if ffUseGrating% = 1 then
            ffGratingParam$ := EncodeGratingParameters$(ffX, ffY, ffW, ffH, ffContrast%, ffSF, ffTF, ffOri, ffCV$, ffPattern$, ffAperture$);
            PrintLog("Grating params: " + ffGratingParam$ + "\n");
        else
            PrintLog("Grating " + str$(i%) + " NOT USED \n");
        endif
    endif
    
    return status%;
end



func GratingParamsDialog%()
    var status%;
    status% := GratingParametersDialog%("Grating Parameters ", ffGratingParam$, ffDisabled%[], ffNDisabled%,
                                        ffX, ffY, ffW, ffH, 
                                        ffContrast%, ffSF, ffTF, 
                                        ffOri, ffCV$, ffPattern$, ffAperture$);
    return status%;
end


func Start%()
	var CommandLine$;
    var args$;
    var grating$;
    var i%;
	
	SampleStart(0); 'Start sampling
    
'..\..\bin\AcuteFFFlash -v -r 2 -l 6 -B 6 -o 1000 -t 4 -c 50 -d 1100 -b gray -m c:\work\acuterig\msequenceterms
'rem ..\..\bin\AcuteFFFlash -v -T -r 2 -l 10 -B 5 -t 50 -o 1000 -c 70 -d 1100 -b gray -g 1,1,2,2,78,1,0,90,b,s,e -m c:\work\acuterig\msequenceterms
    
    args$ := " -r " + str$(ffNRepeats%) + " -l " + str$(ffSegmentSeconds) + " -B " + str$(ffBlankSeconds) + " -o " + str$(ffMseqOffsetTerms%) + " -t " + str$(ffFramesPerTerm%) + " -c " + str$(ffContrast%);
    if ffUseGrating% = 1 then
        grating$ := " -g " + ffGratingParam$;
    else
        grating$ := "";
    endif
    
        
    CommandLine$ := bin$ + "\\AcuteFFFlash -v -d " + str$(ScreenDistanceMM%) + " -b gray -m c:\\work\\acuterig\\msequenceterms" + args$ + grating$;
'    CommandLine$ := bin$ + "\\MultiGrating -d " + str$(ScreenDistanceMM%) + " -b gray ";
'    for i% := 1 to mgMaxGratings% do
'        if mgCheck%[i%] > 0 then
'            CommandLine$ += " -g " + mgParam$[i%];
'        endif
'    next
	
	'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
	PrintLog(CommandLine$ + "\n");
	handleStimulus% := ProgRun(CommandLine$, 1);
	if handleStimulus% <0 then 
        Message("Could not start stimulus."); 
        halt;
    endif
    ToolbarEnable(1, 1);
    ToolbarEnable(2, 0);
	View(windowData%);
    return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Quit%()
    var status;
    
	' Tell stim app to shut down
	SampleStop();

    if (handleStimulus%) >= 0 then
        status := ProgKill(handleStimulus%);
        PrintLog("Kill status %f\n", status);
        while ProgStatus(handleStimulus%) > 0 do
            Yield();
        wend
    
        ' Clear screen. 
        ProgRun("cmd /c " + bin$ + "\\ClearTrigger", 1);

    endif
    
'    FileClose(-1, -1);
    return 0;
end;





''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
    var i%;

    SampleClear(); 'Set standard sampling state
    SampleAutoComment(0);
    SampleAutoCommit(30);
    FilePathSet(FilePathRoot$ + "\\DataFiles\\", 1);
    FilePathSet(FilePathRoot$ + "\\DataFiles\\", 3);
    SampleAutoName$(CellName$ + "_fff_000");
    SampleAutoFile(1);

    ' Event channel for phase triggers
    ' Note that the AcuteRig passes VSG trigger output channel 0 to event port 1... so we use 
    ' (TriggerChannel%, 1, 1, 3600) instead of (TriggerChannel%, 0, 1, 3600)
    SampleEvent(TriggerChannel%, 1, 1, 3600); 'Trigger channel, level
    SampleComment$(TriggerChannel%,"Trigger");
    SampleTitle$(TriggerChannel%,"Trigger");

    ' Wavemark channels for electrodes
    for i% := 1 to NChannels% do
        SampleWaveMark(i%, i%-1, 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
        SampleTitle$(i%, "Trode" + str$(i%));
    next
    SampleSequencer(script$ + "MultiGrating.pls");
    SampleOptimise(2,2,2,2,50);  'Set optimise mode (do this last)
    SampleMode(1); 'Continuous sampling  
    
end;
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' WriteParametersFile(dataViewHandle%);
'
' Write parameters file with current settings. They can't be changed any more, and even though the user
' can quit we'll do it anyways. The data view handle is passed so we can get the data file name. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc WriteParametersFile(dataViewHandle%)
    var i%, index%, h%;
    var parameterFile$;
    
    ' Locate the position of the . and extension in the full pathname
    index% := InStr(View(dataViewHandle%).FileName$(0), View(dataViewHandle%).FileName$(5));
    parameterFile$ := Left$(View(dataViewHandle%).FileName$(0), index%) + "txt";
    
    PrintLog("Parameter file = %s\n", parameterFile$);
    h% := FileOpen(parameterFile$, 8, 1);
    Print("Full Field Flash parameters:\n");
    Print("MSeq Segment (seconds): %f\n", ffSegmentSeconds);
    Print("Blank segment (seconds): %f\n", ffBlankSeconds);
    Print("Offset terms: %d\n", ffMseqOffsetTerms%);
    Print("# repeats: %d\n", ffNRepeats%);
    Print("Frames per term: %d\n", ffFramesPerTerm%);
    Print("Contrast: %d\n", ffContrast%);
    Print("Use Grating? ");
    if ffUseGrating%=1 then 
        Print("YES: %s\n", ffGratingParam$);
    else 
        Print("NO\n");
    endif 
    
    FileClose();
    return;
end
