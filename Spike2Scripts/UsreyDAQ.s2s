'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters START
'
'
' WARNING! This file should be used with AlertRig scripts only!!! 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/DlgUtilities.s2s"


var DistanceToScreenMM$;		' Distance to screen in MM 
var DegreesPerVoltX;			' Conversion factor from ADC to visual degrees
var DegreesPerVoltY;			' Conversion factor from ADC to visual degrees
var EyeCoilSamplingFrequency%;		' Frequency to sample eye coil at
var NumberOfElectrodes%;		' Number of electrodes (i.e. wavemark inputs) in use
var JuicePerReward%;			' Number of juice squirts per reward
var JuiceRewardMS% := 200;      ' for Ben's new juicer this is the length of time juicer is held open.
var JuicerIndex% := 0;          ' default juicer index will not allow sampling, 1 is open high, 2 is open low
var EyeXPort%;                  ' Port horizontal eye signal connected to
var EyeYPort%;                  ' Port vertical eye signal connected to
var JoystickPort%;              ' Port joystick is connected to
'var WavemarkPorts%[16];
'var NumWavemarkPorts%;
'var ContinuousPorts%[16];
'var NumContinuousPorts%;
GetDAQParameters();

func GetJoystickPort%()
    return JoystickPort%;
end

func GetEyeXPort%()
    return EyeXPort%;
end

func GetEyeYPort%()
    return EyeYPort%;
end

'func GetDistanceToScreenMM$()
'    return DistanceToScreenMM$;
'end

func GetDegreesPerVoltX()
    return DegreesPerVoltX;
end

func GetDegreesPerVoltY()
    return DegreesPerVoltY;
end

func GetNumberOfElectrodes%()
    return NumberOfElectrodes%;
end

func GetJuicePerReward%()
    return JuicePerReward%;
end

func GetJuiceRewardMS%()
    return JuiceRewardMS%;
end

' Call this to deliver ms-based (open-high juicer) reward set in Config
proc DeliverReward()
    DeliverRewardMS(JuiceRewardMS%);
    return;
end

' Deliver a reward specified in milliseconds
proc DeliverRewardMS(iMS%)
    PrintLog("Reward %d\n", iMS%);
    SampleSeqVar(1, iMS%);
    SafeSampleKey("R");
    Yield(); YieldSystem(iMS%/1000.0);
    return;
end


' Call this to deliver "J" reward (number of pulses, for open-low juicer)
proc DeliverRewardNumber()
    DeliverRewardNum%(JuicePerReward%);
    return;
end


func DeliverRewardNum%(iNum%)
	var i;
	for i:=1 to iNum% do Yield(.05); SafeSampleKey("J"); next
	return iNum%;
end


Proc SafeSampleKey(s$)
    var count% := 0;
    while SampleSeqVar(2) <> 0 and count% < 5000 do
        count% += 1;
        Yield();
    wend
    SampleKey(s$);    
    return;
end



func DAQParametersDialog%()

	var iReturn%;

	GetDAQParameters();
    GetDataParameters();

    var juicerList$[4];
    juicerList$[0] := "Select a juicer style";
    juicerList$[1] := "Open High (Ben, variable duration)";
    juicerList$[2] := "Open Low (fixed duration)";
    juicerList$[3] := "I don't know";
    
    
	DlgCreate("DAQ parameters");
	DlgInteger(1, "Number of Electrodes:", 1, 7, 0, 0, 1);
	DlgReal(2, "Degrees/Volt (X):", 0, 100);
	DlgReal(3, "Degrees/Volt (Y):", 0, 100);
	DlgInteger(4, "Eye Coil Sampling Freq (Hz):", 1, 20000);
	DlgInteger(5, "Juice per reward:", 0, 10, 0, 0, 1);
    DlgInteger(6, "Juice Reward ms:", 0, 1000);
    DlgList(7, "Juicer Open State:",juicerList$,4);
    DlgInteger(8, "Eye X Port", 0, 15);
    DlgInteger(9, "Eye Y Port", 0, 15);
    DlgInteger(10, "Joystick Port", 0, 15);
	iReturn% := DlgShow(NumberOfElectrodes%, DegreesPerVoltX, DegreesPerVoltY, 
                        EyeCoilSamplingFrequency%, JuicePerReward%, JuiceRewardMS%,
                        JuicerIndex%, EyeXPort%, EyeYPort%, JoystickPort%);

	if iReturn% = 1 then
		SaveDAQParameters();
        SaveDataparameters();
	endif
	return iReturn%;
end;


	
proc GetDAQParameters()
	var key$;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    DegreesPerVoltX := GetFloatRegistryValue(key$, "DegreesPerVoltX", 0.0);
    DegreesPerVoltY := GetFloatRegistryValue(key$, "DegreesPerVoltY", 0.0);
    EyeCoilSamplingFrequency% := GetIntRegistryValue%(key$, "EyeCoilSamplingFrequency", 1000);
    NumberOfElectrodes% := GetIntRegistryValue%(key$, "NumberOfElectrodes", 1);
    JuicePerReward% := GetIntRegistryValue%(key$, "JuicePerReward", 1);
    JuiceRewardMS% := GetIntRegistryValue%(key$, "JuiceRewardMS", JuiceRewardMS%);
    JuicerIndex% := GetIntRegistryValue%(key$, "JuicerIndex", JuicerIndex%);
    EyeXPort% := GetIntRegistryValue%(key$, "EyeXPort", 14);
    EyeYPort% := GetIntRegistryValue%(key$, "EyeYPort", 15);
    JoystickPort% := GetIntRegistryValue%(key$, "JoystickPort", 13);
    GetElectrodeParameters();
end;

proc SaveDAQParameters()
    var key$;
    var s$;
    var i%;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    SetStringRegistryValue(key$, "DegreesPerVoltX", str$(DegreesPerVoltX));
	SetStringRegistryValue(key$, "DegreesPerVoltY", str$(DegreesPerVoltY));
	SetIntRegistryValue(key$, "EyeCoilSamplingFrequency", EyeCoilSamplingFrequency%);
	SetIntRegistryValue(key$, "NumberOfElectrodes", NumberOfElectrodes%);
	SetIntRegistryValue(key$, "JuicePerReward", JuicePerReward%);
    SetIntRegistryValue(key$, "JuiceRewardMS", JuiceRewardMS%);
    SetIntRegistryValue(key$, "JuicerIndex", JuicerIndex%);
    SetIntRegistryValue(key$, "EyeXPort", EyeXPort%);
    SetIntRegistryValue(key$, "EyeYPort", EyeYPort%);
    SetIntRegistryValue(key$, "JoystickPort", JoystickPort%);
    SaveElectrodeParameters();
end;


func SetJuicerSequencerVariable%()
    'first, just ensure that we get the proper value for the Juicer Index
    var key$;
    key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    JuicerIndex% := GetIntRegistryValue%(key$, "JuicerIndex", JuicerIndex%);
    
    'Set sample sequencer variable 3 to 0 if juicer is open-high, and to 1 if juicer is open-low
    'This is equivalent to setting sample sequencer variable 3 to the value of the bit when closed
    if JuicerIndex% = 1 then 'open high
        SampleSeqVar(3,0);
    else
        if JuicerIndex% = 2 then 'open low
            SampleSeqVar(3,1);
        endif
    endif
    
    
    return JuicerIndex%;
end

    
'proc GetElectrodeParameters()
'	var key$;
'    var s$;
'	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
'    s$ := GetStringRegistryValue$(key$, "WavemarkPorts", "");
'    NumWavemarkPorts% := ReadStr(s$, WavemarkPorts%[]);
'    s$ := GetStringRegistryValue$(key$, "ContinuousPorts", "");
'    NumContinuousPorts% := ReadStr(s$, ContinuousPorts%[]);
'end;
'
'proc SaveElectrodeParameters()
'    var key$;
'    var s$;
'    var i%;
'	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
'    SetStringRegistryValue(key$, "WavemarkPorts", GetWavemarkPorts$());
'    SetStringRegistryValue(key$, "ContinuousPorts", GetContinuousPorts$());    
'end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
