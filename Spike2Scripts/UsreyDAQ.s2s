'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters START
'
'
' WARNING! This file should be used with AlertRig scripts only!!!
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/DlgUtilities.s2s"


var DistanceToScreenMM$;		' Distance to screen in MM
var DegreesPerVoltX;			' Conversion factor from ADC to visual degrees
var DegreesPerVoltY;			' Conversion factor from ADC to visual degrees
var EyeCoilSamplingFrequency%;		' Frequency to sample eye coil at
var NumberOfElectrodes%;		' Number of electrodes (i.e. wavemark inputs) in use
var JuicePerReward%;			' Number of juice squirts per reward
var JuiceRewardMS% := 200;      ' for Ben's new juicer this is the length of time juicer is held open.
var EyeXPort%;                  ' Port horizontal eye signal connected to
var EyeYPort%;                  ' Port vertical eye signal connected to
var JoystickPort%;              ' Port joystick is connected to
GetDAQParameters();

func GetJoystickPort%()
    return JoystickPort%;
end

func GetEyeXPort%()
    return EyeXPort%;
end

func GetEyeYPort%()
    return EyeYPort%;
end

' DJS MOVED TO UsreyUtil.s2s 
 func GetDistanceToScreenMM$()
    return DistanceToScreenMM$;
end

func GetDegreesPerVoltX()
    return DegreesPerVoltX;
end

func GetDegreesPerVoltY()
    return DegreesPerVoltY;
end

func GetNumberOfElectrodes%()
    return NumberOfElectrodes%;
end

func GetJuicePerReward%()
    return JuicePerReward%;
end

func GetJuiceRewardMS%()
    return JuiceRewardMS%;
end

' Deliver reward set in Config
proc DeliverReward()
    DeliverRewardMS(JuiceRewardMS%);
    return;
end

' Deliver a specified reward
proc DeliverRewardMS(iMS%)
    PrintLog("Reward %d\n", iMS%);
    SampleSeqVar(1, iMS%);
    SampleKey("R");
    Yield(); YieldSystem(iMS%/1000.0);
    return;
end

Proc SafeSampleKey(s$)
    var count% := 0;
    while SampleSeqVar(2) <> 0 and count% < 5000 do
        count% += 1;
        Yield();
    wend
    SampleKey(s$);    
    return;
end



func DAQParametersDialog%()

	var iReturn%;
	var idist%;

	GetDAQParameters();

	idist% := val(DistanceToScreenMM$);
	DlgCreate("DAQ parameters");
	DlgInteger(1, "Number of Electrodes:", 1, 7, 0, 0, 1);
	DlgInteger(2, "Screen Distance (MM):", 1, 5000);
	DlgReal(3, "Degrees/Volt (X):", 0, 100);
	DlgReal(4, "Degrees/Volt (Y):", 0, 100);
	DlgInteger(5, "Eye Coil Sampling Freq (Hz):", 1, 20000);
	DlgInteger(6, "Juice per reward:", 0, 10, 0, 0, 1);
    DlgInteger(7, "Juice Reward ms:", 0, 1000);
    DlgInteger(8, "Eye X Port", 0, 15);
    DlgInteger(9, "Eye Y Port", 0, 15);
    DlgInteger(10, "Joystick Port", 0, 15);
	iReturn% := DlgShow(NumberOfElectrodes%, idist%, DegreesPerVoltX, DegreesPerVoltY, 
                        EyeCoilSamplingFrequency%, JuicePerReward%, JuiceRewardMS%,
                        EyeXPort%, EyeYPort%, JoystickPort%);

	if iReturn% = 1 then
		DistanceToScreenMM$ := str$(idist%);
		SaveDAQParameters();
	endif
	return iReturn%;
end;


	
proc GetDAQParameters()
	var key$;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    DistanceToScreenMM$ := GetStringRegistryValue$(key$, "DistanceToScreenMM", "850");
    DegreesPerVoltX := GetFloatRegistryValue(key$, "DegreesPerVoltX", 0.0);
    DegreesPerVoltY := GetFloatRegistryValue(key$, "DegreesPerVoltY", 0.0);
    EyeCoilSamplingFrequency% := GetIntRegistryValue%(key$, "EyeCoilSamplingFrequency", 1000);
    NumberOfElectrodes% := GetIntRegistryValue%(key$, "NumberOfElectrodes", 1);
    JuicePerReward% := GetIntRegistryValue%(key$, "JuicePerReward", 1);
    JuiceRewardMS% := GetIntRegistryValue%(key$, "JuiceRewardMS", JuiceRewardMS%);
    EyeXPort% := GetIntRegistryValue%(key$, "EyeXPort", 14);
    EyeYPort% := GetIntRegistryValue%(key$, "EyeYPort", 15);
    JoystickPort% := GetIntRegistryValue%(key$, "JoystickPort", 13);
    GetElectrodeParameters();
end;

proc SaveDAQParameters()
    var key$;
    var s$;
    var i%;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    SetStringRegistryValue(key$, "DistanceToScreenMM", DistanceToScreenMM$);
    SetStringRegistryValue(key$, "DegreesPerVoltX", str$(DegreesPerVoltX));
	SetStringRegistryValue(key$, "DegreesPerVoltY", str$(DegreesPerVoltY));
	SetIntRegistryValue(key$, "EyeCoilSamplingFrequency", EyeCoilSamplingFrequency%);
	SetIntRegistryValue(key$, "NumberOfElectrodes", NumberOfElectrodes%);
	SetIntRegistryValue(key$, "JuicePerReward", JuicePerReward%);
    SetIntRegistryValue(key$, "JuiceRewardMS", JuiceRewardMS%);
    SetIntRegistryValue(key$, "EyeXPort", EyeXPort%);
    SetIntRegistryValue(key$, "EyeYPort", EyeYPort%);
    SetIntRegistryValue(key$, "JoystickPort", JoystickPort%);
    SaveElectrodeParameters();
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
