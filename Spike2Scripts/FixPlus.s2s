
' $Id: FixPlus.s2s,v 1.3 2010-08-20 01:14:47 devel Exp $
'
' FixPlus is a modified version of fixation for Corey. 
' Its same as fixation, but a stim appears during the fixation period. Uses attention.exe.

#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"
#include "UsreyDAQ.s2s"
#include "UsreyFixationPoint.s2s"



' Control vars.
var fixFixationDuration := 1.0;			' Time required to maintain fixation, seconds
var fixStimulusDuration := 1.0;         ' How long stim is displayed after fixation period
var fixAcquisitionTime := 2.0;			' Time allowed to acquire target before fail trial, seconds
var fixInterTrialTime := 1.0;			' Blank time following a trial (both successful and failed), seconds
var fixNumberOfTrials% := 10;			' Number of trials to run
var fixElectrodes%[8];
var fixComment$ := "comment";
var fixNewBlock% := 1;

var fixFixationX, fixFixationY, fixFixationD, fixFixationWindowRadius;

' Item numbers for toolbar buttons
const toolbarItemStart% := 1;
const toolbarItemStop% := 2;
const toolbarItemJuice% := 3;
const toolbarItemPause% := 4;
const toolbarItemParameters% := 5;
const toolbarItemQuit% := 6;

' Item numbers for dialog
var fixElectrodeTextItem%;



' Window handles and channel numbers
var fixChanEyeX%    := 11;
var fixChanEyeY%    := 12;
var fixChanFixpt%   := 13;
var fixChanStim%    := 14;
var fixChanVSGReady%    :=  15;

var DataWindow%;	' time view
var XYWindow%;		' window with eye pos shown
var iStimChannel%;	' channel number for stimulus in xy window
var iStimWindowChannel%;' channel number for stimulus window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var StimHandle%;	' handle for stimulus application

' Experimental control

var fixIsPaused%:=0;		' When 1, expt is paused - no idle processing done

' Display stuff
var FixWindowX[36],FixWindowY[36];	' points for displaying fixation window in xy view
var windowX[36], windowY[36];

' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];

const stateStartTrial%		    :=  0;
const stateWaitForStim%		    :=  1;
const stateWaitForAcquisition%	:=  2;
const stateHoldFixation%	    :=  3;
const stateSuccess%		        :=  4;
const stateFailure%		        :=  5;
const stateStimOff%		        :=  6;
const stateWaitForBlank%	    :=  7;
const stateCheckTrial%		    :=  8;
const stateInterval%		    :=  9;
const stateDone%		        :=  10;
const stateVSGWait%             :=  11;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%      :=  12;		' waif for vsg to send ready signal #2
const stateWaitForFixpt%        :=  13;
const stateHoldFixationMore%    :=  14;
const stateComment%             :=  15;
const statePaused%              :=  16;
const statePausedWaiting%       :=  17;
const stateAcquisitionFailure%  :=  18;
const stateWaitForFixptOff%     :=  19;

var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var iState%:=stateVSGWait%;		' present state
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tTrigger:=-1;	' temp var for newly discovered trigger times
var nTrialsStarted%:=0;
var nTrialsSuccess%:=0;
var nTrialsFail%:=0;



' Initialize log
LogInit(1);

' Fetch parameters
if FixPlusScriptDialog%() = 0 then
    halt;
endif

CreateSampleConfiguration();

' Get display windows ready
InitializeWindows();

' Prepare the toolbar buttons
InitializeToolbar();
Toolbar("Go", 0x3ff);


proc GetFixPlusScriptParameters()
	var key$;
    key$ := GetRegistryKey$(1) + "\\FixPlus";
	fixFixationDuration := GetFloatRegistryValue(key$, "FixationDuration", fixFixationDuration);
	fixStimulusDuration := GetFloatRegistryValue(key$, "StimDuration", fixStimulusDuration);
	fixAcquisitionTime := GetFloatRegistryValue(key$, "AcquisitionTime", fixAcquisitionTime);
	fixInterTrialTime := GetFloatRegistryValue(key$, "InterTrialTime", fixInterTrialTime);
    fixNumberOfTrials% := GetIntRegistryValue%(key$, "NumberOfTrials", fixNumberOfTrials%);
    fixElectrodes%[0] := GetIntRegistryValue%(key$, "ElectrodePort0", fixElectrodes%[0]);
    fixElectrodes%[1] := GetIntRegistryValue%(key$, "ElectrodePort1", fixElectrodes%[1]);
    fixElectrodes%[2] := GetIntRegistryValue%(key$, "ElectrodePort2", fixElectrodes%[2]);
    fixElectrodes%[3] := GetIntRegistryValue%(key$, "ElectrodePort3", fixElectrodes%[3]);
    fixElectrodes%[4] := GetIntRegistryValue%(key$, "ElectrodePort4", fixElectrodes%[4]);
    fixElectrodes%[5] := GetIntRegistryValue%(key$, "ElectrodePort5", fixElectrodes%[5]);
    fixElectrodes%[6] := GetIntRegistryValue%(key$, "ElectrodePort6", fixElectrodes%[6]);
    fixElectrodes%[7] := GetIntRegistryValue%(key$, "ElectrodePort7", fixElectrodes%[7]);
end;
 	
proc SaveFixPlusScriptParameters()
	var key$;
    key$ := GetRegistryKey$(1) + "\\FixPlus";
	SetFloatRegistryValue(key$, "FixationDuration", fixFixationDuration);
	SetFloatRegistryValue(key$, "StimDuration", fixStimulusDuration);
	SetFloatRegistryValue(key$, "AcquisitionTime", fixAcquisitionTime);
	SetFloatRegistryValue(key$, "InterTrialTime", fixInterTrialTime);
    SetIntRegistryValue(key$, "NumberOfTrials", fixNumberOfTrials%);
    SetIntRegistryValue(key$, "ElectrodePort0", fixElectrodes%[0]);
    SetIntRegistryValue(key$, "ElectrodePort1", fixElectrodes%[1]);
    SetIntRegistryValue(key$, "ElectrodePort2", fixElectrodes%[2]);
    SetIntRegistryValue(key$, "ElectrodePort3", fixElectrodes%[3]);
    SetIntRegistryValue(key$, "ElectrodePort4", fixElectrodes%[4]);
    SetIntRegistryValue(key$, "ElectrodePort5", fixElectrodes%[5]);
    SetIntRegistryValue(key$, "ElectrodePort6", fixElectrodes%[6]);
    SetIntRegistryValue(key$, "ElectrodePort7", fixElectrodes%[7]);
end;



func FixPlusScriptDialog%()
	var i%;
    var lastComment$;
    lastComment$ := fixComment$;
    GetFixPlusScriptParameters();
	DlgCreate("FixPlus Parameters", 25, 10);
	DlgReal(1, "Fixation duration(s):", .01, 10);
	DlgReal(2, "Stimulus duration(s):", .01, 10);
	DlgReal(3, "Acquisition time(s):", .01, 10);
	DlgReal(4, "Intertrial time(s):", .01, 10);
	DlgInteger(5, "Number of Trials:", 1, 1000);
    DlgButton(101, "Electrodes", FixPlusElectrodeDialog%, 1, 6);
    DlgCheck(6, "New block?", 1, 7);
    DlgString(7, "Comment", 18, "", 12, 8);
    fixElectrodeTextItem% := DlgText(GetElectrodeTextItem$(), 15, 6, 15);
    if fixNewBlock% = 1 then
        DlgButton(1, "Start");
    else
        DlgButton(1, "Resume");
    endif
    DlgButton(0, "Quit");
    DlgAllow(0xffff, 0, FixPlusDialogChanged%);
	i%:=DlgShow(fixFixationDuration, fixStimulusDuration, fixAcquisitionTime, fixInterTrialTime, fixNumberOfTrials%, fixNewBlock%, fixComment$);
    if i% = 1 then
        SaveFixPlusScriptParameters();
    endif
    
	return i%;
end;

func FixPlusDialogChanged%(item%)
    var val% := 1;
    docase
    case item% = 0 then
        if iState% = stateVSGWait% then
            DlgEnable(0, 6);
            DlgEnable(1, 7);
        else
            DlgEnable(fixNewBlock%, 7);
        endif
    case item% = 6 then
        DlgEnable(DlgValue(6), 7);
        if DlgValue(6) = 1 then
            DlgValue$(-1, "Start");
        else
            DlgValue$(-1, "Resume");
        endif
    endcase
    return val%;
end

func FixPlusElectrodeDialog%()
	DlgCreate("FixPlus Electrodes");
    DlgCheck(1, "Port 0");
    DlgCheck(2, "Port 1");
    DlgCheck(3, "Port 2");
    DlgCheck(4, "Port 3");
    DlgCheck(5, "Port 4");
    DlgCheck(6, "Port 5");
    DlgCheck(7, "Port 6");
    DlgCheck(8, "Port 7");
	DlgShow(fixElectrodes%[0], fixElectrodes%[1], fixElectrodes%[2], fixElectrodes%[3], fixElectrodes%[4], fixElectrodes%[5], fixElectrodes%[6], fixElectrodes%[7]); 
    DlgValue$(fixElectrodeTextItem%, GetElectrodeTextItem$());
    return 1;
end

func GetElectrodeTextItem$()
    var s$ := "";
    var n% := 0;
    var i%;
    for i% := 0 to 7 do
        if fixElectrodes%[i%] = 1 then
            if n%> 0 then
                s$ += ",";
            endif
            n% += 1;
            s$ += str$(i%);
        endif
    next
    if n% = 0 then
        s$ := "None";
    endif
    return s$;
end


' Run real time analysis here. 
func IdleProcessing%()
	var iStatus% := 1;	' this is return value. value of 1 (0) continues (stops) processing
	tNow := MaxTime();

	xEye := ChanMeasure(fixChanEyeX%,2,tNow-.001,tNow-.006)*DegreesPerVoltX;
	yEye := ChanMeasure(fixChanEyeY%,2,tNow-.001,tNow-.006)*DegreesPerVoltY;

	' Don't update display every time....
	if tNow-tLastUpdate > .005 then
		View(XYWindow%).XYAddData(1,xEye,yEye);
		tLastUpdate := tNow;
	endif

	' What state are we in? 
	docase 

	
    case iState% = stateVSGWait% then
        
        var tRise, tFall;
        if FindPulseUp%(fixChanVSGReady%, -1, tRise, tFall) = 1 then
            PrintLog("state stateVSGWait: Got ready pulse.\n");
            ChangeStateTo(stateStartTrial%, tNow);
        endif;
        
    case iState% = stateComment% then
        
        var comment$;
        comment$ := Input$("Enter experimental conditions:", "comment");
        if Len(comment$) > 0 then
            SampleText(comment$);
        endif
        ChangeStateTo(stateStartTrial%, tNow);
        
	case iState% = stateStartTrial% then

        ' initial state on startup. 
        ' DIGOUT to present stimulus
        ' Enter state 1

        nTrialsStarted% += 1;

        LogStatus("StartTrial", "Request fixpt");
        SampleKey("F");
        ChangeStateTo(stateWaitForFixpt%, tNow);
        UpdateToolbarText("");

    case iState% = stateWaitForFixpt% then

        if FindRisingEdge%(fixChanFixpt%, tStateStart, tTrigger) = 0 then
    
            ' Stimulus has been presented. Display stim location and window.
            LogStatus("WaitForFixpt", "Got fixpt trigger.");
            DrawStim(1);
            ChangeStateTo(stateWaitForAcquisition%, tTrigger);
            tLastTrigger := tTrigger;

        endif

    case iState% = stateWaitForAcquisition% then

        if tNow-tStateStart < fixAcquisitionTime then
            
            ' Acquisition happens when the eye falls within the fixation window.
            if InFixationWindow%(xEye, yEye) > 0 then
                LogStatus("WaitForAcquisition", "Got it.");
                ChangeStateTo(stateHoldFixation%, tNow);
            endif

        else

            ' Failed. Turn off stim and try again.
            LogStatus("WaitForAcquisition", "Acq failure.");
            ChangeStateTo(stateAcquisitionFailure%, tNow);

        endif
        
    case iState% = stateAcquisitionFailure% then
        
        SampleText("A");
        SampleKey("X");
        ChangeStateTo(stateWaitForFixptOff%, tNow);
        
    case iState% = stateWaitForFixptOff% then
        
        LogStatus("WaitForFixptOff", "waiting@ " + str$(tNow) + " statestart " + str$(tStateStart));
        if FindFallingEdge%(fixChanFixpt%, tStateStart, tTrigger) = 1 then
            DrawStim(0);
            ChangeStateTo(stateCheckTrial%, tNow);
        endif
        
    case iState% = stateHoldFixation% then

        ' Waiting for fixation....
        if InFixationWindow%(xEye, yEye) <= 0 then
            
            nTrialsFail% += 1;
            SampleText("H");
            SampleKey("X");
            ChangeStateTo(stateWaitForFixptOff%, tNow);

        else

            if tNow - tStateStart >= fixFixationDuration then
                
                SampleKey("S");
                ChangeStateTo(stateWaitForStim%, tNow);

            endif

        endif
    case iState% = stateWaitForStim% then
        
        ' Waiting for fixation....
        if InFixationWindow%(xEye, yEye) <= 0 then
            
            ChangeStateTo(stateFailure%, tNow);

        else
            
            if FindRisingEdge%(fixChanStim%, tStateStart, tTrigger) = 0 then
                LogStatus("stateWaitForStim", "Got stim.");
                ChangeStateTo(stateHoldFixationMore%, tNow);
            endif
        endif
        
    case iState% = stateHoldFixationMore% then
        
        ' Waiting for fixation....
        if InFixationWindow%(xEye, yEye) <= 0 then
            SampleText("-");
            ChangeStateTo(stateFailure%, tNow);
        else
            if tNow - tStateStart >= fixStimulusDuration then
                SampleText("+");
                ChangeStateTo(stateSuccess%, tNow);
            endif
        endif

    case iState% = stateSuccess% then

        nTrialsSuccess% += 1;
        Reward%();
        ChangeStateTo(stateStimOff%, tNow);

    case iState% = stateFailure% then

        nTrialsFail% += 1;
        ChangeStateTo(stateStimOff%, tNow);

    case iState% = stateStimOff% then

        DrawStim(0);
        SampleKey("X");
        ChangeStateTo(stateWaitForBlank%, tNow);

    case iState% = stateWaitForBlank% then

        ' Wait for stim to be off
        tTrigger := NextTime(fixChanStim%,tLast,vTrigger);
        if tTrigger > tLast then

            if vTrigger = 1 then
    
                ' Stimulus has been turned off by vsg. Enter state 6
                '					PrintLog("State 5 - Stim OFF trigger found. Enter state 6\n");
                ChangeStateTo(stateCheckTrial%, tNow);
                tLastTrigger := tTrigger;

            endif

        endif

    case iState% = stateCheckTrial% then

        ' Check trial count
        if nTrialsSuccess% = fixNumberOfTrials% then
            fixIsPaused% := 1;
            ChangeStateTo(statePaused%, tNow);
        else
            ChangeStateTo(stateInterval%, tNow);
        endif


    case iState% = stateInterval% then

        ' Inter-trial wait time
        if tNow - tStateStart > fixInterTrialTime then
            if fixIsPaused% = 1 then
                ChangeStateTo(statePaused%, tNow);
            else
                ChangeStateTo(stateStartTrial%, tNow);
            endif
        endif
        
    case iState% = statePaused% then
        
        var i%;
        UpdateToolbarText("Paused");
        i% := FixPlusScriptDialog%();
        if i% = 0 then
            Stop%();
            iStatus% := 0;
        else
            if fixNewBlock% = 1 then
                nTrialsStarted% := 0;
                nTrialsSuccess% := 0;
                nTrialsFail% := 0;
                SampleText(fixComment$);
            endif
            fixIsPaused% := 0;
            ChangeStateTo(stateCheckTrial%, tNow);
        endif
        
    else 

        ' Unknown state!
        Message("Unknown state=" + str$(iState%));
        halt;

	endcase;

	tLast := tNow;
	
	return iStatus%;

end;


proc UpdateToolbarText(string$)

	var s$;
	s$ := Print$("Trial#/Total %d/%d Success/Failure %d/%d", nTrialsStarted%, fixNumberOfTrials%, nTrialsSuccess%, nTrialsFail%);
    if Len(string$) > 0 then
        s$ += " : " + string$;
    endif
    
	ToolbarText(s$);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var i%;
    
	SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 3);
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 1);
    SampleAutoName$(dataCellName$ + "_fpl_000");
	SampleAutoFile(1);
    
    ' Text mark channel for trial info
    SampleTextMark(200);
    
	'Channel recording definitions
	SampleEvent(fixChanVSGReady%, 6, 2, 3600); 'Trigger channel, level
	SampleComment$(fixChanVSGReady%, "VSG Ready");
	SampleTitle$(fixChanVSGReady%, "VSG Ready");
    
	SampleEvent(fixChanFixpt%, 1, 2, 3600);
	SampleComment$(fixChanFixpt%, "Fixpt");
	SampleTitle$(fixChanFixpt%, "Fixpt");
    
	SampleEvent(fixChanStim%, 2, 2, 3600);
	SampleComment$(fixChanStim%, "Stim");
	SampleTitle$(fixChanStim%, "Stim");    
    
	SampleWaveform(fixChanEyeX%, GetEyeXPort%(), 1000);
	SampleTitle$(fixChanEyeX%, "Eye X");
	SampleWaveform(fixChanEyeY%, GetEyeYPort%(), 1000);
	SampleTitle$(fixChanEyeY%, "Eye Y");
    
    ' Electrodes, if any.
    for i% := 0 to 7 do
        if fixElectrodes%[i%] = 1 then
            SampleWaveMark(i% + 1, i%, 2000, 34, 15, 28000); 
        endif
    next

    
	SampleSequencer(script$ + "FixPlus.pls");
	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawStim
' 
' Draws stimulus in xy window (iDraw%==1) or blanks it (0). 
proc DrawStim(iDraw%)

	if iDraw% > 0 then
		var xstim, ystim;
		xstim := GetStimX();
		ystim := GetStimY();

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iStimChannel%, xstim, ystim);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], xstim);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], ystim);

		View(XYWindow%).XYAddData(iStimWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iStimChannel%);
		View(XYWindow%).XYDelete(iStimWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(-0.235849,52.746,97.2484,99.8856);
	View(DataWindow%).WindowVisible(1);

	'Open an XY view to display eye position
	XYWindow% := FileNew(12);
	XRange(-30,30);
	YRange(-2,-30,30);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(-0.550314,0.114416,41.5094,52.746);
	XYColour(1,16);
	XYSize(1,-1);

	'Calcuate the fixation window
	var index%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for index% := 0 to 35 do
		FixWindowX[index%] := WindowRadius * Cos(index% * twopi/36.0);
		FixWindowY[index%] := WindowRadius * Sin(index% * twopi/36.0);
	next;

	'Create a new channel in the XY view to display the fixation window
	iStimWindowChannel% := XYSetChan(0);
	XYColour(2,13);
	XYDrawMode(2,2,1);
	XYJoin(2,1);

	'Draw the fixation window ON SECOND THOUGHT, DON'T
	'XYAddData(2, FixWindowX[], FixWindowY[]);	

	'Create a new channel in the XY view to display the fixation point
	iStimChannel% := XYSetChan(0);

	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(4,13);
	XYDrawMode(4,3,1);
	XYJoin(4,2);
	XYAddData(4,-9,-7);
	XYAddData(4,9,-7);
	XYAddData(4,9,7);
	XYAddData(4,-9,7);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(toolbarItemStart%, "Sample start",Start%);
	ToolbarSet(toolbarItemStop%, "Sample stop", Stop%);
	ToolbarSet(toolbarItemJuice%, "Juice", Reward%);
	ToolbarSet(toolbarItemPause%, "Pause stimuli", PauseStimuli%);
	ToolbarSet(toolbarItemParameters%, "Exp Parameters", FixPlusScriptDialog%);
	ToolbarSet(toolbarItemQuit%, "Quit", Quit%);
	ToolbarEnable(toolbarItemStop%, 0);
	ToolbarEnable(toolbarItemPause%, 0);

end;


' Get grating p[arameters from registry AlertRig\\(config)\\Gratings\\type$
func GetGratingParameters$(type$)
	var key$;
	var stmp$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\Gratings";
	Profile(key$, type$, "", stmp$);
	return stmp$;
end;


' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
    Stop%();
	FileClose(-1, -1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
    var stimSpec$;
    var fixSpec$;
    var cmdLine$;
    var extra$;
    
    ' Get stimulus, distractor and fixpt specs
    stimSpec$ := GetGratingParameters$("Stimulus");
    fixSpec$ := GetFixationArg$();
    GetFixationPointParameterValues(fixFixationX, fixFixationY, fixFixationD, fixFixationWindowRadius);
    
    ' extra parameters
    extra$ := " -d " + GetDistanceToScreenMM$() + " -b gray -N -S -Q -t 100,100,100 -g " + GetGratingParameters$("Distractor1");
    
    ' Generate command line
    cmdLine$ := "cmd /k " + GetBinDir$(1) + "Attention " + fixSpec$ + extra$ + " -s " + stimSpec$;
 	
	SampleStart(0); 'Start sampling
    SampleText(fixComment$);
    
 	'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
	PrintLog(cmdLine$+"\n");
	StimHandle% := ProgRun(cmdLine$,1);
	if StimHandle% <0 then Message("Could not start stimulus."); halt; endif
'	Yield(5);	'Wait a few seconds to make sure the VSG has time to initialize.

	ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(toolbarItemStop%, 1);
	ToolbarEnable(toolbarItemStart%, 0);
	ToolbarEnable(toolbarItemParameters%, 0);
	ToolbarEnable(toolbarItemPause%, 1);
	View(DataWindow%);
	Yield(.1);
	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
    var s$;
    
	' Disable idle process func
	ToolbarSet(0, "");

	' Tell stim app to shut down
	SampleKey("q");
	Yield(.1);
	SampleStop();
	ProgKill(StimHandle%);
	while ProgStatus(StimHandle%) > 0 do
		Yield();
	wend

	s$ := Print$("Trial#/Total %d/%d Success/Failure %d/%d", nTrialsStarted%, fixNumberOfTrials%, nTrialsSuccess%, nTrialsFail%);
	PrintLog(s$);
    
    
end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func PauseStimuli%();
    fixIsPaused% := 1;
    return 1;
end



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetStimX()
    return fixFixationX;
end;

func GetStimY()
    return fixFixationY;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InFixationWindow%(EyePosX,EyePosY)
	var i% := 0;
	var xstim, ystim;
	xstim := GetStimX();
	ystim := GetStimY();
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-xstim, 2) + Pow(EyePosY-ystim, 2)) <= Pow(fixFixationWindowRadius, 2) then 
		i% := 1;
	endif
	return i%;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
	var i;
	for i:=1 to JuicePerReward% do Yield(.05); SampleKey("J"); next
	return 1;
end;


proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;

proc DeliverReward(iNumRewards%)
    SampleSeqVar(1, iNumRewards%);
    SampleKey("R");
    return;
end



