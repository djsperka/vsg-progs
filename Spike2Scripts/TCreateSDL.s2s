#include "../../Spike2Util/UsreyUtil.s2s"


var ParameterFileHandle,SDLFileHandle;
var ProgressionArray[500],MaxIndex%;
var Distance,ViewHandle,FilePathRoot$,ExperimentHandle,LastFile$,NumberRead;
var Color$;

'First, we open CurrentExperiment.par to find out what experiment is currently running.
'If we cannot open the file, or the file is empty, we print an error message and quit.
'ViewHandle := FileOpen("D:\\AcuteRig\\Experiments\\CurrentExperiment.par",8,0);
'if ViewHandle < 0 then Message("Could not determine current experiment."); Halt; endif;
'NumberRead := Read(FilePathRoot$);
'if NumberRead < 1 then Message("Could not determine current experiment."); Halt; endif;
'FileClose();
FilePathRoot$ := GetCurrentDataPath$(0);
PrintLog("(sdl)FilePathRoot = " + FilePathRoot$ + "\n");

'Read the current experiment's parameters, so we know the distance to the stimulus.
'ExperimentHandle := FileOpen(FilePathRoot$+"\\Experiment.par",8,0);
'NumberRead := Read(Distance);
'if NumberRead < 1 then Message("Could not find distance to screen"); Halt; endif;
'FileClose();
Distance := val(GetAcuteDistanceToScreenMM$());
PrintLog("Screen distance = " + str$(Distance) + "\n");

'Find the last parameter file created, so we know for which conditions to generate SDL.
ExperimentHandle := FileOpen(FilePathRoot$+"\\LastFile",8,0);
NumberRead := Read(LastFile$);
if NumberRead < 1 then Message("Could find most recent parameter file"); Halt; endif;
FileClose();

ParameterFileHandle := FileOpen(FilePathRoot$+"\\"+LastFile$+".par",8,0);
if ParameterFileHandle <0 then Message("Parameter file not found"); Halt; endif;

FrontView(ParameterFileHandle);
var ExperimentType$, ReturnValue, Parameter$, Value1$;
var SignalDuration,BlankDuration;
var GratingPattern$,GratingProgression$,NumberOfSteps%,NumberOfSamples%;
var GratingContrast,SpatialFrequency,TemporalFrequency, Orientation;
var ApertureType$,ApertureWidth,ApertureHeight,ApertureCenterX,ApertureCenterY;
var DriftVelocity, SDLApertureType$;
var Background$;
var ReversalFrequency;
var Placement$;
Read(ExperimentType$); ' ExperimentType is always the first line of a parameter file.

  'Read parameter names and values until you reach the end of the file
while ReturnValue >=0 do	
	ReturnValue := Read(Parameter$,Value1$);
	'Because the value is may be of a different type depending on the parameter preceeding it, 
	'we use this case statement to assign the parameter values correctly. For tuning files,
	'some values depend on parameter name AND EXPERIMENT TYPE.
	docase
		case Parameter$ = "Color" then
			Color$ := Value1$			
		case Parameter$ = "Grating Pattern" then
			GratingPattern$ := Value1$;
			if GratingPattern$ = "Square Wave" then
				GratingPattern$ := "Square"
			endif
		case Parameter$ = "Grating Progression" then
			GratingProgression$ := Value1$;
		case Parameter$ = "Number Of Steps" then
			NumberOfSteps% := val(Value1$);
		case Parameter$ = "Number Of Repeats" then
			NumberOfSamples% := val(Value1$);
		case Parameter$ = "Grating Contrast" then
			if ExperimentType$ = "[Contrast tuning]" then
				ProgressionArray[val(Value1$)] := val(Mid$(Value1$,3));
				MaxIndex% := val(Value1$);
			else
			GratingContrast := val(Value1$);
			endif
		case Parameter$ = "Spatial Frequency" then
			if ExperimentType$ = "[Spatial frequency tuning]" then
				ProgressionArray[val(Value1$)] := val(Mid$(Value1$,3));
				MaxIndex% := val(Value1$);
			else
				SpatialFrequency := val(Value1$);
			endif
		case Parameter$ = "Temporal Frequency" then
			if ExperimentType$ = "[Temporal frequency tuning]" then
				ProgressionArray[val(Value1$)] := val(Mid$(Value1$,3));
				MaxIndex% := val(Value1$);
			else
				TemporalFrequency := val(Value1$);
			endif
		case Parameter$ = "Reversal Frequency" then
				ReversalFrequency := val(Value1$);
		case Parameter$ = "Phase" then
			if ExperimentType$ = "[XY Test]" then
				ProgressionArray[val(Value1$)] := val(Mid$(Value1$,3));
				MaxIndex% := val(Value1$);
			endif
		case Parameter$ = "Orientation" then
			if ExperimentType$ = "[Orientation tuning]" then
				ProgressionArray[val(Value1$)] := val(Mid$(Value1$,3));
				MaxIndex% := val(Value1$);
			else
				Orientation := val(Value1$);
			endif
		case Parameter$ = "Aperture" then
			if ExperimentType$ = "[Aperture area tuning]" then
				ProgressionArray[val(Value1$)] := val(Mid$(Value1$,3));
				MaxIndex% := val(Value1$);
			endif
		case Parameter$ = "Aperture Type" then
			ApertureType$ := Value1$;
		case Parameter$ = "Aperture Width" then
			ApertureWidth := val(Value1$);
		case Parameter$ = "Aperture Height" then
			ApertureHeight := val(Value1$);
		case Parameter$ = "Aperture Center X" then
			ApertureCenterX := val(Value1$);
		case Parameter$ = "Aperture Center Y" then
			ApertureCenterY := val(Value1$);
		case Parameter$ = "Signal Duration" then
			SignalDuration := val(Value1$);
		case Parameter$ = "Blank Duration" then
			BlankDuration := val(Value1$);
		case Parameter$ = "Background Color" then
			Background$ := Value1$;
		case Parameter$ = "Grating Placement" then 
			Placement$:=Value1$;
endcase;
wend;

FrontView(ParameterFileHandle);
FileClose(0);

'Depending on what type of experiment the parameter file represents,
'create the appropriate SDL.
docase 
	case ExperimentType$="[Orientation tuning]" then
		CreateOrientationTuningSDL();
	case ExperimentType$="[Contrast tuning]" then
		CreateContrastTuningSDL();
	case ExperimentType$="[Spatial frequency tuning]" then
		CreateSpatialFrequencyTuningSDL();
	case ExperimentType$="[Temporal frequency tuning]" then
		CreateTemporalFrequencyTuningSDL();
	case ExperimentType$="[Aperture area tuning]" then
		CreateApertureTuningSDL();
	case ExperimentType$="[XY Test]" then
		CreateXYTestSDL();
	else
		Message("Experiment type %s not recognized.",ExperimentType$);
		Halt;
endcase;

var stmp$;
PrintLog("FilePathRoot %s LastFile %s\n", FilePathRoot$, LastFile$);
stmp$ := "SDL file created successfully.\nData file base name and location is\n" + FilePathRoot$ + "\\" + LastFile$;
Message(stmp$);
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateContrastTuningSDL()

var Index%;

' Now, we generate the appropriate SDL commands to generate the 
' stimuli the user has described.

SDLFileHandle := FileOpen(FilePathRoot$+"\\"+LastFile$+".stm",8,1);
if SDLFileHandle <0 then Message("Unable to create SDL file"); 
else
FrontView(SDLFileHandle);

docase
	case ApertureType$ = "Ellipse" then
		SDLApertureType$ := "circle";
	case ApertureType$ = "Rectangle" then
		SDLApertureType$ := "square";
endcase

Print("Program(Grating);\n");
docase
	case Color$ = "Black and white" then
	case Color$ = "S cone isolating" then
		Print("Colour(1,.6184, .3562, 1,.3816,.6438,0);\n");
	case Color$ = "M cone isolating" then
		Print("Colour(1,0,0.7270, 0.4863,1,.2730,.5137);\n");
	case Color$ = "L cone isolating" then 
		Print("Colour(1,1, .4207, .4990,0, .5792, .5010);\n");
endcase
Print("ViewingDistance("+Str$(Distance)+");\n");
Print("CLEARDIGBIT(0);\n");
Print("OutputTrigger(now,0)\n");
Print("SpatialWaveform(1,%s);\n",GratingPattern$);
Print("Rotation(1,%.2f);\n",Orientation);
Print("SpatialFrequency(1,%.3f);\n",SpatialFrequency);

DriftVelocity := TemporalFrequency;

Print("DriftVelocity(1,%.3f);\n",DriftVelocity);
Print("Shape(1,%s);\n",SDLApertureType$);
Print("Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("Position(1,%.3f,%.3f);\n",ApertureCenterX,ApertureCenterY);
Print("SetTrigger(1,ShowFrame,toggle);\n");
Print("Background(%s);\n",Background$);

Print("dim Contrasts(%.2f);\n",NumberOfSamples%*(NumberOfSteps%+1));
for Index% :=0 to MaxIndex% do
	Print("Contrasts(%d)=%.2f; ",Index%,ProgressionArray[Index%]);
	if (Index%+1) mod 3 = 0 then Print("\n"); endif;
next;
	Print("\n");

Print("dim Counter=0;\n");
Print("Repeat(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
Print("	Contrast(1,Contrasts(Counter));\n");
Print("	Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("	DriftVelocity(1,%.2d);\n",DriftVelocity);
Print("	show(1);\n") ;
Print("	wait(%.3f);\n",SignalDuration);
if BlankDuration > 0 then
	Print("	Size(1,0,0);\n");
	Print("	show(1);\n");
	Print("	wait(%.3f);\n",BlankDuration);
endif
Print("	Counter=Counter+1;\n");
Print("end;\n");

FileSave();

endif
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateOrientationTuningSDL()

var Index%;

' Now, we generate the appropriate SDL commands to generate the 
' stimuli the user has described.

SDLFileHandle := FileOpen(FilePathRoot$+"\\"+LastFile$+".stm",8,1);
if SDLFileHandle <0 then Message("Unable to create SDL file"); else
FrontView(SDLFileHandle);

docase
	case ApertureType$ = "Ellipse" then
		SDLApertureType$ := "circle";
	case ApertureType$ = "Rectangle" then
		SDLApertureType$ := "square";
endcase

Print("Program(Grating);\n");
docase
	case Color$ = "Black and white" then
	case Color$ = "S cone isolating" then
		Print("Colour(1,.6184, .3562, 1,.3816,.6438,0);\n");
	case Color$ = "M cone isolating" then
		Print("Colour(1,0,0.7270, 0.4863,1,.2730,.5137);\n");
	case Color$ = "L cone isolating" then 
		Print("Colour(1,1, .4207, .4990,0, .5792, .5010);\n");
endcase
Print("ViewingDistance("+Str$(Distance)+");\n");
Print("CLEARDIGBIT(0);\n");
Print("OutputTrigger(now,0)\n");
Print("SpatialWaveform(1,%s);\n",GratingPattern$);
Print("Contrast(1,%.2d);\n",GratingContrast);
Print("SpatialFrequency(1,%.3f);\n",SpatialFrequency);

DriftVelocity := TemporalFrequency;

Print("DriftVelocity(1,%.3f);\n",DriftVelocity);
Print("Shape(1,%s);\n",SDLApertureType$);
Print("Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("Position(1,%.3f,%.3f);\n",ApertureCenterX,ApertureCenterY);
Print("SetTrigger(1,ShowFrame,toggle);\n");
Print("Background(%s);\n",Background$);

Print("dim Orientation(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
for Index% :=0 to MaxIndex% do
	Print("Orientation(%d)=%.2f; ",Index%,ProgressionArray[Index%]);
	if (Index%+1) mod 4 = 0 then Print("\n"); endif;
next;
	Print("\n");

Print("dim Counter=0;\n");
Print("Repeat(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
Print("	Rotation(1,Orientation(Counter));\n");
Print("	Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("	DriftVelocity(1,%.3f);\n",DriftVelocity);
Print("	show(1);\n") ;
Print("	wait(%.3f);\n",SignalDuration);
if BlankDuration > 0 then
	Print("	Size(1,0,0);\n");
	Print("	show(1);\n");
	Print("	wait(%.3f);\n",BlankDuration);
endif
Print("	Counter=Counter+1;\n");
Print("end;\n");

FileSave();

endif
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSpatialFrequencyTuningSDL()

var Index%;

' Now, we generate the appropriate SDL commands to generate the 
' stimuli the user has described.

SDLFileHandle := FileOpen(FilePathRoot$+"\\"+LastFile$+".stm",8,1);
if SDLFileHandle <0 then Message("Unable to create SDL file"); else
FrontView(SDLFileHandle);

docase
	case ApertureType$ = "Ellipse" then
		SDLApertureType$ := "circle";
	case ApertureType$ = "Rectangle" then
		SDLApertureType$ := "square";
endcase

Print("Program(Grating);\n");
docase
	case Color$ = "Black and white" then
	case Color$ = "S cone isolating" then
		Print("Colour(1,.6184, .3562, 1,.3816,.6438,0);\n");
	case Color$ = "M cone isolating" then
		Print("Colour(1,0,0.7270, 0.4863,1,.2730,.5137);\n");
	case Color$ = "L cone isolating" then 
		Print("Colour(1,1, .4207, .4990,0, .5792, .5010);\n");
endcase
Print("ViewingDistance("+Str$(Distance)+");\n");
Print("CLEARDIGBIT(0);\n");
Print("OutputTrigger(now,0)\n");
Print("SpatialWaveform(1,%s);\n",GratingPattern$);
Print("Contrast(1,%.2d);\n",GratingContrast);
Print("Rotation(1,%.2d);\n",Orientation);
Print("Shape(1,%s);\n",SDLApertureType$);
Print("Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("Position(1,%.3f,%.3f);\n",ApertureCenterX,ApertureCenterY);
Print("SetTrigger(1,ShowFrame,toggle);\n");
Print("Background(%s);\n",Background$);
Print("DriftVelocity(1,%.3f);\n",TemporalFrequency);
Print("dim SpatialFrequencies(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
for Index% :=0 to MaxIndex% do
	Print("SpatialFrequencies(%d) = %.3f; ",Index%,ProgressionArray[Index%]);
	if (Index%+1) mod 4 = 0 then Print("\n"); endif;
next;
	Print("\n");

Print("dim Counter=0;\n");
Print("dim DVelocity=0;\n");
Print("Repeat(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));

DriftVelocity := TemporalFrequency;

Print("	SpatialFrequency(1,SpatialFrequencies[Counter]); \n");
Print("	Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("	show(1);\n") ;
Print("	wait(%.3f);\n",SignalDuration);
if BlankDuration > 0 then
	Print("	Size(1,0,0);\n");
	Print("	show(1);\n");
	Print("	wait(%.3f);\n",BlankDuration);
endif
Print("	Counter=Counter+1;\n");
Print("end;\n");

FileSave();
endif
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateTemporalFrequencyTuningSDL()

var Index%;

' Now, we generate the appropriate SDL commands to generate the 
' stimuli the user has described.

SDLFileHandle := FileOpen(FilePathRoot$+"\\"+LastFile$+".stm",8,1);
if SDLFileHandle <0 then Message("Unable to create SDL file"); else
FrontView(SDLFileHandle);

docase
	case ApertureType$ = "Ellipse" then
		SDLApertureType$ := "circle";
	case ApertureType$ = "Rectangle" then
		SDLApertureType$ := "square";
endcase

Print("Program(Grating);\n");
docase
	case Color$ = "Black and white" then
	case Color$ = "S cone isolating" then
		Print("Colour(1,.6184, .3562, 1,.3816,.6438,0);\n");
	case Color$ = "M cone isolating" then
		Print("Colour(1,0,0.7270, 0.4863,1,.2730,.5137);\n");
	case Color$ = "L cone isolating" then 
		Print("Colour(1,1, .4207, .4990,0, .5792, .5010);\n");
endcase
Print("ViewingDistance("+Str$(Distance)+");\n");
Print("CLEARDIGBIT(0);\n");
Print("OutputTrigger(now,0)\n");
Print("SpatialWaveform(1,%s);\n",GratingPattern$);
Print("SpatialFrequency(1,%.3f);\n",SpatialFrequency);
Print("Contrast(1,%.2f);\n",GratingContrast);
Print("Rotation(1,%.2f);\n",Orientation);
Print("Shape(1,%s);\n",SDLApertureType$);
Print("Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("Position(1,%.3f,%.3f);\n",ApertureCenterX,ApertureCenterY);
Print("SetTrigger(1,ShowFrame,toggle);\n");
Print("Background(%s);\n",Background$);

Print("dim TemporalFrequencies(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
for Index% :=0 to MaxIndex% do
	Print("TemporalFrequencies(%d) = %.3f; ",Index%,ProgressionArray[Index%]);
	if (Index%+1) mod 4 = 0 then Print("\n"); endif;
next;
	Print("\n");

Print("dim Counter=0;\n");
Print("dim DVelocity=0;\n");
Print("Repeat(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));

DriftVelocity := TemporalFrequency;

Print("	DVelocity = TemporalFrequencies[Counter];\n");
Print("	DriftVelocity(1,DVelocity); \n");
Print("	Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("	show(1);\n") ;
Print("	wait(%.3f);\n",SignalDuration);
if BlankDuration > 0 then
	Print("	Size(1,0,0);\n");
	Print("	show(1);\n");
	Print("	wait(%.3f);\n",BlankDuration);
endif
Print("	Counter=Counter+1;\n");
Print("end;\n");

FileSave();
endif
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateApertureTuningSDL()

var Index%;

' Now, we generate the appropriate SDL commands to generate the 
' stimuli the user has described.

SDLFileHandle := FileOpen(FilePathRoot$+"\\"+LastFile$+".stm",8,1);
if SDLFileHandle <0 then Message("Unable to create SDL file"); else
FrontView(SDLFileHandle);

docase
	case ApertureType$ = "Ellipse" then
		SDLApertureType$ := "circle";
	case ApertureType$ = "Rectangle" then
		SDLApertureType$ := "square";
endcase

var StimulusNumber%, ShowString$,GratingNumber%;
if Placement$ = "Stimulus" then
	StimulusNumber%:=1;
	GratingNumber%:=1;
   ShowString$:="1";
endif
if Placement$ = "Background" then
	StimulusNumber%:=2;
	GratingNumber%:=1;
	ShowString$ :="1,2";
endif

Print("Program(Grating);\n");
docase
	case Color$ = "Black and white" then
	case Color$ = "S cone isolating" then
		Print("Colour(1,.6184, .3562, 1,.3816,.6438,0);\n");
	case Color$ = "M cone isolating" then
		Print("Colour(1,0,0.7270, 0.4863,1,.2730,.5137);\n");
	case Color$ = "L cone isolating" then 
		Print("Colour(1,1, .4207, .4990,0, .5792, .5010);\n");
endcase
Print("ViewingDistance("+Str$(Distance)+");\n");
Print("CLEARDIGBIT(0);\n");
Print("OutputTrigger(now,0)\n");
Print("SpatialWaveform("+Str$(GratingNumber%)+",%s);\n",GratingPattern$);
Print("SpatialFrequency("+Str$(GratingNumber%)+",%.3f);\n",SpatialFrequency);
Print("Contrast("+Str$(GratingNumber%)+",%.2f);\n",GratingContrast);
Print("Rotation("+Str$(GratingNumber%)+",%.2f);\n",Orientation);
Print("Shape("+Str$(StimulusNumber%)+",%s);\n",SDLApertureType$);
Print("Size("+Str$(StimulusNumber%)+",%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("Position("+Str$(StimulusNumber%)+",%.3f,%.3f);\n",ApertureCenterX,ApertureCenterY);
Print("SetTrigger("+Str$(StimulusNumber%)+",ShowFrame,toggle);\n");
Print("Background(%s);\n",Background$);
DriftVelocity := TemporalFrequency;
Print("DriftVelocity("+Str$(GratingNumber%)+",%.3f);\n",DriftVelocity);
if Placement$ = "Background" then
	Print("Contrast("+Str$(StimulusNumber%)+",0);\n");
	Print("Size("+Str$(GratingNumber%)+",30,30);\n");
endif

Print("dim Apertures(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
for Index% :=0 to MaxIndex% do
	Print("Apertures(%d) = %.3f; ",Index%,ProgressionArray[Index%]);
	if (Index%+1) mod 4 = 0 then Print("\n"); endif;
next;
	Print("\n");

Print("dim Counter=0;\n");
Print("dim DVelocity=0;\n");
Print("Repeat(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
Print("  Contrast(1,100);\n");
Print("	Size("+Str$(StimulusNumber%)+",Apertures(Counter),Apertures(Counter));\n");
Print("	show("+ShowString$+");\n") ;
Print("	wait(%.3f);\n",SignalDuration);
if BlankDuration > 0 then
	Print("	Size("+Str$(StimulusNumber%)+",0,0);\n");
	Print("  Contrast(1,0);\n");
	Print("	show("+ShowString$+");\n");
	Print("	wait(%.3f);\n",BlankDuration);
endif
Print("	Counter=Counter+1;\n");
Print("end;\n");

FileSave();
endif
end;
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateXYTestSDL()

var Index%;

' Now, we generate the appropriate SDL commands to generate the 
' stimuli the user has described.

SDLFileHandle := FileOpen(FilePathRoot$+"\\"+LastFile$+".stm",8,1);
if SDLFileHandle <0 then Message("Unable to create SDL file"); else
FrontView(SDLFileHandle);

docase
	case ApertureType$ = "Ellipse" then
		SDLApertureType$ := "circle";
	case ApertureType$ = "Rectangle" then
		SDLApertureType$ := "square";
endcase

Print("Program(Grating);\n");
docase
	case Color$ = "Black and white" then
	case Color$ = "S cone isolating" then
		Print("Colour(1,.6184, .3562, 1,.3816,.6438,0);\n");
	case Color$ = "M cone isolating" then
		Print("Colour(1,0,0.7270, 0.4863,1,.2730,.5137);\n");
	case Color$ = "L cone isolating" then 
		Print("Colour(1,1, .4207, .4990,0, .5792, .5010);\n");
endcase
Print("ViewingDistance("+Str$(Distance)+");\n");
Print("CLEARDIGBIT(0);\n");
Print("OutputTrigger(now,0)\n");
Print("TemporalWaveform(1,%s);\n",GratingPattern$);
Print("Contrast(1,%.2d);\n",GratingContrast);
Print("SpatialFrequency(1,%.3f);\n",SpatialFrequency);
Print("TemporalFrequency(1,%.3f);\n",ReversalFrequency);
Print("Shape(1,%s);\n",SDLApertureType$);
Print("Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("Position(1,%.3f,%.3f);\n",ApertureCenterX,ApertureCenterY);
Print("SetTrigger(1,ShowFrame,toggle);\n");
Print("Background(%s);\n",Background$);

Print("dim Phase(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
for Index% :=0 to MaxIndex% do
	Print("Phase(%d)=%.2f; ",Index%,ProgressionArray[Index%]);
	if (Index%+1) mod 4 = 0 then Print("\n"); endif;
next;
	Print("\n");

Print("dim Counter=0;\n");
Print("Repeat(%d);\n",NumberOfSamples%*(NumberOfSteps%+1));
Print("	SpatialPhase(1,Phase(Counter));\n");
Print("	Size(1,%.3f,%.3f);\n",ApertureWidth,ApertureHeight);
Print("	DriftVelocity(1,%.3f);\n",DriftVelocity);
Print("	show(1);\n") ;
Print("	wait(%.3f);\n",SignalDuration);
if BlankDuration > 0 then
	Print("	Size(1,0,0);\n");
	Print("	show(1);\n");
	Print("	wait(%.3f);\n",BlankDuration);
endif
Print("	Counter=Counter+1;\n");
Print("end;\n");

FileSave();

endif
end;

