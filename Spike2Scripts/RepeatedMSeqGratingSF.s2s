' $Log: not supported by cvs2svn $ 


var NumberOfChannels%,DataWindow%,FramesPerTerm%;
var XOrigin,YOrigin;
var FilePathRoot$, ParameterFilePath$,FileNameRoot$, FileNumber%:=0,NumberRead;
var ViewHandle,ExperimentHandle,StimulusHandle%,DistanceToScreen;
var TimeLimit;

View(App(0)).Window(0,0,50,100);
ViewHandle := FileOpen("C:\\AcuteRig\\Experiments\\CurrentExperiment.par",8,0);
NumberRead := Read(FilePathRoot$);
FileClose();
if NumberRead >0 then
	ExperimentHandle := FileOpen(FilePathRoot$+"\\Experiment.par",8,0);
	Read(DistanceToScreen);
	NumberRead:=Read(FileNameRoot$);
	FileClose();
endif

var TriggerCount% :=1;
var GratingDiameter,GratingContrast,SpatialFrequency,HighSpatialFrequency,TemporalFrequency,DotSize,DotContrast,DotSurround,Orientation;
var Repeats%,SignalDuration,BlankDuration;

DlgCreate("M Sequence Parameters");
DlgInteger(1,"Number of channels: ",1,8);
DlgInteger(2,"Frames per term: ",1,100);
DlgReal(3,"Grating diameter:",.01,100);
DlgReal(4,"Grating contrast:",0,100);
DlgReal(5,"Spatial frequency:",0,100);
DlgReal(6,"High Spatial frequency:",0,100);
DlgReal(7,"Orientation:",-360,360);
DlgReal(8,"Center X coord: ",-400,400);
DlgReal(9,"Center Y coord: ", -300,300);
DlgInteger(10,"Number of repeats: ",0,1000);
DlgReal(11,"Length of series (s): ",0,1000);
DlgReal(12,"Blank duration (s): ",0,1000);
NumberOfChannels%:=1; FramesPerTerm%:=20;GratingDiameter:=5;GratingContrast:=100;SpatialFrequency:=.1;HighSpatialFrequency:=.2;Orientation:=0;
Repeats%:=150; SignalDuration:=5; BlankDuration:=2;
DlgShow(NumberOfChannels%,FramesPerTerm%,GratingDiameter,GratingContrast,SpatialFrequency,HighSpatialFrequency,Orientation,XOrigin,YOrigin,Repeats%,SignalDuration,BlankDuration);

ParameterFilePath$ := FilePathRoot$+"\\DataFiles\\";
FilePathSet(ParameterFilePath$);
var ParameterFileName$;
ParameterFileName$ := FileNameRoot$+"_rmgrat";

var ThrowAway$;
FileNumber% := FileList(ThrowAway$,-1,ParameterFileName$+"*");
FileNameRoot$ := ParameterFileName$+"_"+Str$(FileNumber%+1);
ParameterFileName$ := ParameterFileName$+"_"+Str$(FileNumber%+1);

var ParViewHandle;
ParViewHandle := FileOpen(ParameterFilePath$+ParameterFileName$+".par",8,1);
if ParViewHandle <0 then Message("Could not create parameter file "+FilePathRoot$+ParameterFileName$);
else
	Print("[M Sequence In Grating]\n");
	Print("\"Number Of Channels\" %d\n",NumberOfChannels%); 
	Print("\"Frames Per Term\" %d\n",FramesPerTerm%);
	Print("\"Grating Diameter\" %f\n",GratingDiameter);
	Print("\"Grating Contrast\" %f\n",GratingContrast);
	Print("\"Spatial Frequency\" %f\n",SpatialFrequency);
	Print("\"High Spatial Frequency\" %f\n",HighSpatialFrequency);
	Print("\"Orientation\" %f\n",TemporalFrequency);
	Print("\"X Origin\" %f\n",XOrigin);
	Print("\"Y Origin\" %f\n",YOrigin);
	Print("\"Repeats\" %d\n",Repeats%);
	Print("\"Signal Duration\" %f\n",SignalDuration);
	Print("\"Blank Duration\" %f\n",BlankDuration);
endif

var ResultWindow%;
TimeLimit := 2*Repeats%*(SignalDuration+BlankDuration)+10;
CreateSampleConfiguration();
DataWindow%:=FileNew(0,4);
WindowVisible(1);
View(DataWindow%);
'ProcessAuto(1,0,1);
Window(0,70,100,100);
ResultWindow% := View(DataWindow%).SetPhase("1.."+Str$(NumberOfChannels%),(SignalDuration+BlankDuration)*1000,0,8,NumberOfChannels%+1,2);
View(ResultWindow%);
WindowTitle$("Raster display");
ResultWindow% := SetPSTH("1.."+Str$(NumberOfChannels%),1,SignalDuration+BlankDuration,0,NumberOfChannels%+1,2);
Window(0,0,100,70);
ChanHide("1.."+Str$(NumberOfChannels%));
WindowVisible(1);
ProcessAuto(1,0,1);
ProcessTriggered(SignalDuration,0,NumberOfChannels%+1,0,1);
View(DataWindow%).WindowVisible(1);
View(SampleHandle(1)).WindowVisible(0);
ToolbarSet(1,"Quit",Quit%);
ToolbarSet(2,"Sample start",Start%);
ToolbarSet(3,"Sample stop", Stop%);
ToolbarEnable(3,0);
ToolbarEnable(4,0);
Toolbar("Go",123);



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
var index;
SampleClear(); 'Set standard sampling state
SampleAutoFile(1); 'Enable automatic file naming
SampleAutoComment(1); 'Prompt for comment after sampling
SampleAutoCommit(60); 'Seconds between each file commit

'Channel recording definitions

for index := 1 to NumberOfChannels% do
	SampleWaveMark(index,index-1,2000,34,15,28000); ' chan, port, event rate, points, pre-trigger, rate
	SampleTitle$(index,"Channel "+Str$(index));
	SampleLimitTime(TimeLimit);
next

SampleEvent(NumberOfChannels%+1,1,0,1000); SampleTitle$(NumberOfChannels%+1,"Trigger");

SampleOptimise(2,2,2,2,50);  'Set optimise mode (do this last)
SampleMode(1); 'Continuous sampling
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Quit%()
SampleStop();
View(SampleHandle(1)).WindowVisible(1);
return 0;
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()  

View(App(0)).Window(0,0,100,100);
var index,PSTH;
for index := 1 to NumberOfChannels% do
'	PSTH := SetEvtCrl(index,60,.0005, .015, index);
'	View(PSTH).ProcessAuto(5,0,1,5);
'	if NumberOfChannels% < 5 then View(PSTH).Window(50,(index-1)*(100/NumberOfChannels%),100,index*(100/NumberOfChannels%)); endif
'	View(PSTH).WindowTitle$("Channel "+str$(index)+" AutoCorr");
'	View(PSTH).WindowVisible(1); 
next
	
SampleStart(1);
var CommandLine$,ProgReturn;
CommandLine$ := "C:\\Henry\\Development\\RepeatedMSeqGratingCodeSF\\Release\\RepeatedMSeqGratingSF "+Str$(GratingDiameter)+" "+Str$(GratingContrast)+" "+Str$(SpatialFrequency)+" "+Str$(HighSpatialFrequency)+" ";
CommandLine$ := CommandLine$+Str$(Orientation)+" "+Str$(DistanceToScreen);
CommandLine$ := CommandLine$+" "+Str$(FramesPerTerm%)+" "+Str$(XOrigin)+" "+Str$(YOrigin)+" "+Str$(Repeats%)+" "+Str$(SignalDuration)+" "+Str$(BlankDuration);
StimulusHandle% := ProgRun(CommandLine$);
if StimulusHandle% < 0 then Message("Could not start stimulus"); Halt; endif

ToolbarEnable(3,1);
ToolbarEnable(2,0);
ToolbarEnable(1,0);
return 1;
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()

SampleStop();
	if ProgStatus(StimulusHandle%) = 1 then ProgKill(StimulusHandle%); endif
	ToolbarEnable(4,1);
	ToolbarEnable(1,1);
	var FileNumber,ReturnValue;
	FilePathSet(FilePathRoot$+"\\DataFiles\\");
	FileNumber := FileList(ThrowAway$,-1,ParameterFileName$+"*.smr")+1;
	if FileNumber >1 then
		ReturnValue := FileSaveAs(FilePathRoot$+"\\DataFiles\\"+ParameterFileName$+"Run"+Str$(FileNumber)+".smr",-1);
	else
	ReturnValue := FileSaveAs(FilePathRoot$+"\\DataFiles\\"+ParameterFileName$+".smr",-1);
	endif
return 1; 
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


