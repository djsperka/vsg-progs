' $Id: ETTesting.s2s,v 1.4 2011/10/25 17:25:44 devel Exp $

#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "UsreyFixationPoint.s2s"


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' et script parameters START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' Parameters saved in registry
var etFixationTime; 			' Time required to maintain fixation, seconds
var etAcquisitionTime;			' Time allowed to acquire target before fail trial, seconds
var etInterTrialTime;			' Blank time following a trial (both successful and failed), seconds
var etTrialsPerBlock%;			' Number of trials to run
var etBackgroundColor$;	    	' Background color for stim
var etEyeposAvgWindow%;         ' MS to average over for eye pos
var etFixptOffset;              ' offset of fixpt from center when using random fixpt position


' vars for realtime state handling
const stateStart% := 1;
const stateVSGWait% := 2;
const stateVSGWaitConfirm% := 3;
const stateNewCondition% := 4;
const stateAddMarker% := 5;
const stateTrialInit% := 6;
const stateFixptOn% := 7;
const stateWaitForFixpt% := 8;
const stateWaitForAcq% := 9;
const stateWaitForFixation% := 10;
const stateSuccess% := 11;
const stateAcqFail% := 12;
const stateWaitForBlank% := 13;
const stateInterTrialPause% := 14;
const stateBrokeFixation% := 15;
const stateDone% := 16;
const statePaused% := 17;
var fiState% := stateStart%;
var ftLast := -1;
var ftLastUpdate := -1;
var ftLastTrigger:= -1;
var ftStateStart := -1;
var fsConditionString$;

' running parameters, channel numbers, etc. 
var fiPauseFlag% := 0;           ' If set to 1 script pauses
var fiNewCondFlag% := 0;
var fiTrialCounter% := 0;
var fiSuccessfulTrialCounter% := 0;
var fiBlockCounter% := 0;
var fStimHandle%;               ' handle for stimulus application
var fReadyChannel% := 1;
var fTriggerChannel% := 2;
var fXChannel% := 3;
var fYChannel% := 4;
var fXYWindow%;
var fDataWindow%;
var fiStimXMultiplier%[9];
var fiStimYMultiplier%[9];
var fiStimIndex%;
var fiEyePositionChannel%;
var fiFixptWindowChannel%;
var fiFixptChannel%;
var fCenterFixWindowX[36];
var fCenterFixWindowY[36];
var fActualFixWindowX[36];
var fActualFixWindowY[36];

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' ET Script parameters -- saving, fetching and dialog.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc GetETScriptParameters()
	var stmp$;
	var key$;

	key$:= thisRigName$ + "\\" + GetCurrentConfiguration$() + "\\Scripts\\ETTesting";

	Profile(key$, "FixationTime", "1.0", stmp$);
	etFixationTime := val(stmp$);

	Profile(key$, "AcquisitionTime", "1.0", stmp$);
	etAcquisitionTime := val(stmp$);

	Profile(key$, "InterTrialTime", "1.0", stmp$);
	etInterTrialTime := val(stmp$);

	Profile(key$, "TrialsPerBlock", 1, etTrialsPerBlock%);
	Profile(key$, "BackgroundColor", "gray", etBackgroundColor$);
	Profile(key$, "EyeposAvgWindow", 500, etEyeposAvgWindow%);
	Profile(key$, "FixptOffset", "8.0", stmp$);
	etFixptOffset := val(stmp$);
    
    return;
end

proc SaveETScriptParameters()
	var stmp$;
	var key$;

	key$:= thisRigName$ + "\\" + GetCurrentConfiguration$() + "\\Scripts\\ETTesting";
	Profile(key$, "FixationTime", str$(etFixationTime));
	Profile(key$, "AcquisitionTime", str$(etAcquisitionTime));
	Profile(key$, "InterTrialTime", str$(etInterTrialTime));
	Profile(key$, "TrialsPerBlock", etTrialsPerBlock%);
	Profile(key$, "BackgroundColor", etBackgroundColor$);
	Profile(key$, "EyeposAvgWindow", str$(etEyeposAvgWindow%));
	Profile(key$, "FixptOffset", str$(etFixptOffset));
end;


func ETScriptDialog%()
	var i%;
	var bcl$[3];
	var ibcl%:=0;
	GetETScriptParameters();
	bcl$[0] := "gray";
	bcl$[1] := "black";
	bcl$[2] := "white";
	for i%:=0 to 2 do
		if etBackgroundColor$ = bcl$[i%] then
			ibcl% := i%;
		endif
	next;
	DlgCreate("EyeTracker Testing Parameters", 25, 10);
	DlgReal(1, "Acquisition time(s):", .01, 10);
	DlgReal(2, "Fixation duration(s):", .01, 10);
	DlgInteger(3, "Trials per block:", 1, 1000);
    DlgInteger(4, "Window for eyepos avg (ms):", 1, 100);
	DlgReal(5, "Intertrial time(s):", .01, 10);
	DlgList(6, "Background color:", bcl$);
    DlgButton(7, "FixationPoint", FixationPointDialog%);
	i%:=DlgShow(etAcquisitionTime, etFixationTime, etTrialsPerBlock%, etEyeposAvgWindow%, etInterTrialTime, ibcl%);
	if i% = 1 then
		etBackgroundColor$ := bcl$[ibcl%];
		SaveETScriptParameters();
	endif;
	return 1;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' ET Script parameters -- saving, fetching and dialog -- DONE. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' CreateSampleConfiguration()
'
' Set up channels for triggers, etc. 

proc CreateSampleConfiguration()
	var index;
	SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
	' Set path for new data files
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1, 1);
	SampleAutoName$(dataCellName$ + "_ett_000");
	SampleAutoFile(1);

	'Channel recording definitions
	SampleEvent(fTriggerChannel%, 2, 2, 3600); 'Trigger channel, level
	SampleComment$(fTriggerChannel%, "Trigger");
	SampleTitle$(fTriggerChannel%, "Trigger");

	' channel to look for ready signal from vsg
	SampleEvent(fReadyChannel%, 6, 2, 3600); 'Trigger channel, level
	SampleComment$(fReadyChannel%,"VSG Ready");
	SampleTitle$(fReadyChannel%,"VSG Ready");

	'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
	SampleWaveform(fXChannel%, 14, 1000);
	SampleTitle$(fXChannel%,"Eye X");
	SampleWaveform(fYChannel%, 15, 1000);
	SampleTitle$(fYChannel%, "Eye Y");
    
    ' Text mark channel
   	SampleTextMark(60);

	SampleSequencer(script$ + "Fixation.pls");
	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling
end;


proc Reward()
	var i;
	for i:=1 to JuicePerReward% do Yield(.05); SampleKey("J"); next
end;



' DrawStim
' 
' Draws fixpt and fixpt window xy window (iDraw%==1) or blanks it (0). 

proc DrawStim(iDraw%)

	if iDraw% > 0 then
		var xstim, ystim;
        GetFixationXY(fiStimIndex%, xstim, ystim);

		' Draw stimulus in xy window
		View(fXYWindow%).XYAddData(fiFixptChannel%, xstim, ystim);
	
		' draw fixation window
		ArrConst(fActualFixWindowX[], fCenterFixWindowX[]);
		ArrAdd(fActualFixWindowX[], xstim);
		ArrConst(fActualFixWindowY[], fCenterFixWindowY[]);
		ArrAdd(fActualFixWindowY[], ystim);

		View(fXYWindow%).XYAddData(fiFixptWindowChannel%, fActualFixWindowX[], fActualFixWindowY[]);		
	else 
		' erase the stim and the window from xy view
		View(fXYWindow%).XYDelete(fiFixptChannel%);
		View(fXYWindow%).XYDelete(fiFixptWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	fDataWindow% := FileNew(0, 4);
	Window(0, 50, 100, 100);
	View(fDataWindow%).WindowVisible(1);
    
    ' Log window
    View(LogHandle()).Window(50, 0, 100, 50);
    View(LogHandle()).WindowVisible(1);
    
	'Open an XY view to display eye position
	fXYWindow% := FileNew(12);
	XRange(-15,15);
	YRange(-2, -15,15);
	XYDrawMode(0, 5, 0);
	WindowVisible(1);
	Window(0, 0, 50, 50);
	XYColour(1, 16);
	XYSize(1, -1);
    fiEyePositionChannel% := 1;
    
    ' fixation point window
	fiFixptWindowChannel% := XYSetChan(0);
	XYColour(2,13);
	XYDrawMode(2,2,1);
	XYJoin(2,1);
    
    ' Fixation point 
	fiFixptChannel% := XYSetChan(0);
	XYSize(1, -1);

end;


proc InitializeStuff()
    var i%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for i% := 0 to 35 do
		fCenterFixWindowX[i%] := WindowRadius * Cos(i% * twopi/36.0);
		fCenterFixWindowY[i%] := WindowRadius * Sin(i% * twopi/36.0);
	next;
    
    fiStimXMultiplier%[0] := -1;
    fiStimXMultiplier%[1] := 0;
    fiStimXMultiplier%[2] := 1;
    fiStimXMultiplier%[3] := -1;
    fiStimXMultiplier%[4] := 0;
    fiStimXMultiplier%[5] := 1;
    fiStimXMultiplier%[6] := -1;
    fiStimXMultiplier%[7] := 0;
    fiStimXMultiplier%[8] := 1;
    fiStimYMultiplier%[0] := -1;
    fiStimYMultiplier%[1] := -1;
    fiStimYMultiplier%[2] := -1;
    fiStimYMultiplier%[3] := 0;
    fiStimYMultiplier%[4] := 0;
    fiStimYMultiplier%[5] := 0;
    fiStimYMultiplier%[6] := 1;
    fiStimYMultiplier%[7] := 1;
    fiStimYMultiplier%[8] := 1;
    return;
end

proc GetFixationXY(index%, &x, &y)
    x := etFixptOffset * fiStimXMultiplier%[index%];
    y := etFixptOffset * fiStimYMultiplier%[index%];
end


proc DoSampleKey(index%)
	var iSeqVar% := 0;
	iSeqVar% := (3 + (fiStimYMultiplier%[index%]+2)*16 + (fiStimXMultiplier%[index%]+2)*4) * 256;
	SampleSeqVar(1, iSeqVar%);
	SampleKey("S");
end;

' start%()
'
' Toolbar function called when "Start" button is hit.
'
' returns 1

func start%()
	var sCommandLine$;
    var sExtras$;
    
	SampleStart(0); 'Start sampling
    Yield(0.5);
    
    ToolbarEnable(2, 1);
    ToolbarEnable(1, 0);
    ToolbarSet(0, "", idle%);
    
    
	sExtras$ := " -b " + etBackgroundColor$ + " -d " + GetDistanceToScreenMM$() + " -C " + str$(etFixptOffset);
	sCommandLine$ := "cmd /k " + bin$ + "\\Calibration " + FixationArg$ + sExtras$;
    PrintLog("Command line: %s\n", sCommandLine$);
   	fStimHandle% := ProgRun(sCommandLine$, 1);
	if fStimHandle% <0 then 
        Message("Could not start stimulus."); 
        halt; 
    endif

    
    return 1;
end

' pause%()
'
' Toolbar function called when "Pause" button is hit.
'
' returns 1

func pause%()
    ToolbarText("Pause requested...");
    fiPauseFlag% := 1;
    ToolbarEnable(2, 0);
    ToolbarEnable(3, 1);
    ToolbarEnable(4, 1);
    return 1;
end

' resume%()
'
' Toolbar function called when "Resume" button is hit.
'
' returns 1

func resume%()
    fiPauseFlag% := 0;
    fiNewCondFlag% := 0;
    ToolbarEnable(2, 1);
    ToolbarEnable(3, 0);
    ToolbarEnable(4, 0);
    return 1;
end

' quit%()
'
' Toolbar function called when "Quit" button is hit.
'
' returns 0 - this causes a return from the Toolbar() function. 

func quit%()
    ToolbarSet(0, "");
    SampleKey("L");
    Yield(.1);
    SampleKey("Q");
    Yield(.1);
    SampleStop();
    ProgKill(fStimHandle%);
    while ProgStatus(fStimHandle%) > 0 do
        Yield();
    wend
    return 0;
end

' newcond%()
'
' Toolbar function called when "New Condition" button is hit.
'
' returns 1

func newcond%()
    ToolbarText("NewCond requested...");
    fiPauseFlag% := 0;
    fiNewCondFlag% := 1;
    ToolbarEnable(2, 1);
    ToolbarEnable(3, 0);
    ToolbarEnable(4, 0);
    return 1;
end

' ChangeState(stateTo%, tStart)
'
' Change state variable fiState% to stateTo%, and save tStart as the ftStateStart time

proc ChangeState(stateTo%, tStart)
    fiState% := stateTo%;
    ftStateStart := tStart;
    return;
end



' NewCondDialogOK%()
' NewCondDialog%()
'
' NewCondDialog%() opens a dialog allowing user to key in a text string
' to be placed as SampleText - it will mark off a new condition for the 
' eye tracker (e.g. mirror position, stage position, etc). The dialog 
' has three possible actions: 
' User hits OK - a test is done that the user has keyed in a condition. 
'                If not, a warning is issued and the dialog remains. If
'                there is a condition string, then the dialog closes and
'                returns 1; the value of the string is in fsConditionString$. 
' User hits Cancel - no new condition, user is saying she wants the same 
'                    condition as before. Returns 0. 
' User hits Quit Expt - user is saying they're done, let's quit. Returns 2. 

func NewCondDialogOK%()
    var iStatus% := 0;
    if Len(DlgValue$(1)) = 0 then
        Message("You must enter a string for the condition!");
        iStatus% := 1;
    endif
    return iStatus%;
end

func NewCondDialog%()
    
    var i%;
    DlgCreate("Enter new condition");
    DlgString(1, "Condition:", 50);
    DlgButton(0, "");
    DlgButton(1, "OK", NewCondDialogOK%);
    DlgButton(2, "Quit Expt");
    DlgAllow(0xffff, 0);
    fsConditionString$ := "";
    return DlgShow(fsConditionString$);
    
end



func InFixationWindow%(index%, x, y)
    var fixx, fixy;
    GetFixationXY(index%, fixx, fixy);
    return IsInsideCircle%(x, y, fixx, fixy, WindowRadius);
end




' idle%()
'
' Idle processing function. This function handles "realtime" processing, or as close as we 
' can actually get in this environment. 
'
' returns 1

func idle%()
	var iStatus% := 1;	' this is return value. value of 1 (0) continues (stops) processing
    var iYield% := 1;   ' states can set this to 0 if they don't want to yield - allows for multi-state processing in single pass
    var xEye, yEye;
    var tNow;
    var tTrigger, vTrigger;
    
    View(fDataWindow%);
    tNow := MaxTime();
'    xEye := ChanMeasure(fXChannel%, 2, tNow, tNow-0.005) * DegreesPerVoltX;
'    yEye := ChanMeasure(fYChannel%, 2, tNow, tNow-0.005) * DegreesPerVoltY;
    xEye := ChanMeasure(fXChannel%, 2, tNow, tNow-etEyeposAvgWindow%/1000.0) * DegreesPerVoltX;
    yEye := ChanMeasure(fYChannel%, 2, tNow, tNow-etEyeposAvgWindow%/1000.0) * DegreesPerVoltY;
    if tNow-ftLastUpdate > .005 then
        View(fXYWindow%).XYAddData(1, xEye, yEye);
        ftLastUpdate := tNow;
    endif
    
    repeat
    
        docase 
        case fiState% = stateStart% then
            
            PrintLog("stateStart:\n");
            iYield% := 0;
            ChangeState(stateVSGWait%, tNow);
            
        case fiState% = stateVSGWait% then

            ' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
            tTrigger := NextTime(fReadyChannel%, ftLast, vTrigger);
            if tTrigger > ftLastTrigger and vTrigger = 0 then
                PrintLog("stateVSGWait: Got leading edge of trigger\n");
                iYield% := 0;   ' These triggers come close together, so both may be present.
                ftLastTrigger := tTrigger;
                ChangeState(stateVSGWaitConfirm%, tNow);
            endif
            
		case fiState% = stateVSGWaitConfirm% then

            ' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
            iYield% := 1;       ' make sure we just check once per pass
            tTrigger := NextTime(fReadyChannel%, ftLastTrigger, vTrigger);
            if tTrigger > ftLastTrigger and vTrigger = 1 then
                PrintLog("stateVSGWaitConfirm: Got trailing edge of trigger\n");
                ftLastTrigger := tTrigger;
                ChangeState(stateNewCondition%, tNow);
            endif
            
        case fiState% = stateNewCondition% then
            
            var i%;
            PrintLog("stateNewCondition: Get new condition.\n");
            i% := NewCondDialog%();
            if i% = 2 then
                PrintLog("stateNewCondition: quitting.\n");
                return quit%();
            endif
            ChangeState(stateAddMarker%, tNow);
            fiBlockCounter% += 1;
            fiTrialCounter% := 0;
            iYield% := 0;
            
        case fiState% = stateAddMarker% then
            
            var sMarker$;
            sMarker$ := ":" + fsConditionString$;
            PrintLog("stateAddMarker: Add marker \"" + sMarker$ + "\".\n");
            SampleText(sMarker$);
            ChangeState(stateTrialInit%, tNow);
            iYield% := 0;
            
        case fiState% = stateTrialInit% then
            
            PrintLog("stateTrialInit: Block %d Trial %d.\n", fiBlockCounter%, fiTrialCounter%);
            ToolbarText("Condition: " + fsConditionString$ + " Block " + str$(fiBlockCounter%) + " Trial " + str$(fiTrialCounter%));
            iYield% := 0;
            ChangeState(stateFixptOn%, tNow);
            
        case fiState% = stateFixptOn% then
            
            fiStimIndex% := 4;              ' Can use fancier method to choose position; this is center position
            PrintLog("stateFixptOn: Fixpt index %d.\n", fiStimIndex%);
            DoSampleKey(fiStimIndex%);
            ChangeState(stateWaitForFixpt%, tNow);
            iYield% := 1;
            
        case fiState% = stateWaitForFixpt% then
            
            iYield% := 1;
   			tTrigger := NextTime(fTriggerChannel%, ftLast, vTrigger);
			if tTrigger > ftLastTrigger then

                PrintLog("stateWaitForFixpt: Got trigger at t=%f, vtrigger=%f (s/b 0)\n", tTrigger, vTrigger);
				if vTrigger = 0 then
                    DrawStim(1);
                    ChangeState(stateWaitForAcq%, tTrigger);
					ftLastTrigger := tTrigger;
				endif

			endif
            
        case fiState% = stateWaitForAcq% then
            
            iYield% := 1;
			if tNow-ftStateStart < etAcquisitionTime then
				
				if InFixationWindow%(fiStimIndex%, xEye, yEye) > 0 then
                    PrintLog("stateWaitForAcq: Eye in window\n");
                    ChangeState(stateWaitForFixation%, tNow);
				endif

			else
                
                iYield% := 0;
                PrintLog("stateWaitForAcq: Timed out.\n");
                ChangeState(stateAcqFail%, tNow);

			endif
            
        case fiState% = stateAcqFail% then
            
            iYield% := 1;
            PrintLog("stateAcqFail: Request fixpt off.\n");
            SampleKey("L");
            ChangeState(stateWaitForBlank%, tNow);
            
        case fiState% = stateBrokeFixation% then
            
            iYield% := 1;
            PrintLog("stateBrokeFixation: Request fixpt off.\n");
            SampleKey("L");
            ChangeState(stateWaitForBlank%, tNow);
            
        case fiState% = stateWaitForFixation% then
            
            iYield% := 1;
			if InFixationWindow%(fiStimIndex%, xEye, yEye) = 0 then

                PrintLog("stateWaitForFixation: Broke fixation.\n");
				ChangeState(stateBrokeFixation%, tNow);

			else

				if tNow - ftStateStart >= etFixationTime then

                    PrintLog("stateWaitForFixation: Fixated!\n");
                    iYield% := 0;
                    ChangeState(stateSuccess%, tNow);

				endif

			endif
            
        case fiState% = stateSuccess% then
            
            PrintLog("stateSuccess: Reward. Yay.\n");
            fiTrialCounter% += 1;
            iYield% := 1;
            SampleKey("L");
            Yield(0.05);
            SampleText("+");
            Yield(0.05);
            Reward();
            ChangeState(stateWaitForBlank%, tNow);
            
        case fiState% = stateWaitForBlank% then
            
			tTrigger := NextTime(fTriggerChannel%, ftLast, vTrigger);
			if tTrigger > ftLast then

                PrintLog("stateWaitForBlank: Got trigger at t=%f vtrigger=%f (s/b 1).\n", tTrigger, vTrigger);
				if vTrigger = 1 then
                    
                    DrawStim(0);
                    ChangeState(stateInterTrialPause%, tNow);
					ftLastTrigger := tTrigger;
	
				endif
                
            endif
            
        case fiState% = stateInterTrialPause% then
            
            iYield% := 1;
			if tNow - ftStateStart > etInterTrialTime then
                
                if fiPauseFlag% = 1 then
                    PrintLog("stateInterTrialPause: Pause detected.\n");
                    ChangeState(statePaused%, tNow);
                else
                    PrintLog("stateInterTrialPause: To TrialInit.\n");
                    ChangeState(stateTrialInit%, tNow);
                endif
                
			endif
            
        case fiState% = statePaused% then
            
            iYield% := 1;
            ToolbarText("Paused. Hit Resume or NewCond.");
            if fiPauseFlag% = 0 then
                if fiNewCondFlag% = 0 then
                    PrintLog("statePaused: Resume.\n");
                    ChangeState(stateTrialInit%, tNow);
                else
                    PrintLog("statePaused: NewCond.\n");
                    ChangeState(stateNewCondition%, tNow);
                endif
                
            endif
            
        else
            
            PrintLog("Unhandled state %d\n", fiState%);
            quit%();
            
        endcase
        
    until iYield% = 1;    
    
    ftLast := tNow;
    
    return iStatus%;
end


GetDataParameters();
GetDAQParameters();
GetFixationPointParameters();
ETScriptDialog%();

PrintLog("Fixation time %f\nAcq Time %f\nIT Time %f\nTrials/block %d\nBkgd %s\n", etFixationTime, etAcquisitionTime, etInterTrialTime, etTrialsPerBlock%, etBackgroundColor$);
PrintLog("Fixation point (%f,%f) Radius %f Window %f color %s\n", FixationX, FixationY, FixationDiameter, WindowRadius, FixationColor$);
PrintLog("Eyepos avg ms %d s %f\n", etEyeposAvgWindow%, etEyeposAvgWindow%/1000.0);

' Initialize stuff
InitializeStuff();

' Create sample config - this assigns daq channels
CreateSampleConfiguration();

' Open windows
InitializeWindows();



' Prepare toolbar....
ToolbarSet(1, "Start", start%);
ToolbarSet(2, "Pause", pause%);
ToolbarSet(3, "Resume", resume%);
ToolbarSet(4, "New Cond", newcond%);
ToolbarSet(5, "Quit", quit%);

ToolbarEnable(2, 0);
ToolbarEnable(3, 0);
ToolbarEnable(4, 0);
Toolbar("Hit Start...", 0xffff);




