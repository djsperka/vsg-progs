' Sampling frequencies. Note that these values are what we ASK for -- the actual sampling rate
' may vary slightly. 
var EyeSampleHz% := 500;
var ElectrodeSampleHz% := 20000;
var ExternalSampleHz% := 20000;
var VSyncSampleHz% := 20000;
var JuicePerReward% := 3;
var NJuices% := 0;
var DlgResponse;
var iDotChannel%;			' Channel for displaying dots....
var nDots% :=5;
var xDots[5];
var yDots[5];


' File system reference vars. Each var is a directory path, WITHOUT the trailing slash. 
var bin$, script$, config$;
script$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2);	' folder containing this script
bin$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\bin";	' Location of executables is ..\bin, relative to script dir
config$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\config";	' Location of executables is ..\bin, relative to script dir


' Initialize dot locations -- these should be in visual degrees!!!
xDots[0] := 0;	yDots[0] := 0;
xDots[1] := 0;	yDots[1] := 8;
xDots[2] := 0;	yDots[2] := -8;
xDots[3] := 10;	yDots[3] := 0;
xDots[4] := -10;	yDots[4] := 0;

DlgCreate("Simple DAQ parameters");
DlgInteger(1, "Juices per reward (0-5) : ", 0, 5);
DlgInteger(2, "Eye Sample Freq (Hz)", 1, 1000);
DlgInteger(3, "Electrode Sample Freq (Hz)", 10000, 30000);
DlgInteger(4, "External Sample (Hz)",10000,30000);
DlgInteger(5, "VSync Sample Freq (Hz)",10000,30000);
DlgResponse := DlgShow(JuicePerReward%, EyeSampleHz%, ElectrodeSampleHz%, ExternalSampleHz%, VSyncSampleHz%);
if DlgResponse= 0 then halt; endif


' Default folder for data files .
FilePathSet("c:\\data", 1, 1);

' Set current folder
FilePathSet("c:\\data");


'Determine which monkey we're currently running
'var Monkey$;
'Profile("AlertRig","CurrentMonkey","",Monkey$);
'if Monkey$="" then Message("Could not determine current monkey"); halt; endif


'Get information on current calibration constants (software gains) for the eye coil from the registry
var DegreesPerVoltX, DegreesPerVoltY,DegreesPerVoltX$, DegreesPerVoltY$;
'Profile("AlertRig\\"+Monkey$,"DegreesPerVoltX","5",DegreesPerVoltX$); '5 is the default if no registry entry exists
'Profile("AlertRig\\"+Monkey$,"DegreesPerVoltY","10",DegreesPerVoltY$); '10 is the default if no registry entry exists
DegreesPerVoltX := 10;
DegreesPerVoltY := 10;



' Create sample config....
var EChannel% := 1;		' Electrode channel
var XChannel% := 2;		' Eye X
var YChannel% := 3;		' Eye Y
var AChannel% := 4;		' Analog input for analog daq voltage
var VChannel% := 5;		' Vertical sync pulse
CreateSampleConfiguration();


'Open the data sampling window
var DataWindow%,XYWindow%;
DataWindow% := FileNew(0,4);	
Window(-0.235849,52.746,97.2484,99.8856);
View(DataWindow%).WindowVisible(1);


'Open an XY view window to display eye positions
XYWindow% := FileNew(12);	
XRange(-30,30);
YRange(-2,-30,30);
XYDrawMode(0,5,0);
WindowVisible(1);
Window(-0.550314,0.114416,41.5094,52.746);
XYColour(1,16);
XYSize(1,-1);

iDotChannel% := XYSetChan(0);
XYColour(iDotChannel%,25);
XYSize(1,-1);

' Draw dots
Dots%();

'Display the toolbar and start sampling
ToolbarText("Number of juices: "+str$(NJuices%));
ToolbarVisible(1);
ToolbarSet(1,"Sample start", Start%);
ToolbarSet(2,"Sample stop", Stop%);
ToolbarSet(3,"Reward", Reward%);
ToolbarEnable(2,0);
Toolbar("Go",10);



'Idle processing variables
var Time, LastUpdatedTime, EyePosX, EyePosY;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
ToolbarEnable(2,1);
ToolbarEnable(1,0);
SampleStart(0);	'Starts sampling
View(App(8)).WindowVisible(0);	'Hides the standard SampleBar
ToolbarSet(0,"",IdleProcessing%);	' Enable idle processing...
Yield(.1);	'Wait just a bit to collect some data before starting the IdleProcessing function
return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
SampleStop();
FileSaveAs("", -1);
View(App(8)).WindowVisible(1);
end;




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func IdleProcessing%()   		'This function will be run whenever an interrupt
										'is available.
'Get the current sample time		
View(DataWindow%);
Time := MaxTime();	

'Update the eye position every 5 ms.
if Time > LastUpdatedTime +.005 then
	EyePosX := ChanMeasure(XChannel%,2,Time,Time-.005)*DegreesPerVoltX;
	EyePosY := ChanMeasure(YChannel%,2,Time,Time-.005)*DegreesPerVoltY;

'	EyePosX := ChanValue(XChannel%,Time)*DegreesPerVoltX;
'	EyePosY := ChanValue(YChannel%,Time)*DegreesPerVoltY;
	View(XYWindow%).XYAddData(1,EyePosX,EyePosY);
	LastUpdatedTime := Time;
endif

return 1;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
var index;
SampleClear(); 'Set standard sampling state
SampleAutoFile(0); 'Enable automatic file naming
SampleAutoComment(0); 'Prompt for comment after sampling
SampleAutoCommit(15); 'Seconds between each file commit

'Channel recording definitions below

' External event input -- assumed to be event port 0
SampleEvent(AChannel%, 0, 2, ExternalSampleHz%);
SampleComment$(AChannel%, "Ext_Event");
SampleTitle$(AChannel%, "Ext_Event");

' Vertical sync pulse input -- assumed to be event port 1
SampleEvent(VChannel%, 1, 2, VSyncSampleHz%);
SampleComment$(VChannel%, "VSync");
SampleTitle$(VChannel%, "VSync");

'SampleWaveform(VChannel%, 13, VSyncSampleHz%);
'SampleComment$(VChannel%, "xxxxxxx");
'SampleTitle$(VChannel%,"xxxxxx");


' Eye x,y -- always port 14,15
SampleWaveform(XChannel%, 14, EyeSampleHz%);
SampleTitle$(XChannel%,"Eye X");
SampleWaveform(YChannel%, 15, EyeSampleHz%);
SampleTitle$(YChannel%,"Eye Y");

' Electrode recording using waveform -- not wavemark!
SampleWaveform(EChannel%, 0, ElectrodeSampleHz%);
SampleTitle$(EChannel%, "Electrode"); 

SampleSequencer(script$ + "\\SimpleDAQ.pls");
SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
SampleMode(1); 'Continuous sampling

end

func Reward%()
	var i;
	for i:=1 to JuicePerReward% do Yield(.05); SampleKey("J"); next
	NJuices% := NJuices% + JuicePerReward%;
	ToolbarText("Number of juices: "+str$(NJuices%));
	return 1;
end;

func Dots%()
	var i%;
	for i%:=0 to (nDots%-1)
	do
		View(XYWindow%).XYAddData(iDotChannel%,xDots[i%],yDots[i%]);
	next;
end;
