'These includes are only here to allow successful compile separate from the main DonutHunt script.  They can be removed once 
'the whole thing is together
#include "../../Spike2Util/ChannelUtilities.s2s"
#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "UsreyDAQ.s2s"
#include "DonutHuntDialogs.s2s"
#include "UsreyGratings.s2s"
#include "UsreyFixationPoint.s2s"

'DonutHuntDialogs - just what it sounds like
var startup%:=0;  'This just sets the main dialog OK button to disabled to start
const dhXHairButton% := 2;
const dhSelectSEQFileButton% := 3;
const dhGratingButton% := 4;
const dhFixationButton% := 5;

' Wavemarks and continuous ports are specified elsewhere
var dhNWavemarks% := 0;
var dhWavemarkPorts%[16];
var dhNContinuous% := 0;
var dhContinuousPorts%[16];

'Main dialog variables
var dhNRepeats%;
var dhMinStimDelay;
var dhRandStimDelay;
var dhDelayBeforeDContrast;
var dhDurAfterDContrast;
var dhDoCRG%;
var dhNRepeatsPerCRG%;
var dhNFramesPerTurn%;
var dhCRGFilename$;
var dhShowDonutOnMaster%;
var dhGridTF; 
var dhGridDur; 

'Grating dialog variables
var dhXOffset;
var dhYOffset;
var dhYOffsetTemp;  'this is so that we can force YOffset to zero in human experiments but keep the animal value in the registry
var dhSpatialFreq;
var dhTemporalFreq;
var dhInitialPhase%;
var dhDonutContrast;
var dhCoreContrast;
var dhMinDContrast;
var dhMaxDContrast;
var dhNContrastLevels%;
var dhContrastLogProgression%;
var dhCoreDiameter;
var dhMinDonutDiameter;
var dhMaxDonutDiameter;
var dhNDonutDiameters%;
var dhDiameterLogProgression%;
var dhDonutOrientation;
var dhMinCoreOrientation;
var dhMaxCoreOrientation;
var dhNCoreOrientations%;

'Crosshair dialog variables 
var dhXHairInnerRadiusOffset;
var dhXHairMiddleRadiusOffset;
var dhXHairOuterRadiusOffset;
var dhXHairNumGridDivisions%;
var dhXHairTicInnerOffset;
var dhXHairTicOuterOffset;

'Fixation variables
var dhIsHuman%; ' If set eye signals ignored - subject presumed to be looking always.
var dhUseJoystick%;  ' If 1 AND dhIsHuman% = 0, then joystick response is expected, ignored if dhIsHuman% is 0
                     ' If 2 or 3 AND dhIsHuman% = 0, then saccade response is expected (3 is training, only target response allowed)
var dhUseMaintainMode%;  ' If 1, maintain fixation point on screen through stimuli, if zero, force "restart" on each stimulus
var dhMaintainFixation;	' Time required to hold fixation for reward (stim OFF)
var dhAcquisitionTime;		' Time allowed to acquire fixation
var dhAcqFailTime;			' Wait time after acquisition failure
var dhHoldFailTime;			' Wait time after failure to hold fixation (not on the first time after acquisition)
var dhMaintainFailTime;	' Wait time after breaking fixation during maintain phase
var dhMissTime;  'Wait time after miss
var dhResponseWindow;
var dhWrongCPContrast%;
var alwaysLooking% := 0;

'Choice Point variables
var dhTargChoicePointContrast% := 100;  'for now these are hardcoded to 100, but they can easily be put into a
var dhNontargChoicePointContrast% := 100;  'dialog and changed if necessary
var dhChoicePointRadius := 1.5;  'hard code the radius to be 1.5 degree, not expected to be changed


proc GetDonutHuntMainParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\DonutHunt";
    
    dhNRepeats% := GetIntRegistryValue%(key$, "NRepeats", dhNRepeats%);
    dhMinStimDelay := GetFloatRegistryValue(key$, "MinStimDelay", dhMinStimDelay);
    dhRandStimDelay := GetFloatRegistryValue(key$, "RandStimDelay", dhRandStimDelay);
    dhDelayBeforeDContrast := GetFloatRegistryValue(key$, "DelayBeforeDContrast", dhDelayBeforeDContrast);
    dhDurAfterDContrast := GetFloatRegistryValue(key$, "DurAfterDContrast", dhDurAfterDContrast);
    dhDoCRG% := GetIntRegistryValue%(key$, "DoCRG", dhDoCRG%);
    dhNRepeatsPerCRG% := GetIntRegistryValue%(key$, "NRepeatsPerCRG", dhNRepeatsPerCRG%);
    dhNFramesPerTurn% := GetIntRegistryValue%(key$, "NFramesPerTurn", dhNFramesPerTurn%);
    dhCRGFilename$ := GetStringRegistryValue$(key$, "CRGFilename", dhCRGFilename$);
    dhShowDonutOnMaster% := GetIntRegistryValue%(key$, "ShowDonutOnMaster", dhShowDonutOnMaster%);
    dhGridTF := GetIntRegistryValue%(key$, "GridTF", dhGridTF);
    dhGridDur := GetFloatRegistryValue(key$, "GridDur", dhGridDur);
    dhUseJoystick% := GetIntRegistryValue%(key$, "UseJoystick", dhUseJoystick%);
    dhResponseWindow := GetFloatRegistryValue(key$, "ResponseWindow", dhResponseWindow);
    
end;

proc SaveDonutHuntMainParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\DonutHunt";
    
	SetIntRegistryValue(key$, "NRepeats", dhNRepeats%);
    SetFloatRegistryValue(key$, "MinStimDelay", dhMinStimDelay);
    SetFloatRegistryValue(key$, "RandStimDelay", dhRandStimDelay);
    SetFloatRegistryValue(key$, "DelayBeforeDContrast", dhDelayBeforeDContrast);
    SetFloatRegistryValue(key$, "DurAfterDContrast", dhDurAfterDContrast);
    SetIntRegistryValue(key$, "DoCRG", dhDoCRG%);
    SetIntRegistryValue(key$, "NRepeatsPerCRG", dhNRepeatsPerCRG%);
    SetIntRegistryValue(key$, "NFramesPerTurn", dhNFramesPerTurn%);
    SetStringRegistryValue(key$, "CRGFilename", dhCRGFilename$);
    SetIntRegistryValue(key$, "ShowDonutOnMaster", dhShowDonutOnMaster%);
    SetIntRegistryValue(key$, "GridTF", dhGridTF);
    SetFloatRegistryValue(key$, "GridDur", dhGridDur);
    SetIntRegistryValue(key$, "UseJoystick", dhUseJoystick%);
    SetFloatRegistryValue(key$, "ResponseWindow", dhResponseWindow);

end;


proc GetDonutHuntGratingParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\DonutHunt";  'same location as main
    
    dhXOffset := GetFloatRegistryValue(key$, "XOffset", dhXOffset);
    dhYOffset := GetFloatRegistryValue(key$, "YOffset", dhYOffset);
    dhSpatialFreq := GetFloatRegistryValue(key$, "SpatialFreq", dhSpatialFreq);
    dhTemporalFreq := GetFloatRegistryValue(key$, "TemporalFreq", dhTemporalFreq);
    dhInitialPhase% := GetIntRegistryValue%(key$, "InitialPhase", dhInitialPhase%);
    dhDonutContrast := GetFloatRegistryValue(key$, "DonutContrast", dhDonutContrast);
    dhCoreContrast := GetFloatRegistryValue(key$, "CoreContrast", dhCoreContrast);
    dhMinDContrast := GetFloatRegistryValue(key$, "MinDContrast", dhMinDContrast);
    dhMaxDContrast := GetFloatRegistryValue(key$, "MaxDContrast", dhMaxDContrast);
    dhNContrastLevels% := GetIntRegistryValue%(key$, "NContrastLevels", dhNContrastLevels%);
    dhContrastLogProgression% := GetIntRegistryValue%(key$, "ContrastLogProgression", dhContrastLogProgression%);
    dhCoreDiameter := GetFloatRegistryValue(key$, "CoreDiameter", dhCoreDiameter);
    dhMinDonutDiameter := GetFloatRegistryValue(key$, "MinDonutDiameter", dhMinDonutDiameter);
    dhMaxDonutDiameter := GetFloatRegistryValue(key$, "MaxDonutDiameter", dhMaxDonutDiameter);
    dhNDonutDiameters% := GetIntRegistryValue%(key$, "NDonutDiameters", dhNDonutDiameters%);
    dhDiameterLogProgression% := GetIntRegistryValue%(key$, "DiameterLogProgression", dhDiameterLogProgression%);
    dhDonutOrientation := GetFloatRegistryValue(key$, "DonutOrientation", dhDonutOrientation);
    dhMinCoreOrientation := GetFloatRegistryValue(key$, "MinCoreOrientation", dhMinCoreOrientation);
    dhMaxCoreOrientation := GetFloatRegistryValue(key$, "MaxCoreOrientation", dhMaxCoreOrientation);
    dhNCoreOrientations% := GetIntRegistryValue%(key$, "NCoreOrientations", dhNCoreOrientations%);
    
end



proc SaveDonutHuntGratingParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\DonutHunt";  'same location as main
    
    SetFloatRegistryValue(key$, "XOffset", dhXOffset);
    SetFloatRegistryValue(key$, "YOffset", dhYOffset);
    SetFloatRegistryValue(key$, "SpatialFreq", dhSpatialFreq);
    SetFloatRegistryValue(key$, "TemporalFreq", dhTemporalFreq);
    SetIntRegistryValue(key$, "InitialPhase", dhInitialPhase%);
    SetFloatRegistryValue(key$, "DonutContrast", dhDonutContrast);
    SetFloatRegistryValue(key$, "CoreContrast", dhCoreContrast);
    SetFloatRegistryValue(key$, "MinDContrast", dhMinDContrast);
    SetFloatRegistryValue(key$, "MaxDContrast", dhMaxDContrast);
    SetIntRegistryValue(key$, "NContrastLevels", dhNContrastLevels%);
    SetIntRegistryValue(key$, "ContrastLogProgression", dhContrastLogProgression%);
    SetFloatRegistryValue(key$, "CoreDiameter", dhCoreDiameter);
    SetFloatRegistryValue(key$, "MinDonutDiameter", dhMinDonutDiameter);
    SetFloatRegistryValue(key$, "MaxDonutDiameter", dhMaxDonutDiameter);
    SetIntRegistryValue(key$, "NDonutDiameters", dhNDonutDiameters%);
    SetIntRegistryValue(key$, "DiameterLogProgression", dhDiameterLogProgression%);
    SetFloatRegistryValue(key$, "DonutOrientation", dhDonutOrientation);
    SetFloatRegistryValue(key$, "MinCoreOrientation", dhMinCoreOrientation);
    SetFloatRegistryValue(key$, "MaxCoreOrientation", dhMaxCoreOrientation);
    SetIntRegistryValue(key$, "NCoreOrientations", dhNCoreOrientations%);
    
end



proc GetDonutHuntXHairParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\DonutHunt\\XHair";
    
	dhXHairInnerRadiusOffset := GetFloatRegistryValue(key$, "XHairInnerRadiusOffset", dhXHairInnerRadiusOffset);
    dhXHairNumGridDivisions% := GetIntRegistryValue%(key$, "XHairNumGridDivisions", dhXHairNumGridDivisions%);
    dhXHairMiddleRadiusOffset := GetFloatRegistryValue(key$, "XHairMiddleRadiusOffset", dhXHairMiddleRadiusOffset);
    dhXHairOuterRadiusOffset := GetFloatRegistryValue(key$, "XHairOuterRadiusOffset", dhXHairOuterRadiusOffset);
    dhXHairTicInnerOffset := GetFloatRegistryValue(key$, "XHairTicInnerOffset", dhXHairTicInnerOffset);
    dhXHairTicOuterOffset := GetFloatRegistryValue(key$, "XHairTicOuterOffset", dhXHairTicOuterOffset);
    
end;

proc SaveDonutHuntXHairParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\DonutHunt\\XHair";
    
    SetFloatRegistryValue(key$, "XHairInnerRadiusOffset", dhXHairInnerRadiusOffset);
    SetIntRegistryValue(key$, "XHairNumGridDivisions", dhXHairNumGridDivisions%);
    SetFloatRegistryValue(key$, "XHairMiddleRadiusOffset", dhXHairMiddleRadiusOffset);
    SetFloatRegistryValue(key$, "XHairOuterRadiusOffset", dhXHairOuterRadiusOffset);
    SetFloatRegistryValue(key$, "XHairTicInnerOffset", dhXHairTicInnerOffset);
    SetFloatRegistryValue(key$, "XHairTicOuterOffset", dhXHairTicOuterOffset);

end;

proc GetDonutHuntFixationParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\DonutHunt\\Fixation";
    
    dhIsHuman% := GetIntRegistryValue%(key$, "IsHuman", dhIsHuman%);
    dhUseMaintainMode% := GetIntRegistryValue%(key$, "UseMaintainMode", dhUseMaintainMode%);
    dhMaintainFixation := GetFloatRegistryValue(key$, "MaintainFixation", dhMaintainFixation);
    dhAcquisitionTime := GetFloatRegistryValue(key$, "AcquisitionTime", dhAcquisitionTime);
    dhAcqFailTime := GetFloatRegistryValue(key$, "AcqFailTime", dhAcqFailTime);
    dhHoldFailTime := GetFloatRegistryValue(key$, "HoldFailTime", dhHoldFailTime);
    dhMaintainFailTime := GetFloatRegistryValue(key$, "MaintainFailTime", dhMaintainFailTime);
    dhMissTime := GetFloatRegistryValue(key$, "MissTime", dhMissTime);
    dhWrongCPContrast% := GetIntRegistryValue%(key$, "WrongCPContrast", dhWrongCPContrast%);
    
end;

proc SaveDonutHuntFixationParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\DonutHunt\\Fixation";
    
    SetIntRegistryValue(key$, "IsHuman", dhIsHuman%);
    SetIntRegistryValue(key$, "UseMaintainMode", dhUseMaintainMode%);
    SetFloatRegistryValue(key$, "MaintainFixation", dhMaintainFixation);
    SetFloatRegistryValue(key$, "AcquisitionTime", dhAcquisitionTime);
    SetFloatRegistryValue(key$, "AcqFailTime", dhAcqFailTime);
    SetFloatRegistryValue(key$, "HoldFailTime", dhHoldFailTime);
    SetFloatRegistryValue(key$, "MaintainFailTime", dhMaintainFailTime);
    SetFloatRegistryValue(key$, "MissTime", dhMissTime);
    SetIntRegistryValue(key$, "WrongCPContrast", dhWrongCPContrast%);

end;


func DonutHuntXHairDialog%()
    var i%;
    
    GetDonutHuntXHairParameters();
    
    DlgCreate("Crosshair/Grid");
    DlgReal(1, "Grid inner radius offset", 0, 100);
    DlgReal(2, "Grid mid radius offset", 0, 100);
    DlgReal(3, "Grid outer radius offset", 0, 100);
    DlgInteger(4, "Number of divisions in grid", 2, 128);
    DlgReal(5, "XHair inner offset", -1, 100);
    DlgReal(6, "XHair outer offset", -1, 100);
    i% := DlgShow(dhXHairInnerRadiusOffset, dhXHairMiddleRadiusOffset, dhXHairOuterRadiusOffset, dhXHairNumGridDivisions%, dhXHairTicInnerOffset, dhXHairTicOuterOffset);
    
    if i% = 1 then
        'Save parameters
        SaveDonutHuntXHairParameters();
    endif;
    
    return 1;
end


func DonutHuntFixationDialog%()
    var i%;
    
    GetDonutHuntFixationParameters();
    
    DlgCreate("Fixation");
    DlgCheck(1, "Subject Is Human, don't require fixation");
    DlgCheck(2, "Maintain Fixpt between trials");
    DlgReal(3, "Maintain fixation after stim(s):", 0.1, 10);
    DlgReal(4, "Acquire Fixation time(s):", 1, 1000);
    DlgReal(5, "Acquire Fixation penalty(s):", .01, 10);
    DlgReal(6, "During-Stim fixation break penalty(s):", .01, 10);
    DlgReal(7, "Maintain fixation after stim penalty(s):", .01, 10);
    DlgReal(8, "Monkey saccade miss penalty(s)", .01, 10);
    DlgInteger(9, "Wrong CP contrast (0-100, SaccTrain only):",0,100);
    i% := DlgShow(dhIsHuman%, dhUseMaintainMode%, dhMaintainFixation, dhAcquisitionTime, dhAcqFailTime, dhHoldFailTime, dhMaintainFailTime, dhMissTime,dhWrongCPContrast%);
    
    if i% = 1 then
        'Save parameters
        SaveDonutHuntFixationParameters();
    endif;
    
    return 1;
end


func DonutHuntMainDialog%()
    
    var i%;
    var status% := 0;  
    var j%;
    var dhResponseList$[4];

    ' Set dhResponseList$[]
    dhResponseList$[0] := "No response";
    dhResponseList$[1] := "Joystick";
    dhResponseList$[2] := "Saccade";
    dhResponseList$[3] := "Saccade (Training)";
    
    ' Fetch parameters from registry    
    GetDonutHuntMainParameters();  
    
    ' Fetch these, because if you don't click on them...
    GetDonutHuntFixationParameters();    
    GetDonutHuntXHairParameters();
    'grating parameters is OK, that has to be clicked on.
    
    ' Generate the dialog    
    DlgCreate("Donut Hunt Dialog",0,0,60,16);
    
    'The top 2 non-categorized bits
    DlgInteger(1,6,1,100,23,1);  'Number of repeats
    DlgText("Number of Repeats",2,1);
    DlgButton(dhXHairButton%,"       Crosshairs       ",DonutHuntXHairDialog%,2,2);
    DlgButton(dhGratingButton%,"Grating Parameters",DonutHuntGratingDialog%,2,3);
    DlgButton(dhFixationButton%,"Fixation",DonutHuntFixationDialog%,23,2);
    DlgCheck(12,"Show Donut On Master",35,1);
    DlgCheck(13,"Always Looking",35,3);
    

    
    'Timing/Masker parameters
    DlgGroup("Timing/Masker Parameters",1,4,58,4);
    DlgReal(2,6,0,10,23,5);  'Minimum delay
    DlgText("Min delay (sec)",2,5);
    DlgReal(3,6,0,10,23,6);  'Random delay
    DlgText("Random delay (sec)",2,6);
    DlgReal(4,6,0,10,52,5);  'Pre-contrast change time
    DlgText("Pre-change time (sec)",31,5);
    DlgReal(5,6,0,10,52,6);  'Post-contrast change time
    DlgText("Post-change time (sec)",31,6);
    DlgReal(6,6,0,100,23,7);  'Number of grids per second
    DlgText("Masker temp. freq. (Hz)",2,7);
    DlgReal(7,6,0,10,52,7);  'Total grid duration
    DlgText("Total mask dur. (sec)",31,7);
    
    'Monkey only
    DlgGroup("Monkey Only Parameters",1,8,58,2);
    'DlgCheck(14,"Use Joystick",35,9);
    DlgList(14,20,dhResponseList$[],4,35,9);
    DlgReal(15,6,0,10,23,9);  'Minimum delay
    DlgText("Response Window (sec)",2,9);
    
    'CRG parameters
    DlgGroup("CRG",1,10,58,5);
    DlgCheck(8, "Do CRG", 2, 11);
    DlgInteger(9,6,0,100,23,12);  'N repeats per CRG sequence
    DlgText("Repeats per CRG seq",2,12);
    DlgInteger(10,6,0,100,52,12);  'N Frames per turn
    DlgText("Frames per turn",31,12);
    DlgString(11,55,200,"",3,14);  'for visual confirmation of selected seq file; max character value (20) only applies to typing in, not assigning via Value().  Huh.
    DlgButton(dhSelectSEQFileButton%,"Select Sequence File",SelectSEQFile%,2,13);

    DlgAllow(0xffff, 0, DonutHuntMainDialogChanged%);
    
    ' Show the dialog. 
    i%:=DlgShow(dhNRepeats%,dhMinStimDelay,dhRandStimDelay,dhDelayBeforeDContrast,dhDurAfterDContrast,
    dhGridTF,dhGridDur,dhDoCRG%,dhNRepeatsPerCRG%,dhNFramesPerTurn%,dhCRGFilename$,dhShowDonutOnMaster%,alwaysLooking%,dhUseJoystick%,dhResponseWindow);

    
    
    ' If user hit OK then save parameters (and return 1). 
	if i% = 1 then
        
        if dhUseJoystick% > 1 and (Pow(FixationX-dhXOffset,2) + Pow(FixationY-dhYOffset,2)) <= Pow(dhChoicePointRadius+WindowRadius,2) then
            message("Error!  The fixation window and the response windows overlap!  Quitting!");
            status% := 0; 'and get out if this happens
        
        else
            'Save parameters
            SaveDonutHuntMainParameters();   

            'printlog("%s\n",dhCRGFilename$);
        
            status% := 1;
        endif;

    else
        status% := 0;
    endif
    
	return status%;
   
end;



' This function is initially called with a "0" input
func DonutHuntMainDialogChanged%(item%)  
    if startup% = 0 then
        DlgEnable(0,-1);  'Otherwise disable "OK"
        startup%:=1;
        'Enable is done in the DonutHuntGratingDialog
    endif;
    
    'This re-enables the master/slave listbox if CRG dialog is cancelled (actually not needed)
    'if item% = 0 then
        'DlgEnable(1,5); 
    'endif;  
    if DlgValue(6) = 0 then
        'DlgEnable(1,-1);  'enable "OK" if curve has been selected
        DlgEnable(0,8);   'Disable CRG stuff
        DlgEnable(0,9);   
        DlgEnable(0,10);  
        DlgEnable(0,-dhSelectSEQFileButton%);
    else
        'DlgEnable(0,-1);  'Otherwise disable "OK"
        DlgEnable(1,8);   'Enable CRG stuff
        DlgEnable(1,9);   
        DlgEnable(1,10);
        DlgEnable(1,-dhSelectSEQFileButton%);
    endif;
    
    return 1;
end


func DonutHuntGratingDialog%()
    
    var i%;
    var allOK% := 0;
    var param$;
    
    'Disable the calling dialog's OK button, in case invalid numbers are entered
    '(On the first call it will be disabled anyway)
    DlgEnable(0,-1);  'this is kinda cool, that DlgEnable here affects the calling dialog.    
    
    ' Fetch parameters from registry    
    GetDonutHuntGratingParameters();    
    
    'Hold value of dhYOffset from registry, we will display and change a temporary value
    dhYOffsetTemp := dhYOffset;
    
    ' Generate the dialog    
    DlgCreate("Donut Hunt Dialog",0,0,60,19);
    
    'Common grating parameters
    DlgGroup("Common Grating Parameters",1,1,58,4);
    DlgReal(1,6,0,100,23,2);  'X offset, floor at 0 because we are reflecting
    DlgText("X Offset (deg)",2,2);
    DlgReal(2,6,-100,100,23,3);  'Y Offset, negative values legal
    DlgText("Y Offset (deg)",2,3);
    DlgReal(3,6,0,100,52,2);  'Spatial freq
    DlgText("Spatial Freq. (cyc/deg)",31,2);
    DlgReal(4,6,0,100,52,3);  'Temporal freq
    DlgText("Temporal Freq. (cyc/s)",31,3);
    DlgInteger(5,6,0,360,52,4);  'Init phase
    DlgText("Initial Phase (deg)",31,4);
   
    'Contrast parameters
    DlgGroup("Contrast Parameters",1,5,58,5);
    DlgReal(6,6,0.1,100,52,6);  'Donut contrast
    DlgText("Donut contrast",31,6);
    DlgReal(7,6,0.1,100,23,6);  'Core contrast
    DlgText("Core base contrast",2,6);
    DlgReal(8,6,0.1,100,23,7);  'Minimum change core contrast
    DlgText("Min core cont. change",2,7);
    DlgReal(9,6,0.1,100,23,8);  'Maximum change core contrast
    DlgText("Max core cont. change",2,8);
    DlgInteger(10,6,0,100,23,9);  'Number of contrast levels
    DlgText("# contrast levels",2,9);
    DlgCheck(11, "Contrast Log Progression", 31, 9);
    
    'Diameter parameters
    DlgGroup("Diameter Parameters",1,10,58,4);
    DlgReal(12,6,0,100,52,11);  'Core diameter
    DlgText("Core diameter (deg)",31,11);
    DlgReal(13,6,0,100,23,11);  'Minimum donut diameter
    DlgText("Min donut diam. (deg)",2,11);
    DlgReal(14,6,0,100,23,12);  'Maximum donut diameter
    DlgText("Max donut diam. (deg)",2,12);
    DlgInteger(15,6,0,100,23,13);  'Number of donut sizes
    DlgText("# donut sizes",2,13);
    DlgCheck(16, "Donut Size Log Progression", 31, 13);
    
    
    'Orientation parameters
    DlgGroup("Orientation Parameters",1,14,58,4);
    DlgReal(17,6,0,360,52,15);  'Donut Orientation
    DlgText("Donut Orientation (deg)",31,15);
    DlgReal(18,6,0,360,23,15);  'Minimum Core orientation
    DlgText("Min Core orient. (deg)",2,15);
    DlgReal(19,6,0,360,23,16);  'Maximum Core prientation
    DlgText("Max Core orient. (deg)",2,16);
    DlgInteger(20,6,0,100,23,17);  'Number of orientations
    DlgText("# orientations",2,17);
    
    DlgAllow(0xffff, 0, DonutHuntGratingDialogChanged%);    
    
    
    ' Show the dialog. 
    i%:=DlgShow(dhXOffset,dhYOffsetTemp,dhSpatialFreq,dhTemporalFreq,dhInitialPhase%,dhDonutContrast,dhCoreContrast,
    dhMinDContrast,dhMaxDContrast,dhNContrastLevels%,dhContrastLogProgression%,dhCoreDiameter,
    dhMinDonutDiameter,dhMaxDonutDiameter,dhNDonutDiameters%,dhDiameterLogProgression%,dhDonutOrientation,
    dhMinCoreOrientation,dhMaxCoreOrientation,dhNCoreOrientations%);

    
    ' If user hit OK then check a couple of parameters
	if i% = 1 then
        'it's dummyproofing!
        docase
        case dhCoreContrast + dhMaxDContrast > 100 then
            message("Error!  The baseline core contrast plus maximum contrast add up to more than 100!");
        case dhMinDContrast > dhMaxDContrast then
            message("Error!  The min contrast is greater than the max contrast!");
        case dhCoreDiameter > dhMinDonutDiameter then
            message("Error!  The diameter of the core is greater than the smallest diameter of the donut!");
        case dhMinDonutDiameter > dhMaxDonutDiameter then    
            message("Error!  The min donut diameter of the core is greater than the max donut diameter!");
        else
            allOK% := 1;
        endcase;            

    endif;
    
    ' If all is OK then save parameters    
    if allOK% = 1 then        
        'Save parameters
        if dhIsHuman% = 0 then  
            dhYOffset := dhYOffsetTemp; 'if monkey, update dhYOffset so it can be saved to registry
        else
            'no code, just note: if human, do not change dhYOffset to 0, re-save old value to registry
        endif;
        SaveDonutHuntGratingParameters();
        
        'and now that parameters are saved to the registry, update dhYOffset to the proper value, human or monkey
        dhYOffset := dhYOffsetTemp;
        
        'Encode and save Core and Donut parameters (not Master/Slave specific, we'll assign that when we come to it)
        param$ := EncodeGratingParameters$(0,0,dhCoreDiameter,dhCoreDiameter,0,0,dhCoreContrast,dhSpatialFreq,dhTemporalFreq,0,dhInitialPhase%,"b","s","e");
        SaveGratingParameters("Core", param$);  'this saves core        
        param$ := EncodeGratingParameters$(0,0,dhMinDonutDiameter,dhMinDonutDiameter,dhCoreDiameter,dhCoreDiameter,dhDonutContrast,dhSpatialFreq,dhTemporalFreq,dhDonutOrientation,dhInitialPhase%,"b","s","e");
        SaveGratingParameters("Donut", param$);  'this saves core 
        
        'printlog("The y offset is %f\n",dhYOffset); 'just checking
      
        'if the user says OK, enable OK on the main dialog
        DlgEnable(1,-1);  'this is kinda cool, that DlgEnable here affects the calling dialog.
    endif
    
	return 1;
   
end;


func DonutHuntGratingDialogChanged%(item%)
    if item% = 0 then  'Only run this callback when opening the dialog, not on a change
        if dhIsHuman% = 1 then
            DlgValue(2,0);  'force Y offset to 0, don't let it change
            DlgEnable(0,2);
        else
            DlgValue(2,dhYOffset);  'set initial Y offset to saved value, let it change
            DlgEnable(1,2);
        endif;
    endif;
    return 1;  'if we don't return 1, we can't freaking change anything.
end;


func SelectSEQFile%()

    var status% := 1;
    var direc$;
    var fh0%;
    
    direc$ := FilePath$();  'get current directory
    fh0%:=FileOpen(direc$+"*.txt",1,0,"Please select a CRG sequence file");  'Find a sequence file
    direc$ := FileName$(0);  'Get full path of selected file
    FileClose(fh0%);  'Just close the file, we're not using it
    DlgValue$(9,direc$);  'Place filename into dialog item of calling dialog

	return status%;  'return 1 so calling dialog doesn't close
    
end;