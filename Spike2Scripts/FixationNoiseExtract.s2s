'$Id: FixationNoiseExtract.s2s,v 1.1 2015-05-12 17:39:07 devel Exp $

' FixPlusExtract
'
' Extracts trial information for FixPlus data files. 
' Ignores comments entered with new blocks. 
' Requires input text file with list of Spike2 data files. 
' Output files have one trial per line, with the following format:
' 
' outcome  tFixpt tStimOn tAllOff
' 
' Outcome is one of the following:
' -1 Unknown (error condition - should not happen)
' 1  Success - trial completed successfully
' 2  Failure - fixation not held through stim period
' 3  Failure - fixation point acquisition failed
' 4  Failure - fixation not held long enough to display stim
'
' The other three values are times taken from VSG triggers and they relate specific times in the stimulus display:
' 
' tFixpt - time of onset of fixation point
' tStimOn - time of onset of stimulus
' tAllOff - time when fixpt and stim turned off
'
' NOTE: In successful trials (outcome = 1), one should not use tAllOff as the endpoint of the fixation period. 
' Its probably more correct to use tStimOn + (hold fixation time). The script does not check for fixation after
' the hold fixation time is past. Instead reward is given and a request is sent to turn off the stimulus. The 
' extracted value only reflects the time when the stim actually went off. It is possible that the subject broke
' fixation after the fixation time passed, but before the stim went off -- in that case the trial is still 
' successful. 
                
#include "ExtractionUtilities.s2s"
#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/BatchUtilities.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"

var hData%;
var hTxt%;
var fpNProcessed% := 0;

' Trial vars
var tFixptOn;
var tFixptOff;
var iOutcome%;
var nSuccess% := 0;
var nTrials% := 0;
var tFixation := 2.1;
var tBackoff := .1;
var eyeXChannel% := 21;
var eyeYChannel% := 22;
var xsdSum := 0;
var ysdSum := 0;

' Initialize logging
LogInit(1);

' Get data file. The "current" view must be a time view, otherwise we bail. 
hData% := View(0);
if (ViewKind(hData%) <> 0) then
    Message("Current view must be a time view.");
    halt;
endif

FixPlusX%(hData%, "");
PrintLog("X-sd-avg %f   Y-sd-avg %f\n", xsdSum/nSuccess%, ysdSum/nSuccess%);

proc InitTrialVars()
    tFixptOn := -1;
    tFixptOff := -1;
    return;
end

proc WriteResults()
    PrintLog("Success/Total %d/%d\n", nSuccess%, nTrials%);
    return;
end

proc WriteTrialVars()
    var stmp$;
'    stmp$ := Print$("%d %.3f %.3f %.3f", fpOutcome%, fpTFixpt, fpTStimOn, fpTAllOff);
'    View(hTxt%).Print("%s\n", stmp$);
'    PrintLog("%s\n", stmp$);
    return;
end


const fpstateError% := -1;
const fpstateReady% := 0;
const fpstateFixpt% := 1;
const fpstateComplete% := 3;        ' trial is complete, waiting for X
const fpstateDone% := 4;
var fpIState% := fpstateReady%;



func FixPlusX%(h%, args$)
    var sTxtFilename$;
    var sFound$;
    var sIgnore$ := "Jqc";
    var tFound := -1;
    var tLast := -1;
    var tStart := -1;
    var tEnd := -1;
    var xmean, ymean, xsd, ysd;
    
    hData% := h%;
    sTxtFilename$ := ReplaceFileExtension$(h%, "fpl");
    hTxt% := FileOpen(sTxtFilename$, 8, 1);
    if hTxt% < 0 then
        LogError("FixPlusX", "Cannot open output filename " + sTxtFilename$);
        return -1;
    endif
    
    View(hData%);
    tLast := -1;
    tFound := NextKeyOrText(tLast, sFound$, sIgnore$);
    while tFound >= 0 and fpIState% <> fpstateError% do

        'LogInfo(sFound$ + " " + str$(tFound));
        if sFound$ = "Q" then
            WriteResults();
        else
            
            docase
            case fpIState% = fpstateReady% then
                
                ' need an 'F'
                if sFound$ = "F" then
                    nTrials% += 1;
                    InitTrialVars();
                    tFixptOn := GetFixptOnTime(tFound);
                    if tFixptOn < 0 then
                        LogError("fpstateReady", "Error getting fixpt time for F at " + str$(tFound));
                        fpIState% := fpstateError%;
                    else
                        fpIState% := fpstateFixpt%;
                    endif
                else
                    LogStatus("fpstateReady", "Expecting F, got " + sFound$);
                endif
                
            case fpIState% = fpstateFixpt% then
                
                ' Expecting X
                docase
                case sFound$ = "X" then
                    tFixptOff := GetFixptOffTime(tFound);
                    if tFixptOff < 0 then
                        LogError("fpstateFixpt", "Error getting fixpt off time for X at " + str$(tFound));
                        fpIState% := fpstateError%;
                    else
                        fpIState% := fpstateComplete%;
                    endif
                else
                    LogError("fpstateFixpt", "Unexpected text \"" + sFound$ + "\" found at " + str$(tFound));
                    fpIState% := fpstateError%;
                endcase
                
            case fpIState% = fpstateComplete% then
                docase
                case sFound$ = "R" then
                    ' successful trial, use tFixptOn and tFixptOff to find noise
                    nSuccess% += 1;
                    xmean := ChanMeasure(eyeXChannel%, 2, tFixptOff - tFixation + tBackoff, tFixptOff - tBackoff);
                    xsd   := ChanMeasure(eyeXChannel%, 12, tFixptOff - tFixation + tBackoff, tFixptOff - tBackoff);
                    ymean := ChanMeasure(eyeYChannel%, 2, tFixptOff - tFixation + tBackoff, tFixptOff - tBackoff);
                    ysd   := ChanMeasure(eyeYChannel%, 12, tFixptOff - tFixation + tBackoff, tFixptOff - tBackoff);
                    xsdSum := xsd;
                    ysdSum += ysd;
                    LogStatus("fpstateComplete", "Success " + str$(tFixptOn) + "-" + str$(tFixptOff) + " X: " + str$(xmean) + "+-" + str$(xsd) + " Y: " + str$(ymean) + "+-" + str$(ysd));
                    fpIState% := fpstateDone%;
                case sFound$ = "F" then
                    ' last trial was unsuccessful
                    InitTrialVars();
                    tFixptOn := GetFixptOnTime(tFound);
                    if tFixptOn < 0 then
                        LogError("fpstateReady", "Error getting fixpt time for F at " + str$(tFound));
                        fpIState% := fpstateError%;
                    else
                        fpIState% := fpstateFixpt%;
                    endif
                    
                else
                    LogError("fpstateComplete", "Unexpected text \"" + sFound$ + "\" found at " + str$(tFound));
                    fpIState% := fpstateError%;
                endcase
            else
                LogError("", "Unexpected state (" + str$(fpIState%) + ") found at " + str$(tFound) + "\n");
                fpIState% := fpstateError%;
            endcase
        endif
        
        if fpIState% = fpstateDone% then
            WriteTrialVars();
            InitTrialVars();
            fpIState% := fpstateReady%;
        endif
        
        if fpIState% <> fpstateError% then
            tLast := tFound;
            tFound := NextKeyOrText(tLast, sFound$, sIgnore$);
        endif
    wend
    
    return 0;
end

func GetFixptOnTime(t)
    var tf := -1;
    if FindRisingEdge%(23, t, tf) <> 0 then
        tf := -1;
    endif
    return tf;
end


func GetFixptOffTime(t)
    var tf := -1;
    if FindFallingEdge%(23, t, tf) <> 1 then
        tf := -1;
    endif
    return tf;
end
