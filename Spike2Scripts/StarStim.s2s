' $Id: StarStim.s2s,v 1.5 2011-01-21 02:41:45 devel Exp $
const starCVSID$ := "$Id: StarStim.s2s,v 1.5 2011-01-21 02:41:45 devel Exp $";

'========================================================================
'
' INPUTS
'
' Eye X, Y - ADC input 14, 15 respectively
' VSG trigger - assumed on DIGIN byte 0.  *** THE 1401 SHOULD HAVE PREFERENCES 
'               SET WITH THE "Event Ports 0 and 1 on read digital input connector" 
'               BOX CHECKED!!!
'
'========================================================================

#include "../../Spike2Util/UsreyUtil.s2s"
#include "UsreyGratings.s2s"
#include "UsreyFixationPoint.s2s"
#include "UsreyDAQ.s2s"



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	StarStim script parameters START
'
'	Vars that control the alert msequence script. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
var starFixationDuration;			' Time required to maintain fixation, seconds
var starAcquisitionTime;			' Time allowed to acquire target before fail trial, seconds
var starInterTrialTime;				' Blank time following a trial (both successful and failed), seconds
var starAnswerTime;					' time to move to answer window, seconds
var starNumTargets%;					' number of targets to use
var starRandomize%;					' generate random ordering file for stim
var starOverlap%;						' allow fixpoint and stim to overlap for a short period
var starUseStimulusXY% := 1;
var starTargetX := 5.0;
var starTargetY := 0.0;
var starTargetRotation := 0.0;

proc GetStarStimScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\StarStim";

	Profile(key$, "FixationDuration", "1.0", stmp$);
	starFixationDuration := val(stmp$);

	Profile(key$, "AcquisitionTime", "1.0", stmp$);
	starAcquisitionTime := val(stmp$);

	Profile(key$, "InterTrialTime", "1.0", stmp$);
	starInterTrialTime := val(stmp$);

	Profile(key$, "AnswerTime", "1.0", stmp$);
	starAnswerTime := val(stmp$);

	Profile(key$, "NumTargets", 5, starNumTargets%);
	Profile(key$, "Randomize", 0, starRandomize%);
	Profile(key$, "Overlap", 0, starOverlap%);
    Profile(key$, "UseStimulusXY", starUseStimulusXY%, starUseStimulusXY%);
	Profile(key$, "TargetX", "5.0", stmp$);
	starTargetX := val(stmp$);
	Profile(key$, "TargetY", "0.0", stmp$);
	starTargetY := val(stmp$);
	Profile(key$, "TargetRotation", "0.0", stmp$);
    starTargetRotation := val(stmp$);
	
end;
 	
proc SaveStarStimScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\StarStim";

	Profile(key$, "FixationDuration", str$(starFixationDuration));
	Profile(key$, "AcquisitionTime", str$(starAcquisitionTime));
	Profile(key$, "InterTrialTime", str$(starInterTrialTime));
	Profile(key$, "AnswerTime", str$(starAnswerTime));
	Profile(key$, "NumTargets", starNumTargets%);
	Profile(key$, "Randomize", starRandomize%);
	Profile(key$, "Overlap", starOverlap%);
    Profile(key$, "UseStimulusXY", starUseStimulusXY%);
	Profile(key$, "TargetX", str$(starTargetX));
	Profile(key$, "TargetY", str$(starTargetY));
	Profile(key$, "TargetRotation", str$(starTargetRotation));
    
end;



func StarStimScriptDialog%()
	var i%;
	GetStarStimScriptParameters();
	DlgCreate("StarStim Script Parameters", 25, 10);
	DlgReal(1, "Fixation duration(s):", .01, 10);
	DlgReal(2, "Acquisition time(s):", .01, 10);
	DlgReal(3, "Intertrial time(s):", .01, 10);
	DlgReal(4, "Answer time(s):", .01, 10);
	DlgInteger(5, "Number of targets:", 1, 9);
	DlgCheck(6, "Randomize target order?");
	DlgCheck(7, "Overlap fixation/target?");
    DlgCheck(8, "Use stimulus position?");
    DlgReal(9, "Target X", -20.0, 20.0);
    DlgReal(10, "Target Y", -20.0, 20.0);
    DlgReal(11, "Rotation(deg)", 0.0, 360.0);
    DlgAllow(0xffff, 0, StarStimScriptDialogChanged%);
	i%:=DlgShow(starFixationDuration, starAcquisitionTime, starInterTrialTime, starAnswerTime, starNumTargets%, 
        starRandomize%, starOverlap%, starUseStimulusXY%, starTargetX, starTargetY, starTargetRotation);
	if i% = 1 then
		SaveStarStimScriptParameters();
	endif;
	return i%;
end;

func StarStimScriptDialogChanged%(item%)
    docase
    case item% = 0 then
        DlgEnable(1-starUseStimulusXY%, 9, 10);
    case item% = 8 then
        DlgEnable(1-DlgValue(8), 9, 10);
    endcase
    return 1;
end



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' StarStim script END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''







' Window handles and channel numbers
var XChannel%,YChannel%;		' Channel number assigned to eye x and y
var FixationChannel%;
var StimChannel%;
var ChangeChannel%;
var ReadyChannel%;			' channel number for VSG ready pulse signal
var DataWindow%;	' time view
var XYWindow%;		' window with eye pos shown -- this is for eye pos and fixpt only
var StarWindow%;    ' window to show star
var iTargetChannel%;	' channel number for target in xy window
var iTargetWindowChannel%;' channel number for target window in xy window
var iFixChannel%;	' channel number for fixpt in xy window
var iFixWindowChannel%;' channel number for fixpt window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var iEyePosChannel% := 1;   ' channel 1 is always used as eye position channel in xy windows
var iStarPosChannel% := 1;
var StimHandle%;	' handle for stimulus application
' Experimental control
var Pause%:=0;		' When 1, expt is paused - no idle processing done

' Display stuff
var FixWindowX[36],FixWindowY[36];	' points for displaying fixation window in xy view
var windowX[36], windowY[36];
' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];
var iStimIndex%;

' Run dialog
if StarStimScriptDialog%() = 0 then
    halt;
endif


' Assign channel numbers for eye X,Y and trigger. 
XChannel% := NumberOfElectrodes%+1;
YChannel% := NumberOfElectrodes%+2;
ReadyChannel% := NumberOfElectrodes% + 3;
FixationChannel% := NumberOfElectrodes%+4;
StimChannel% := NumberOfElectrodes%+5;
ChangeChannel% := NumberOfElectrodes%+6;
CreateSampleConfiguration();

' Get display windows ready
InitializeWindows();

' Prepare the toolbar buttons
InitializeToolbar();

const stateStartTrial%				:= 0;
const stateWaitForFixPtOn%			:= 1;
const stateWaitForAcquisition%	:= 2;
const stateHoldFixation%			:= 3;
const stateShowStim%					:= 4;
const stateWaitForStimOn%			:= 5;
const stateWaitForAnswer%			:= 6;
const stateSuccess%					:= 7;
const stateWaitForFixPtOff%		:= 8;
const stateAbort%						:= 9;
const stateWaitForStimOff%			:= 10;
const stateFailure%					:= 11;
const stateAbortTime%				:= 12;
const stateInterTrial%		 		:= 13;

const stateVSGWait%					:= 14;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%			:= 15;		' waif for vsg to send ready signal #2


var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var iState%:=stateVSGWait%;		' present state
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tTrigger:=-1;	' temp var for newly discovered trigger times
var nTrialsStarted%:=0;
var nTrialsSuccess%:=0;
var nTrialsFail%:=0;
var iTargetPoint% := 0;
var iTargetIndex%;
var iStarPosColor%;
var TargetX, TargetY;		' location of stimulus grating - this is target position "0"
const numRandomTargets% := 1000;
var aTargets[numRandomTargets%];			' if randomized target locations, this array holds those random positions

' Run real time analysis here. 
func IdleProcessing%()
	var iStatus% := 1;	' this is return value. value of 1 (0) continues (stops) processing
	tNow := MaxTime();

	xEye := ChanMeasure(XChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltX;
	yEye := ChanMeasure(YChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltY;

	' Don't update display every time. 
	' Note that this stim displays eye continuously, without erasing... 
	if tNow-tLastUpdate > .005 then
        if iState% = stateWaitForAnswer% then
            View(StarWindow%).XYAddData(iStarPosChannel%, xEye, yEye);
        endif
		View(XYWindow%).XYAddData(iEyePosChannel%, xEye, yEye);
		tLastUpdate := tNow;
	endif

	' What state are we in? 
	docase 

	
		case iState% = stateVSGWait% then

			' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
			tTrigger := NextTime(ReadyChannel%, tLast, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 0 then
				PrintLog("state stateVSGWait: Got leading edge of trigger\n");
				tLastTrigger := tTrigger;
				iState% := stateVSGWaitConfirm%;
			endif;

		case iState% = stateVSGWaitConfirm% then

			' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
			tTrigger := NextTime(ReadyChannel%, tLastTrigger, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 1 then
				PrintLog("state stateVSGWaitConfirm: Got trailing edge of trigger\n");
				tLastTrigger := tTrigger;
				iState% := stateStartTrial%;
			endif;

	
		case iState% = stateStartTrial% then

			' initial state on startup. 
			' DIGOUT to present stimulus
			' Enter state 1

			nTrialsStarted% += 1;
			SampleKey("F");
			iState% := stateWaitForFixPtOn%;

		case iState% = stateWaitForFixPtOn% then
	
			tTrigger := NextTime(FixationChannel%,tLast,vTrigger);
			if tTrigger > tLastTrigger then

				if vTrigger = 0 then
		
					' Stimulus has been presented. Display stim location and window. Enter state 2
					DrawFix(1);
					iState% := stateWaitForAcquisition%;
					tStateStart := tTrigger;
					tLastTrigger := tTrigger;

				endif

			endif

		case iState% = stateWaitForAcquisition% then

			if tNow-tStateStart < starAcquisitionTime then
				
				' Acquisition happens when the eye falls within the fixation window.
				if InFixationWindow%(xEye, yEye) > 0 then

					iState% := stateHoldFixation%;
					tStateStart := tNow;
	
				endif

			else

				' Failed. Turn off stim and try again.
'				PrintLog("State 2 - acquisition failed. Enter state 4\n");
				iState% := stateAbort%;
				tStateStart := tNow;

			endif

		case iState% = stateAbort% then

			DrawFix(0);
			SampleKey("f");
			iState% := stateWaitForFixPtOff%;

		case iState% = stateWaitForFixPtOff% then

			tTrigger := NextTime(FixationChannel%, tLast, vTrigger);
			if (tTrigger >= tLast) then
				iState% := stateInterTrial%;
				tStateStart := tNow;
			endif
			
		case iState% = stateHoldFixation% then

			if InFixationWindow%(xEye, yEye) <= 0 then

				iState% := stateAbort%;
				tStateStart := tNow;

			else

				if tNow - tStateStart >= starFixationDuration then

					iState% := stateShowStim%;
					tStateStart := tNow;

				endif

			endif

		case iState% = stateShowStim% then
        
            ' Record stim pos
            if (starRandomize% = 0) then 
                iTargetIndex% := iTargetPoint%;
                SampleText(str$(iTargetPoint%));
            else
                iTargetIndex% := aTargets[iTargetPoint%];
                SampleText(str$(aTargets[iTargetPoint%]));
            endif
            
			' Send stim signal, yield short time, then turn off fix pt.
			SampleKey("S");
			Yield(0.05);
			SampleKey("f");
			DrawFix(0);
			DrawTarget(1);
			iState% := stateWaitForStimOn%;

		case iState% = stateWaitForStimOn% then

			tTrigger := NextTime(StimChannel%, tLast, vTrigger);
			if (tTrigger >= tLast) then
				' Stim is on. Assume fixpt is off. 
				iState% := stateWaitForAnswer%;
                tStateStart := tNow;
                iStarPosColor% := 16 + iTargetIndex% mod starNumTargets%;
                iStarPosChannel% := View(StarWindow%).XYSetChan(0, 0, 0, 1, iStarPosColor%);
                View(StarWindow%).XYDrawMode(iStarPosChannel%, 1, 0);
                View(StarWindow%).XYDrawMode(iStarPosChannel%, 2, 0);
			endif

		case iState% = stateWaitForAnswer% then

			' TODO 
			if InTargetWindow%(xEye, yEye) = 1 then

				iState% := stateSuccess%;
				tStateStart := tNow;

			else

				if tNow - tStateStart >= starAnswerTime then

					iState% := stateFailure%;
					tStateStart := tNow;

				endif

			endif

		case iState% = stateSuccess% then

			nTrialsSuccess% += 1;
            Reward%();
            SampleText("+");
			SampleKey("X");
			Yield(0.05);
			AdvanceTarget();
			iState% := stateWaitForStimOff%;
			tStateStart := tNow;

		case iState% = stateFailure% then

			nTrialsFail% += 1;
            SampleText("-");
			SampleKey("X");
			Yield(0.05);
			AdvanceTarget();
			iState% := stateWaitForStimOff%;
			tStateStart := tNow;

		case iState% = stateWaitForStimOff% then

			' Wait for stim to be off
			tTrigger := NextTime(StimChannel%, tLast, vTrigger);
			if tTrigger > tLast then

				if vTrigger = 1 then
		
					' Stimulus has been turned off by vsg.
					DrawTarget(0);
					DrawFix(0);
					iState% := stateInterTrial%;
					tStateStart := tNow;
					tLastTrigger := tTrigger;
	
				endif

			endif

		case iState% = stateInterTrial% then

			if (tNow - tStateStart >= starInterTrialTime) then
				iState% := stateStartTrial%;
				tStateStart := tNow;
			endif;

		else 

			' Unknown state!
			Message("Unknown state=" + str$(iState%));
			halt;

	endcase;

	tLast := tNow;
	
	return iStatus%;

end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;
	SampleClear(); 'Set standard sampling state
'	SampleAutoFile(0); 'Enable automatic file naming
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
	' Set path for new data files
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1, 1);
	SampleAutoName$(dataCellName$ + "_star_000");
	SampleAutoFile(1);
	PrintLog("dataPathRoot=" + dataPathRoot$ + "\n");
	PrintLog("dataDataSet=" + dataDataSet$ + "\n");
	PrintLog("AutoFile status " + str$(SampleAutoFile()) + "\n");
    
    
    ' Text marks make extraction easier
    SampleTextMark(128);
    
	'Channel recording definitions
	SampleEvent(FixationChannel%, 2, 2, 3600);
	SampleComment$(FixationChannel%, "FixPt");
	SampleTitle$(FixationChannel%, "FixPt");

	SampleEvent(StimChannel%, 3, 2, 3600);
	SampleComment$(StimChannel%, "Stim");
	SampleTitle$(StimChannel%, "Stim");

	SampleEvent(ChangeChannel%, 4, 2, 3600); 'Trigger channel, level
	SampleComment$(ChangeChannel%, "Advance");
	SampleTitle$(ChangeChannel%, "Advance");


	' channel to look for ready signal from vsg
	SampleEvent(ReadyChannel%,6,2,3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");


' djs No recording for this stim....
'	for index := 1 to NumberOfElectrodes% do
'		SampleWaveMark(index,index-1,2000,34,15,28000); ' chan, port, event rate, points, pre-trigger, rate
'		SampleTitle$(index, "Electrode_"+Str$(index)); 
'	next

	'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
	SampleWaveform(XChannel%, 14, 1000);
	SampleTitle$(XChannel%,"Eye X");
	SampleWaveform(YChannel%, 15, 1000);
	SampleTitle$(YChannel%, "Eye Y");

	SampleSequencer(script$ + "StarStim.pls");
	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawTarget
' 
' Draws target in xy window (iDraw%==1) or blanks it (0). 
proc DrawTarget(iDraw%)

	PrintLog("DrawTarget " + str$(iDraw%) + " iTargetPoint=" + str$(iTargetPoint%) + "\n");

	if iDraw% > 0 then
		var xstim, ystim;
		xstim := GetTargetX();
		ystim := GetTargetY();

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iTargetChannel%, xstim, ystim);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], xstim);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], ystim);

		View(XYWindow%).XYAddData(iTargetWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iTargetChannel%);
		View(XYWindow%).XYDelete(iTargetWindowChannel%);
	endif

end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawFix
' 
' Draws fixpt in xy window (iDraw%==1) or blanks it (0). 
proc DrawFix(iDraw%)

	if iDraw% > 0 then

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iFixChannel%, FixationX, FixationY);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], FixationX);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], FixationY);

		View(XYWindow%).XYAddData(iFixWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iFixChannel%);
		View(XYWindow%).XYDelete(iFixWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(0, 50, 100, 100);
    XRange(0, 30);
	View(DataWindow%).WindowVisible(1);
    
	'Open an XY view to display the star
	StarWindow% := FileNew(12);
	XRange(-15,15);
	YRange(-2,-15,15);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(50, 0, 100, 50);
	XYColour(1,16);
    
	' Channel 1 is eye pos. Set size of this channel's data to 0 - expands as needed. Join points, too. 
	XYSize(iEyePosChannel%, 0);
	XYJoin(iEyePosChannel%, 1);
	XYDrawMode(1, 2, 1);	' dot size is 1
    
    
	'Open an XY view to display eye position
	XYWindow% := FileNew(12);
	XRange(-15,15);
	YRange(-2,-15,15);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(0, 0, 50, 50);
	XYSize(iEyePosChannel%, -1);
	XYColour(iEyePosChannel%, 16);
    

	'Calcuate the fixation window
	var index%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for index% := 0 to 35 do
		FixWindowX[index%] := WindowRadius * Cos(index% * twopi/36.0);
		FixWindowY[index%] := WindowRadius * Sin(index% * twopi/36.0);
	next;

	'Create a new channel in the XY view to display the fixation window
	iFixWindowChannel% := XYSetChan(0);
	XYColour(iFixWindowChannel%, 13);
	XYDrawMode(iFixWindowChannel%, 2, 1);
	XYJoin(iFixWindowChannel%, 1);

	'Create a new channel in the XY view to display the fixation point
	iFixChannel% := XYSetChan(0);

	'Create a new channel in the XY view to display the target window
	iTargetWindowChannel% := XYSetChan(0);
	XYColour(iTargetWindowChannel%, 13);
	XYDrawMode(iTargetWindowChannel%, 2, 1);
	XYJoin(iTargetWindowChannel%, 1);

	'Create a new channel in the XY view to display the target point
	iTargetChannel% := XYSetChan(0);



	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(iMonitorChannel%, 13);
	XYDrawMode(iMonitorChannel%, 3, 1);
	XYJoin(iMonitorChannel%, 2);
	XYAddData(iMonitorChannel%, -9, -7);
	XYAddData(iMonitorChannel%, 9, -7);
	XYAddData(iMonitorChannel%, 9, 7);
	XYAddData(iMonitorChannel%, -9, 7);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(1,"Sample start",Start%);
	ToolbarSet(2,"Sample stop", Stop%);
	ToolbarSet(3,"Juice",Reward%);
	ToolbarSet(4,"Quit",Quit%);
	ToolbarEnable(2,0);
	Toolbar("Go", 0x3ff);

end;


' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
	var CommandLine$;
	var FixationPoint$;
	var Extras$;
	var tmp$;
	var TargetArg$;

	' Generate randomized targets if requested. 
	if starRandomize% = 1 then
		var txtFileName$;
		var txtFileBase$;
		var txtHandle%;

		' Generate random numbers
		Rand(aTargets[], starNumTargets%);
        Trunc(aTargets[]);

		' get filename for random target order file (data file + "txt" extension) and open it
		View(DataWindow%);
		txtFileBase$ := FileName$(1) + FileName$(2) + FileName$(3) + FileName$(4);
		txtFileName$ := txtFileBase$ + ".txt";
		txtHandle% := FileOpen(txtFileName$, 8, 1);
		PrintLog("Randomized target filename is " + txtFileName$ + "\n");

		var i%;
		var itmp%;
		for i% := 0 to 999 do
			itmp% := Trunc(aTargets[i%]);
			Print("%d\n", itmp%);
		next;
		FileClose();
	
		Extras$ := " -r " + txtFileName$;
	else
		Extras$ := "";
	endif
	Extras$ += " -b gray -d " + DistanceToScreenMM$ + " -n " + str$(starNumTargets%) + " -o " + str$(starTargetRotation);

	' Fetch stim parameters. We need the x,y position only to determine the base target pos.
    if starUseStimulusXY% then
        tmp$ := GetGratingParameters$("Stimulus");
        ReadSetup(",",",",",",",",",");
        ReadStr(tmp$, TargetX, TargetY);
    else
        TargetX := starTargetX;
        TargetY := starTargetY;
    endif
        
    TargetArg$ := "-t " + str$(TargetX) + "," + str$(TargetY) + "," + str$(FixationDiameter) + "," + FixationColor$;
	
	SampleStart(0); 'Start sampling
		
	CommandLine$ := "cmd /k " + bin$ + "\\StarStim " + FixationArg$ + " " + TargetArg$ + Extras$;
    
    
    ' Record initial text marks
    SampleText("StarStim,1");
    SampleText(starCVSID$);
    SampleText(CommandLine$);
    tmp$ := Print$("%f,%f,%f,%f,%f,%f,%d", FixationX, FixationY, TargetX, TargetY, starTargetRotation, WindowRadius, starNumTargets%);
    SampleText(tmp$);
    
    
	'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
	PrintLog(CommandLine$+"\n");
	StimHandle% := ProgRun(CommandLine$,1);
	if StimHandle% <0 then Message("Could not start stimulus."); halt; endif
'	Yield(5);	'Wait a few seconds to make sure the VSG has time to initialize.

	ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
	View(DataWindow%);
	Yield(.1);
	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()

	' Disable idle process func
	ToolbarSet(0,"");

	' Tell stim app to shut down
	SampleKey("Q");
	Yield(.1);
	SampleStop();
	ProgKill(StimHandle%);
	while ProgStatus(StimHandle%) > 0 do
		Yield();
	wend


	WriteParameterFile();

'	ProgRun(bin$ + "\\ClearTrigger",0);

	' Increment daily totals and save then
	TotalTrials% += nTrialsStarted%;
	TotalRewards% += nTrialsSuccess%;
	SaveDailyTotals();

end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func PauseStimuli%();
Pause% :=1;
ToolbarEnable(4,0);
ToolbarEnable(5,1);
return 1;
end
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func ResumeStimuli%();
Pause% :=0;
ToolbarEnable(4,1);
ToolbarEnable(5,0);
return 1;
end



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InFixationWindow%(EyePosX,EyePosY)
	var i% := 0;
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-FixationX, 2) + Pow(EyePosY-FixationY, 2)) <= Pow(WindowRadius,2) then 
		i% := 1;
	endif
	return i%;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InTargetWindow%(EyePosX,EyePosY)
	var i% := 0;
	var x, y;
	x := GetTargetX();
	y := GetTargetY();
	'Determine if the eye position is within the answer window
	if (Pow(EyePosX-x, 2) + Pow(EyePosY-y, 2)) <= Pow(WindowRadius,2) then 
		i% := 1;
	endif
	return i%;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetTargetX()
	var twopi;
	var ang;
	var x;
	var i%;
	twopi := 2.0*4.0*ATan(1.0);

	if (starRandomize% = 0) then 
		i% := iTargetPoint%;
	else
		i% := aTargets[iTargetPoint%];
	endif

	ang := twopi/starNumTargets% * i% + starTargetRotation * twopi / 360.0;
	
	x := FixationX + (TargetX - FixationX) * Cos(ang) - (TargetY - FixationY) * Sin(ang);
	return x;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetTargetY()
	var twopi;
	var ang;
	var y;
	var i%;
	twopi := 2.0*4.0*ATan(1.0);

	if (starRandomize% = 0) then 
		i% := iTargetPoint%;
	else
		i% := aTargets[iTargetPoint%];
	endif

	ang := twopi/starNumTargets% * i% + starTargetRotation * twopi / 360.0;
	
	y := FixationY + (TargetX - FixationX) * Sin(ang) + (TargetY - FixationY) * Cos(ang);
	return y;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc AdvanceTarget()

	SampleKey("a");
	iTargetPoint%+=1;
	if (starRandomize% = 0) then
		if (iTargetPoint% = starNumTargets%) then
			iTargetPoint% := 0;
		endif
	else
		if (iTargetPoint% = numRandomTargets%) then
			iTargetPoint% := 0;
		endif
	endif

end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
	var i;
	for i:=1 to JuicePerReward% do Yield(.05); SampleKey("J"); next
	return 1;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc WriteParameterFile()
	var parFileName$;
	var parFileBase$;
	var parHandle%;

	' get filename for parfile (data file + "par" extension) and open it
	View(DataWindow%);
	parFileBase$ := FileName$(1) + FileName$(2) + FileName$(3) + FileName$(4);
	parFileName$ := parFileBase$ + ".par";
	PrintLog("par filename is " + parFileName$ + "\n");
	parHandle% := FileOpen(parFileName$, 8, 1);

	' write general info - eye coil gains, dist to screen
	Print("Stim parameters for %s\n\n", parFileBase$);

	Print("General information\n");
	Print("-------------------\n\n");
	Print("Distance to screen (MM)    : %s\n", DistanceToScreenMM$);
	Print("Eye coil software gain (X) : %f\n", DegreesPerVoltX);
	Print("Eye coil software gain (Y) : %f\n", DegreesPerVoltY);
	Print("Eye coil sampling freq (Hz): %d\n", EyeCoilSamplingFrequency%);
	Print("Number of electrodes       : %d\n", NumberOfElectrodes%);
	Print("Juices per reward          : %d\n", JuicePerReward%);

	' write fixpoint parameters
	Print("\nFixation point\n");
	Print("-------------------\n\n");
	Print("Window radius              : %f\n", WindowRadius);
	Print("Position (x, degrees)      : %f\n", FixationX);
	Print("Position (y, degrees)      : %f\n", FixationY);
	Print("Diameter (degrees)         : %f\n", FixationDiameter);
	Print("Color                      : %s\n", FixationColor$);

	' write stimulus parameters
	Print("\nTargets\n");
	Print("-------------------\n\n");
	Print("Number of Targets          : %d\n", starNumTargets%);

	iTargetPoint% := 0;
	var i%;
	for i%:= 0 to starNumTargets%-1 do
		Print("Position %d (%f, %f)\n", i%, GetTargetX(), GetTargetY());
		iTargetPoint% += 1;
	next;

	Print("\nExperimental parameters\n");
	Print("-------------------------\n\n");

	Print("Acquisition time (s)   : %f\n", starAcquisitionTime);
	Print("Fixation time(s)       : %f\n", starFixationDuration);
	Print("Answer time (s)        : %f\n", starAnswerTime);
	Print("Inter trial time (s)   : %f\n", starInterTrialTime);
	Print("Randomized target order? ");
	if (starRandomize% = 1) then
		Print("YES\n");
	else
		Print("NO\n");
	endif

	' close parfile
	FileClose(0);

end;




