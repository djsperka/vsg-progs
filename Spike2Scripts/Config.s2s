
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration START
'	
'	Fetch the current configuration from the registry and return it. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetCurrentConfiguration$()
	var key$;
	var s$;
	key$:="AlertRig";
	Profile(key$, "CurrentConfiguration", "default", s$);
	return s$;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''






''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Configuration Selection START
'
'	These functions and vars handle the current configuration and the list of possible
'	configurations. SelectConfigurationDialog% prompts user to select current configuration.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



var CurrentConfiguration$;
var ConfigurationList$;

proc GetConfigurationParameters()
	var rkey$;
	rkey$:="AlertRig";
	Profile(rkey$, "ConfigurationList", "", ConfigurationList$);
	Profile(rkey$, "CurrentConfiguration", "default", CurrentConfiguration$);
end;

proc SaveConfigurationParameters()
	var rkey$;
	rkey$:="AlertRig";
	Profile(rkey$, "ConfigurationList", ConfigurationList$);
	Profile(rkey$, "CurrentConfiguration", CurrentConfiguration$);
end;
	
func SelectConfigurationDialog%()
	var s$;
	var i%;
	var iReturn% := 0;
	GetConfigurationParameters();
	s$ := CurrentConfiguration$;

	DlgCreate("Select configuration", 25, 10);
	DlgString(1, "Configuration:", 20, "", 0, 0, ConfigurationList$);
	i% := DlgShow(s$);


	if i% = 1 then

		i% := CheckDup(s$, ConfigurationList$);
		if i% = 0 then
			' New config, add to Config list, set it to current
			if Len(ConfigurationList$)>0 then
				ConfigurationList$ := ConfigurationList$ + "|" + s$;
				CurrentConfiguration$ := s$;
			else
				ConfigurationList$ := s$;
				CurrentConfiguration$ := s$;
			endif;
		else
			CurrentConfiguration$ := s$;
		endif
		SaveConfigurationParameters();
		iReturn% := 1;

	else
		iReturn% := 0;
	endif

	return iReturn%;
end;

func CheckDup(value$, list$)
	var items$[20];
	var nitems%:=0;
	var i%;

	' Extract list into an array
	ReadSetup("", "", "", "", "|");
	nitems% := ReadStr(list$, items$);

	var s1tmp$, s2tmp$;
	s1tmp$ := UCase$(value$);
	for i% := 0 to nitems%-1 do
		s2tmp$ := UCase$(items$[i%]);
		if s1tmp$ = s2tmp$ then
			return 1;
		endif
	next

	return 0;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Configuration Selection END
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Data parameters START
'
'	Vars that control where data is stored. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var dataPathRoot$;		' base path for data storage
var dataDataSet$;		' folder under data path where data files placed
var dataCellName$;		' part of base name for all data files
var dataDataSetTextItem%;	' 

proc GetDataParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\Data";

	Profile(key$, "PathRoot", "C:\\Experiments", dataPathRoot$);
	Profile(key$, "DataSet", "", dataDataSet$);
	Profile(key$, "CellName", "", dataCellName$);
	return;
end;

proc SaveDataParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\Data";

	Profile(key$, "PathRoot", dataPathRoot$);
	Profile(key$, "DataSet", dataDataSet$);
	Profile(key$, "CellName", dataCellName$);
	return;
end;

func DataParametersDialog%()
	var i%;
	GetDataParameters();
	DlgCreate("Data Storage Parameters", 25, 10, 50);
	DlgText("Data root path: " + dataPathRoot$, 0, 1);
	dataDataSetTextItem% := DlgText("Data set name: " + dataDataSet$, 0, 2);
	DlgString(1, "Cell name:", 10, "", 0, 3);
        DlgButton(2, "New Data Set", NewDataSet%);
	i% := DlgShow(dataCellName$);
	if (i% = 1) then
		if Len(dataDataSet$) = 0 then
			Message("Must specify a data set (try the button!)");
		else
			if Len(dataCellName$) = 0 then
				Message("Must specify a cell name");
			else
				FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 0, 1);
				SaveDataParameters();
			endif;
		endif;
	endif;
	return i%;
end;


func NewDataSet%()
	var d$;
	var i%;
	var dirs$[100];	' if there are ever more than 100 datasets in a single day there will be trouble
	d$ := Date$(2, 2, 3, 3, "-");
	PrintLog("NewDataSet: date string = " + d$ + "\n");

	' Change current dir to data path root, then get list of subdirs with this date string
	PrintLog("NewDataSet: dataPathRoot$=" + dataPathRoot$ + "\n");
	FilePathSet(dataPathRoot$, 0, 1);
	i% := FileList(dirs$, -2, d$ + "-??");
        PrintLog("NewDataSet: found " + str$(i%) + " dirs\n");

	' form new dataset name. The first will have "-01" appended, the second "-02", etc. 
	dataDataSet$ := Print$("%s-%02d", d$, i%+1);
	PrintLog("NewDataSet: dataset= " + dataDataSet$ + "\n");
	DlgValue$(dataDataSetTextItem%, "Data set name: " + dataDataSet$);
	return 1;
end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Data parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Grating Dialogs (Distractors, Stimulus) START
'
'	These are functions that control the grating parameters stored in the registry. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''




func Distractor1Dialog%()
	GratingDialog("Distractor1");
	return 1;
end;

func Distractor2Dialog%()
	GratingDialog("Distractor2");
	return 1;
end;

func Distractor3Dialog%()
	GratingDialog("Distractor3");
	return 1;
end;

func Distractor4Dialog%()
	GratingDialog("Distractor4");
	return 1;
end;

func StimulusDialog%()
	GratingDialog("Stimulus");
	return 1;
end;

func GetGratingParameters$(type$)
	var key$;
	var stmp$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\Gratings";
	Profile(key$, type$, "", stmp$);
	return stmp$;
end;

func SaveGratingParameters(type$, gr$)
	var key$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\Gratings";
	Profile(key$, type$, gr$);
end;

proc GratingDialog(type$)

	var gr$;
	var i%;
	var x:=0;
	var y:=0;
	var w:=1;
	var h:=1;
	var contrast%:=100;
	var orientation:=0;
	var sf:=1;
	var tf:=1;
	var cv$:="b";
	var p$:="s";	' pattern
	var ap$:="e";	' aperture 



	var ColorVectorList$[4];
	var cvl$[4];
	var icvl%;
	ColorVectorList$[0]:="Black/White";	cvl$[0]:="b";
	ColorVectorList$[1]:="L cone";		cvl$[1]:="l";
	ColorVectorList$[2]:="M cone";		cvl$[2]:="m";
	ColorVectorList$[3]:="S cone";		cvl$[3]:="s";

	var PatternList$[2];
	var pl$[2];
	var ipl%;
	PatternList$[0]:="Sine";	pl$[0]:="s";
	PatternList$[1]:="Square";	pl$[1]:="q";

	var ApertureList$[2];
	var al$[2];
	var ial%;
	ApertureList$[0]:="Ellipse";	al$[0]:="e";
	ApertureList$[1]:="Rectangle";	al$[1]:="r";

	' Get the params for this grating from registry, then parse for the list boxes. 
	gr$ := GetGratingParameters$(type$);
	if gr$ <> "" then
		ReadSetup("", "", "", "", ",");
		i% := ReadStr(gr$, x, y, w, h, contrast%, sf, tf, orientation, cv$, p$, ap$);

		icvl%:=0;
		for i%:=0 to 3 do
			if cv$ = cvl$[i%] then icvl%:=i%; endif;
		next;

		ipl%:=0;
		for i%:=0 to 1 do
			if p$=pl$[i%] then ipl%:=i%; endif;
		next;

		ial%:=0;
		for i%:=0 to 1 do
			if ap$=al$[i%] then ial%:=i%; endif;
		next;

	endif

	DlgCreate("Grating parameters: " + type$, 25, 10);
	DlgReal(1, "X:", -40, 40);
	DlgReal(2, "Y:", -40, 40);
	DlgReal(3, "Width:", .1, 30);
	DlgReal(4, "Height:", .1, 30);
	DlgInteger(5, "Contrast(%):", 0, 100);
	DlgReal(6, "Spatial Freq:", .1, 10);
	DlgReal(7, "Temporal Freq:", 0, 10);
	DlgReal(8, "Orientation (degrees):", 0, 360);
	DlgList(9, "Color:", ColorVectorList$[]);
	DlgList(10, "Pattern:", PatternList$[]);
	DlgList(11, "Aperture:", ApertureList$[]);
	i% := DlgShow(x, y, w, h, contrast%, sf, tf, orientation, icvl%, ipl%, ial%);
	if i%=1 then
		cv$ := cvl$[icvl%];
		p$ := pl$[ipl%];
		ap$ := al$[ial%];
		' save parameters
		gr$ := Print$("%.1f,%.1f,%.1f,%.1f,%d,%.2f,%.2f,%.1f,%s,%s,%s", x, y, w, h, contrast%, sf, tf, orientation, cv$, p$, ap$);
		SaveGratingParameters(type$, gr$);
	endif

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Grating Dialogs (Distractors, Stimulus) END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''





''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Fixation Point parameters START
'
'	These vars and funcs control the parameters for the fixation point stored in the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



var WindowRadius;
var FixationX, FixationY;
var FixationColor$;
var iFixationColor%;
var FixationDiameter;
var FixationColorList$[3]; 
var FixationArg$;

proc GetFixationPointParameters()
	var stmp$;
	var key$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\FixationPoint";
	Profile(key$, "WindowRadius", "1", stmp$);
	WindowRadius := val(stmp$);

	Profile(key$, "FixationX", "0", stmp$);
	FixationX := val(stmp$);
	Profile(key$, "FixationY", "0", stmp$);
	FixationY := val(stmp$);
	Profile(key$, "FixationColor", "0", stmp$);
	iFixationColor% := val(stmp$);
	FixationColorList$[0]:="red"; 
	FixationColorList$[1]:="green"; 
	FixationColorList$[2]:="blue"; 
	FixationColor$ := FixationColorList$[iFixationColor%];

	Profile(key$, "FixationDiameter", "0.5", stmp$);
	FixationDiameter := val(stmp$);

	' Form the argument for applications. Convenience for passing args. 
	FixationArg$ := " -f " + str$(FixationX) + "," + str$(FixationY) + "," + str$(FixationDiameter) + "," + FixationColor$;
end;

proc SaveFixationPointParameters()
	var key$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\FixationPoint";
	Profile(key$, "WindowRadius", str$(WindowRadius));
	Profile(key$, "FixationX", str$(FixationX));
	Profile(key$, "FixationY", str$(FixationY));
	Profile(key$, "FixationColor", str$(iFixationColor%));
	Profile(key$, "FixationDiameter", str$(FixationDiameter));
end;


func FixationPointDialog%()

	var i%;
	GetFixationPointParameters();
	DlgCreate("Fixation parameters: " + GetCurrentConfiguration$(), 25, 10);
	DlgReal(1, "Fixation X:", -40, 40);
	DlgReal(2, "Fixation Y:", -40, 40);
	DlgReal(3, "Fixation diam:", .1, 5);
	DlgReal(4, "Window radius:", .1, 10);
	DlgList(5, "Color:", FixationColorList$[]);
	i% := DlgShow(FixationX, FixationY, FixationDiameter, WindowRadius, iFixationColor%);	

	' If user cancelled, reload params
	if i% = 0 then
		GetFixationPointParameters();
	else
		SaveFixationPointParameters();
	endif

	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Fixation Point parameters END
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Rig Daily Totals START
'
'	Control, display, reset daily totals for a rig.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


var TotalTrials%;
var TotalRewards%;
var TotalDate$;


proc GetDailyTotals()
	var key$;
	key$ := "AlertRig\\Daily";
	Profile(key$, "TotalDate", "", TotalDate$);
	Profile(key$, "TotalTrials", 0, TotalTrials%);
	Profile(key$, "TotalRewards", 0, TotalRewards%);

	' Get date string if needed
	if Len(TotalDate$) = 0 then
		TotalDate$ := GetDayString$();
		SaveDailyTotals();
	endif
end;

proc SaveDailyTotals()
	var key$;
	key$ := "AlertRig\\Daily";
	Profile(key$, "TotalDate", TotalDate$);
	Profile(key$, "TotalTrials", TotalTrials%);
	Profile(key$, "TotalRewards", TotalRewards%);
end;

func DailyTotalsDialog%()
	GetDailyTotals();
	DlgCreate("Daily Totals");
	DlgText("Date: " + TotalDate$, 0, 1);
	DlgText("Trials: " + str$(TotalTrials%), 0, 2);
	DlgText("Rewards: " + str$(TotalRewards%), 0, 3);
	DlgButton(2, "Reset", ResetDailyTotals%);
	DlgShow();
	return 1;
end;


func GetDayString$()
	return Date$(2, 1, 3, 2, "-");
end;


func ResetDailyTotals%()
	GetDailyTotals();
	TotalRewards%:=0;
	TotalTrials%:=0;
	TotalDate$:= GetDayString$();
	SaveDailyTotals();
        return 0;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Rig Daily Totals END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters START
'
'	Control of data acquisition parameters.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


var DistanceToScreenMM$;		' Distance to screen in MM
var DegreesPerVoltX;			' Conversion factor from ADC to visual degrees
var DegreesPerVoltY;			' Conversion factor from ADC to visual degrees
var EyeCoilSamplingFrequency%;		' Frequency to sample eye coil at
var NumberOfElectrodes%;		' Number of electrodes (i.e. wavemark inputs) in use
var JuicePerReward%;			' Number of juice squirts per reward
var DebugScripts%;			' Debug scripts and VSG apps (verbose messages)

func DAQParametersDialog%()

	var iReturn%;
	var idist%;

	GetDAQParameters();

	idist% := val(DistanceToScreenMM$);
	DlgCreate("DAQ parameters: " + GetCurrentConfiguration$(), 25, 10);
	DlgInteger(1, "Number of Electrodes:", 1, 7, 0, 0, 1);
	DlgInteger(2, "Screen Distance (MM):", 1, 5000);
	DlgReal(3, "Degrees/Volt (X):", 0, 100);
	DlgReal(4, "Degrees/Volt (Y):", 0, 100);
	DlgInteger(5, "Eye Coil Sampling Freq (Hz):", 1, 20000);
	DlgInteger(6, "Juice per reward:", 0, 10, 0, 0, 1);
	DlgCheck(7, "Verbose logging (debug)?");
	iReturn% := DlgShow(NumberOfElectrodes%, idist%, DegreesPerVoltX, DegreesPerVoltY, EyeCoilSamplingFrequency%, JuicePerReward%, DebugScripts%);

	if iReturn% = 1 then
		DistanceToScreenMM$ := str$(idist%);
		SaveDAQParameters();
	endif
	return iReturn%;
end;




	
proc GetDAQParameters()
	var key$;
	var DegreesPerVoltX$, DegreesPerVoltY$;

	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\DAQ";
	Profile(key$, "DistanceToScreenMM", "850", DistanceToScreenMM$);	' will just pass this to stimulus app
	Profile(key$, "DegreesPerVoltX", "", DegreesPerVoltX$);
	Profile(key$, "DegreesPerVoltY", "", DegreesPerVoltY$);
	Profile(key$, "EyeCoilSamplingFrequency", 1000, EyeCoilSamplingFrequency%);
	Profile(key$, "NumberOfElectrodes", 1, NumberOfElectrodes%);
	Profile(key$, "JuicePerReward", 1, JuicePerReward%);
	Profile(key$, "DebugScripts", 0, DebugScripts%);
	DegreesPerVoltX := val(DegreesPerVoltX$);
	DegreesPerVoltY := val(DegreesPerVoltY$);

end;

proc SaveDAQParameters()
	var key$;
	var DegreesPerVoltX$, DegreesPerVoltY$;
	DegreesPerVoltX$ := str$(DegreesPerVoltX);
	DegreesPerVoltY$ := str$(DegreesPerVoltY);
	
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\DAQ";
	Profile(key$, "DistanceToScreenMM", DistanceToScreenMM$);
	Profile(key$, "DegreesPerVoltX", DegreesPerVoltX$);
	Profile(key$, "DegreesPerVoltY", DegreesPerVoltY$);
	Profile(key$, "EyeCoilSamplingFrequency", EyeCoilSamplingFrequency%);
	Profile(key$, "NumberOfElectrodes", NumberOfElectrodes%);
	Profile(key$, "JuicePerReward", JuicePerReward%);
	Profile(key$, "DebugScripts", DebugScripts%);

end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''






'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Fixation script parameters START
'
'	Vars that control the fixation script. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Fixation-script specific control vars.
var fixFixationDuration;			' Time required to maintain fixation, seconds
var fixAcquisitionTime;			' Time allowed to acquire target before fail trial, seconds
var fixInterTrialTime;			' Blank time following a trial (both successful and failed), seconds
var fixNumberOfTrials%;			' Number of trials to run
var fixStimulusFlag%;			' Tells whether to use stimulus grating (used as a distractor) 
var fixDistractor1Flag%; 			' Tells stim to use distractor1 (1) or not (0)
var fixDistractor2Flag%; 			' Tells stim to use distractor1 (1) or not (0)
var fixDistractor3Flag%; 			' Tells stim to use distractor1 (1) or not (0)
var fixDistractor4Flag%; 			' Tells stim to use distractor1 (1) or not (0)
var fixBackgroundColor$;			' Background color for stim
var fixCalibrationFlag%;			' 1 for calibration run
var fixCalibrationOffset;			' degree offset for calibration dots
proc GetFixationScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Fixation";

	Profile(key$, "FixationDuration", "1.0", stmp$);
	fixFixationDuration := val(stmp$);

	Profile(key$, "AcquisitionTime", "1.0", stmp$);
	fixAcquisitionTime := val(stmp$);

	Profile(key$, "InterTrialTime", "1.0", stmp$);
	fixInterTrialTime := val(stmp$);

	Profile(key$, "NumberOfTrials", 1, fixNumberOfTrials%);
	Profile(key$, "BackgroundColor", "gray", fixBackgroundColor$);

	Profile(key$, "UseStimulusFlag", 0, fixStimulusFlag%);
	Profile(key$, "UseDistractor1Flag", 0, fixDistractor1Flag%);
	Profile(key$, "UseDistractor2Flag", 0, fixDistractor2Flag%);
	Profile(key$, "UseDistractor3Flag", 0, fixDistractor3Flag%);
	Profile(key$, "UseDistractor4Flag", 0, fixDistractor4Flag%);
	Profile(key$, "DoCalibrationFlag", 0, fixCalibrationFlag%);
	Profile(key$, "CalibrationOffset", "5.0", stmp$);
	fixCalibrationOffset := val(stmp$);
end;
 	
proc SaveFixationScriptParameters()
	var stmp$;
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Fixation";

	Profile(key$, "FixationDuration", str$(fixFixationDuration));
	Profile(key$, "AcquisitionTime", str$(fixAcquisitionTime));
	Profile(key$, "InterTrialTime", str$(fixInterTrialTime));
	Profile(key$, "NumberOfTrials", fixNumberOfTrials%);
	Profile(key$, "BackgroundColor", fixBackgroundColor$);
	Profile(key$, "UseStimulusFlag", fixStimulusFlag%);
	Profile(key$, "UseDistractor1Flag", fixDistractor1Flag%);
	Profile(key$, "UseDistractor2Flag", fixDistractor2Flag%);
	Profile(key$, "UseDistractor3Flag", fixDistractor3Flag%);
	Profile(key$, "UseDistractor4Flag", fixDistractor4Flag%);
	Profile(key$, "DoCalibrationFlag", fixCalibrationFlag%);
	Profile(key$, "CalibrationOffset", str$(fixCalibrationOffset));
end;



func FixationScriptDialog%()
	var i%;
	var bcl$[3];
	var ibcl%:=0;
	GetFixationScriptParameters();
	bcl$[0] := "gray";
	bcl$[1] := "black";
	bcl$[2] := "white";
	for i%:=0 to 2 do
		if fixBackgroundColor$ = bcl$[i%] then
			ibcl% := i%;
		endif
	next;
	DlgCreate("Fixation Training Parameters", 25, 10);
	DlgReal(1, "Fixation duration(s):", .01, 10);
	DlgReal(2, "Acquisition time(s):", .01, 10);
	DlgReal(3, "Intertrial time(s):", .01, 10);
	DlgInteger(4, "Number of Trials:", 1, 1000);
	DlgList(5, "Background color:", bcl$);
	DlgCheck(6, "Use stimulus?");
	DlgCheck(7, "Use distractor 1?");
	DlgCheck(8, "Use distractor 2?");
	DlgCheck(9, "Use distractor 3?");
	DlgCheck(10, "Use distractor 4?");
	DlgCheck(11, "Calibration run?");
	DlgReal(12, "Calibration offset (deg):", 0, 10);
	i%:=DlgShow(fixFixationDuration, fixAcquisitionTime, fixInterTrialTime, fixNumberOfTrials%, ibcl%, fixStimulusFlag%, fixDistractor1Flag%, fixDistractor2Flag%, fixDistractor3Flag%, fixDistractor4Flag%, fixCalibrationFlag%, fixCalibrationOffset);
	if i% = 1 then
		fixBackgroundColor$ := bcl$[ibcl%];
		SaveFixationScriptParameters();
	endif;
	return 1;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Fixation script END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Msequence script parameters START
'
'	Vars that control the alert msequence script. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
var msqFixationDuration;			' Time required to maintain fixation, seconds
var msqAcquisitionTime;			' Time allowed to acquire target before fail trial, seconds
var msqInterTrialTime;			' Blank time following a trial (both successful and failed), seconds
var msqDotSize%;					' dot size (pixels)
var msqSegmentLength%;			' Terms in a segment of the msequence
var msqFramesPerTerm%;			' frames that each msequence term is shown

proc GetMSequenceScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\MSequence";

	Profile(key$, "FixationDuration", "1.0", stmp$);
	msqFixationDuration := val(stmp$);

	Profile(key$, "AcquisitionTime", "1.0", stmp$);
	msqAcquisitionTime := val(stmp$);

	Profile(key$, "InterTrialTime", "1.0", stmp$);
	msqInterTrialTime := val(stmp$);

	Profile(key$, "DotSize", 4, msqDotSize%);
	Profile(key$, "SegmentLength", 100, msqSegmentLength%);
	Profile(key$, "FramesPerTerm", 1, msqFramesPerTerm%);
	
end;
 	
proc SaveMSequenceScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\MSequence";

	Profile(key$, "FixationDuration", str$(msqFixationDuration));
	Profile(key$, "AcquisitionTime", str$(msqAcquisitionTime));
	Profile(key$, "InterTrialTime", str$(msqInterTrialTime));
	Profile(key$, "DotSize", msqDotSize%);
	Profile(key$, "SegmentLength", msqSegmentLength%);
	Profile(key$, "FramesPerTerm", msqFramesPerTerm%);
end;



func MSequenceScriptDialog%()
	var i%;
	GetMSequenceScriptParameters();
	DlgCreate("MSequence Script Parameters", 25, 10);
	DlgReal(1, "Fixation duration(s):", .01, 10);
	DlgReal(2, "Acquisition time(s):", .01, 10);
	DlgReal(3, "Intertrial time(s):", .01, 10);
	DlgInteger(4, "Dot Size(pixels):", 4, 28);
	DlgInteger(5, "Segment length (terms):", 1, 32767);
	DlgInteger(6, "Frames per term:", 1, 100);
	i%:=DlgShow(msqFixationDuration, msqAcquisitionTime, msqInterTrialTime, msqDotSize%, msqSegmentLength%, msqFramesPerTerm%);
	if i% = 1 then
		PrintLog("Saving params\n");
		SaveMSequenceScriptParameters();
	endif;
	return 1;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' MSequence script END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Contrast Reverse Grating script parameters START
'
'	Vars that control the contrast reverse grating script. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
var crgFixationDuration;			' Time required to maintain fixation, seconds
var crgAcquisitionTime;			' Time allowed to acquire target before fail trial, seconds
var crgInterTrialTime;			' Blank time following a trial (both successful and failed), seconds
var crgSegmentLength%;			' Terms in a segment of the msequence
var crgFramesPerTerm%;			' frames that each msequence term is shown
var crgContrast%;			' High contrast value
var crgSF;							' spatial frequency (not necessarily same as that in stimulus)
var crgDiameter;					' aperture diameter

proc GetCRGScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\ContrastReverse";

	Profile(key$, "FixationDuration", "1.0", stmp$);
	crgFixationDuration := val(stmp$);

	Profile(key$, "AcquisitionTime", "1.0", stmp$);
	crgAcquisitionTime := val(stmp$);

	Profile(key$, "InterTrialTime", "1.0", stmp$);
	crgInterTrialTime := val(stmp$);

	Profile(key$, "SegmentLength", 100, crgSegmentLength%);
	Profile(key$, "FramesPerTerm", 1, crgFramesPerTerm%);
	Profile(key$, "Contrast", 100, crgContrast%);

	Profile(key$, "SF", "1.0", stmp$);
	crgSF := val(stmp$);
	Profile(key$, "Diameter", "4.0", stmp$);
	crgDiameter := val(stmp$);

end;
 	
proc SaveCRGScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\ContrastReverse";

	Profile(key$, "FixationDuration", str$(crgFixationDuration));
	Profile(key$, "AcquisitionTime", str$(crgAcquisitionTime));
	Profile(key$, "InterTrialTime", str$(crgInterTrialTime));
	Profile(key$, "SegmentLength", crgSegmentLength%);
	Profile(key$, "FramesPerTerm", crgFramesPerTerm%);
	Profile(key$, "ContrastHigh", crgContrast%);
	Profile(key$, "SF", str$(crgSF));
	Profile(key$, "Diameter", str$(crgDiameter));
end;



func CRGScriptDialog%()
	var i%;
	GetCRGScriptParameters();
	DlgCreate("CRG Script Parameters", 25, 10);
	DlgReal(1, "Fixation duration(s):", .01, 10);
	DlgReal(2, "Acquisition time(s):", .01, 10);
	DlgReal(3, "Intertrial time(s):", .01, 10);
	DlgInteger(4, "Segment length (terms):", 1, 32767);
	DlgInteger(5, "Frames per term:", 1, 100);
	DlgInteger(6, "Contrast (%):", -100, 100);
	DlgReal(7, "Spatial frequency:", .01, 100);
	DlgReal(8, "Diameter(deg):", .01, 100);
	i%:=DlgShow(crgFixationDuration, crgAcquisitionTime, crgInterTrialTime, crgSegmentLength%, crgFramesPerTerm%, crgContrast%, crgSF, crgDiameter);
	if i% = 1 then
		PrintLog("Saving params\n");
		SaveCRGScriptParameters();
	endif;
	return 1;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' CRG script END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''











'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' 	Attention script START
'
'	Vars that control the Attention script. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var attNumberOfBlocks%;
var attCatchTrialPercentage;
var attBackgroundColor$;
var attContrastBase%;
var attContrastUp%;
var attContrastDown%;
var attFixationDuration;
var attAcquisitionTime;
var attInterTrialTime;
var attGratingDelay;
var attContrastDelay;
var attAnswerPointDelay;
var attRandomFixationOffset;
var attTimeToAnswer;
var attStimulusFlag%;			' Tells whether to use stimulus grating (used as a distractor) 
var attDistractor1Flag%; 			' Tells stim to use distractor1 (1) or not (0)
var attDistractor2Flag%; 			' Tells stim to use distractor1 (1) or not (0)
var attDistractor3Flag%; 			' Tells stim to use distractor1 (1) or not (0)
var attDistractor4Flag%; 			' Tells stim to use distractor1 (1) or not (0)

proc GetAttentionScriptParameters()
	var stmp$;
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Attention";

	Profile(key$, "NumberOfBlocks", 1, attNumberOfBlocks%);

	Profile(key$, "CatchTrialPercentage", "0.0", stmp$);
	attCatchTrialPercentage := val(stmp$);

	Profile(key$, "BackgroundColor", "gray", attBackgroundColor$);
	Profile(key$, "ContrastBase", 50, attContrastBase%);
	Profile(key$, "ContrastUp", 80, attContrastUp%);
	Profile(key$, "ContrastDown", 20, attContrastDown%);

	Profile(key$, "FixationDuration", "1.0", stmp$);
	attFixationDuration := val(stmp$);

	Profile(key$, "AcquisitionTime", "1.0", stmp$);
	attAcquisitionTime := val(stmp$);

	Profile(key$, "InterTrialTime", "1.0", stmp$);
	attInterTrialTime := val(stmp$);

	Profile(key$, "GratingDelay", "1.0", stmp$);
	attGratingDelay := val(stmp$);

	Profile(key$, "ContrastDelay", "1.0", stmp$);
	attContrastDelay := val(stmp$);

	Profile(key$, "AnswerPointDelay", "1.0", stmp$);
	attAnswerPointDelay := val(stmp$);

	Profile(key$, "RandomFixationOffset", "1.0", stmp$);
	attRandomFixationOffset := val(stmp$);

	Profile(key$, "TimeToAnswer", "1.0", stmp$);
	attTimeToAnswer := val(stmp$);

	Profile(key$, "UseStimulusFlag", 0, attStimulusFlag%);
	Profile(key$, "UseDistractor1Flag", 0, attDistractor1Flag%);
	Profile(key$, "UseDistractor2Flag", 0, attDistractor2Flag%);
	Profile(key$, "UseDistractor3Flag", 0, attDistractor3Flag%);
	Profile(key$, "UseDistractor4Flag", 0, attDistractor4Flag%);
end;

proc SaveAttentionScriptParameters()
	var key$;
	var stmp$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Attention";

	Profile(key$, "NumberOfBlocks", attNumberOfBlocks%);
	Profile(key$, "CatchTrialPercentage", str$(attCatchTrialPercentage));
	Profile(key$, "BackgroundColor", attBackgroundColor$);
	Profile(key$, "ContrastBase", attContrastBase%);
	Profile(key$, "ContrastUp", attContrastUp%);
	Profile(key$, "ContrastDown", attContrastDown%);
	Profile(key$, "FixationDuration", str$(attFixationDuration));
	Profile(key$, "AcquisitionTime", str$(attAcquisitionTime));
	Profile(key$, "InterTrialTime", str$(attInterTrialTime));
	Profile(key$, "GratingDelay", str$(attGratingDelay));
	Profile(key$, "ContrastDelay", str$(attContrastDelay));
	Profile(key$, "AnswerPointDelay", str$(attAnswerPointDelay));
	Profile(key$, "RandomFixationOffset", str$(attRandomFixationOffset));
	Profile(key$, "TimeToAnswer", str$(attTimeToAnswer));
	Profile(key$, "UseStimulusFlag", attStimulusFlag%);
	Profile(key$, "UseDistractor1Flag", attDistractor1Flag%);
	Profile(key$, "UseDistractor2Flag", attDistractor2Flag%);
	Profile(key$, "UseDistractor3Flag", attDistractor3Flag%);
	Profile(key$, "UseDistractor4Flag", attDistractor4Flag%);
end;

func AttentionScriptDialog%()
	var i%;
	var bcl$[3];
	var ibcl%:=0;
	GetAttentionScriptParameters();
	bcl$[0] := "gray";
	bcl$[1] := "black";
	bcl$[2] := "white";
	for i%:=0 to 2 do
		if attBackgroundColor$ = bcl$[i%] then
			ibcl% := i%;
		endif
	next;
	DlgCreate("Attention Training Parameters", 25, 10);
	DlgReal(1, "Fixation duration(s):", .01, 10);
	DlgReal(2, "Acquisition time(s):", .01, 10);
	DlgReal(3, "Intertrial time(s):", .01, 10);

	DlgReal(4, "Grating delay(s):", .01, 10);
	DlgReal(5, "Contrast delay(s):", .01, 10);
	DlgReal(6, "Answer point delay(s):", .01, 10);
	DlgReal(7, "Random fixation offset(s):", 0.0, 10.0);
	DlgReal(8, "Time to answer(s):", 0.01, 10.0);

	DlgInteger(9, "Number of Blocks:", 1, 1000);
	DlgReal(10, "Catch Trial pct (0-100)", 0, 100);
	DlgList(11, "Background color:", bcl$);
	DlgInteger(12, "Base contrast(%)", 0, 100);
	DlgInteger(13, "Up contrast(%)", 0, 100);
	DlgInteger(14, "Down contrast(%)", 0, 100);
	DlgCheck(15, "Use Confounder?");
	DlgCheck(16, "Use distractor 2?");
	DlgCheck(17, "Use distractor 3?");
	DlgCheck(18, "Use distractor 4?");
	i%:=DlgShow(attFixationDuration, attAcquisitionTime, attInterTrialTime, 
		attGratingDelay, attContrastDelay, attAnswerPointDelay, attRandomFixationOffset, attTimeToAnswer,
		attNumberOfBlocks%, attCatchTrialPercentage, ibcl%,
		attContrastBase%, attContrastUp%, attContrastDown%, 
		attDistractor1Flag%, attDistractor2Flag%, attDistractor3Flag%, attDistractor4Flag%);
	if i% = 1 then
		attBackgroundColor$ := bcl$[ibcl%];
		SaveAttentionScriptParameters();
	endif;
	return 1;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Attention script END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Tuning Curve script START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var tunFixationDuration;	' Time required to hold fixation for reward (stim ON)
var tunMaintainFixation;	' Time required to hold fixation for reward (stim OFF)
var tunTimeOutTime;		' Time after break fixation
var tunAcquisitionTime;		' Time allowed to acquire fixation
var tunBackgroundColor$;	' background color for stim

' These will be set by the tuning curve choice
var tunNAdvances%;		' Number of times stim will advance during one repeat
var tunNRepeats%;		' Number of repeats

' These are specific to the individual tuning curve types - orientation first
var tunOriNSteps%;		' # steps in orientation tuning curve
var tunOriNRepeats%;		' # repeats in ori tuning curve
var tunOriMinOrientation;	' min orientation
var tunOriMaxOrientation;	' max orientation
var tunOriProgression%;

' Contrast next
var tunContrastNSteps%;			' # steps in contrast tuning curve
var tunContrastNRepeats%;		' # repeats in contrast tuning curve
var tunContrastMinContrast;		' min contrast
var tunContrastMaxContrast;		' max contrast
var tunContrastProgression%;

' Spatial next
var tunSpatialNSteps%;			' # steps in spatial freq tuning curve
var tunSpatialNRepeats%;		' # repeats in spatial freq tuning curve
var tunSpatialMinSF;			' min SF
var tunSpatialMaxSF;			' max SF
var tunSpatialProgression%;

' Temporal next
var tunTemporalNSteps%;			' # steps in temporal tuning curve
var tunTemporalNRepeats%;		' # repeats in temporal tuning curve
var tunTemporalMinTF;		' min TF
var tunTemporalMaxTF;		' max TF
var tunTemporalProgression%;

const tunTypeNone$ := "None";
const tunTypeOrientation$ := "O";
const tunTypeContrast$ := "C";
const tunTypeSpatial$ := "S";
const tunTypeTemporal$ := "T";
var tunType$:=tunTypeNone$;

const tunContextDAQ$ := "DAQ";
const tunContextConfig$ := "Config";
var tunContext$ := tunContextConfig$;

proc GetTuningCurveScriptParameters()
	var stmp$;
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning";

	Profile(key$, "FixationDuration", "2.0", stmp$);
	tunFixationDuration := val(stmp$);
	Profile(key$, "MaintainFixation", "2.0", stmp$);
	tunMaintainFixation := val(stmp$);
	Profile(key$, "TimeOutTime", "2.0", stmp$);
	tunTimeOutTime := val(stmp$);
	Profile(key$, "AcquisitionTime", "2.0", stmp$);
	tunAcquisitionTime := val(stmp$);
	Profile(key$, "BackgroundColor", "gray", tunBackgroundColor$);
end;

proc SaveTuningCurveScriptParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning";
	Profile(key$, "FixationDuration", str$(tunFixationDuration));
	Profile(key$, "MaintainFixation", str$(tunMaintainFixation));
	Profile(key$, "TimeOutTime", str$(tunTimeOutTime));
	Profile(key$, "AcquisitionTime", str$(tunAcquisitionTime));
	Profile(key$, "BackgroundColor", tunBackgroundColor$);
end;

proc GetTuningCurveOrientationParameters()
	var stmp$;
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning\\Orientation";

	Profile(key$, "NSteps", 2, tunOriNSteps%);
	Profile(key$, "NRepeats", 1, tunOriNRepeats%);
	Profile(key$, "MinOrientation", "0", stmp$);
	tunOriMinOrientation := val(stmp$);
	Profile(key$, "MaxOrientation", "360", stmp$);
	tunOriMaxOrientation := val(stmp$);
end;

proc SaveTuningCurveOrientationParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning\\Orientation";
	Profile(key$, "NSteps", tunOriNSteps%);
	Profile(key$, "NRepeats", tunOriNRepeats%);
	Profile(key$, "MinOrientation", str$(tunOriMinOrientation));
	Profile(key$, "MaxOrientation", str$(tunOriMaxOrientation));
end;

proc GetTuningCurveContrastParameters()
	var stmp$;
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning\\Contrast";

	Profile(key$, "NSteps", 2, tunContrastNSteps%);
	Profile(key$, "NRepeats", 1, tunContrastNRepeats%);
	Profile(key$, "MinContrast", "0", stmp$);
	tunContrastMinContrast := val(stmp$);
	Profile(key$, "MaxContrast", "100", stmp$);
	tunContrastMaxContrast := val(stmp$);
end;

proc SaveTuningCurveContrastParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning\\Contrast";
	Profile(key$, "NSteps", tunContrastNSteps%);
	Profile(key$, "NRepeats", tunContrastNRepeats%);
	Profile(key$, "MinContrast", str$(tunContrastMinContrast));
	Profile(key$, "MaxContrast", str$(tunContrastMaxContrast));
end;

proc GetTuningCurveSpatialParameters()
	var stmp$;
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning\\Spatial";

	Profile(key$, "NSteps", 2, tunSpatialNSteps%);
	Profile(key$, "NRepeats", 1, tunSpatialNRepeats%);
	Profile(key$, "MinSF", "0.2", stmp$);
	tunSpatialMinSF := val(stmp$);
	Profile(key$, "MaxSF", "10", stmp$);
	tunSpatialMaxSF := val(stmp$);
end;

proc SaveTuningCurveSpatialParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning\\Spatial";

	Profile(key$, "NSteps", tunSpatialNSteps%);
	Profile(key$, "NRepeats", tunSpatialNRepeats%);
	Profile(key$, "MinSF", str$(tunSpatialMinSF));
	Profile(key$, "MaxSF", str$(tunSpatialMaxSF));
end;

proc GetTuningCurveTemporalParameters()
	var stmp$;
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning\\Temporal";

	Profile(key$, "NSteps", 2, tunTemporalNSteps%);
	Profile(key$, "NRepeats", 1, tunTemporalNRepeats%);
	Profile(key$, "MinTF", "0.1", stmp$);
	tunTemporalMinTF := val(stmp$);
	Profile(key$, "MaxTF", "100", stmp$);
	tunTemporalMaxTF := val(stmp$);
end;

proc SaveTuningCurveTemporalParameters()
	var key$;
	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\Tuning\\Temporal";

	Profile(key$, "NSteps", tunTemporalNSteps%);
	Profile(key$, "NRepeats", tunTemporalNRepeats%);
	Profile(key$, "MinTF", str$(tunTemporalMinTF));
	Profile(key$, "MaxTF", str$(tunTemporalMaxTF));
end;




func TuningCurveOrientationDialog%()
	var iReturn%;
	var i%;
	GetTuningCurveOrientationParameters();
	DlgCreate("Run Orientation Tuning Curve");
	DlgInteger(1, "Number of Steps", 2, 100);
	DlgInteger(2, "Number of Repeats", 1, 10);
	DlgReal(3, "Min Orientation (deg)", 0, 360);
	DlgReal(4, "Max Orientation (deg)", 0, 360);
	DlgCheck(5, "Random Progression");
	i% := DlgShow(tunOriNSteps%, tunOriNRepeats%, tunOriMinOrientation, tunOriMaxOrientation, tunOriProgression%);

	' If i% is 1 the user hit "OK". If its 0, user hit "Cancel". 
	' When user hits OK we alwaus save the parameters, and when user hit Cancel we don't.
	if i% = 1 then
		SaveTuningCurveOrientationParameters();
'		PrintLog("TuningCurveOrientationDialog - user hit OK\n");
		tunType$ := tunTypeOrientation$;
		if tunContext$ = tunContextDAQ$ then
			iReturn% := 0;
		else
			iReturn% := 1;
		endif;
	endif;
	if i% = 0 then
'		PrintLog("TuningCurveOrientationDialog - user hit Cancel\n");
		tunType$ := tunTypeNone$;
		if tunContext$ = tunContextDAQ$ then
			iReturn% := 1;
		else
			iReturn% := 2;
		endif;
	endif;

	return iReturn%;
end;



func TuningCurveContrastDialog%()
	var iReturn% := 0;
	var i%;
	GetTuningCurveContrastParameters();
	DlgCreate("Contrast Tuning Curve Parameters");
	DlgInteger(1, "Number of Steps", 2, 100);
	DlgInteger(2, "Number of Repeats", 1, 10);
	DlgReal(3, "Min Contrast (%)", 0, 100);
	DlgReal(4, "Max Contrast (%)", 0, 100);
	DlgCheck(5, "Random Progression");

	i% := DlgShow(tunContrastNSteps%, tunContrastNRepeats%, tunContrastMinContrast, tunContrastMaxContrast, tunContrastProgression%);
	' If i% is 1 the user hit "OK". If its 0, user hit "Cancel". 
	' When user hits OK we alwaus save the parameters, and when user hit Cancel we don't.
	if i% = 1 then
		SaveTuningCurveContrastParameters();
'		PrintLog("TuningCurveContrastDialog - user hit OK\n");
		tunType$ := tunTypeContrast$;
		if tunContext$ = tunContextDAQ$ then
			iReturn% := 0;
		else
			iReturn% := 1;
		endif;
	endif;
	if i% = 0 then
'		PrintLog("TuningCurveContrastDialog - user hit Cancel\n");
		tunType$ := tunTypeNone$;
		if tunContext$ = tunContextDAQ$ then
			iReturn% := 1;
		else
			iReturn% := 2;
		endif;
	endif;

	return iReturn%;
end;

func TuningCurveSpatialDialog%()
	var iReturn% := 0;
	var i%;
	GetTuningCurveSpatialParameters();
	DlgCreate("Spatial Freq Tuning Curve Parameters");
	DlgInteger(1, "Number of Steps", 2, 100);
	DlgInteger(2, "Number of Repeats", 1, 10);
	DlgReal(3, "Min SF", .1, 10);
	DlgReal(4, "Max SF", .1, 10);
	DlgCheck(5, "Random Progression");

	i% := DlgShow(tunSpatialNSteps%, tunSpatialNRepeats%, tunSpatialMinSF, tunSpatialMaxSF, tunSpatialProgression%);
	' If i% is 1 the user hit "OK". If its 0, user hit "Cancel". 
	' When user hits OK we alwaus save the parameters, and when user hit Cancel we don't.
	if i% = 1 then
		SaveTuningCurveSpatialParameters();
'		PrintLog("TuningCurveSpatialDialog - user hit OK\n");
		tunType$ := tunTypeSpatial$;
		if tunContext$ = tunContextDAQ$ then
			iReturn% := 0;
		else
			iReturn% := 1;
		endif;
	endif;
	if i% = 0 then
'		PrintLog("TuningCurveSpatialDialog - user hit Cancel\n");
		tunType$ := tunTypeNone$;
		if tunContext$ = tunContextDAQ$ then
			iReturn% := 1;
		else
			iReturn% := 2;
		endif;
	endif;

	return iReturn%;
end;

func TuningCurveTemporalDialog%()
	var iReturn% := 0;
	var i%;
	GetTuningCurveTemporalParameters();
	DlgCreate("Temporal Freq Tuning Curve Parameters");
	DlgInteger(1, "Number of Steps", 2, 100);
	DlgInteger(2, "Number of Repeats", 1, 10);
	DlgReal(3, "Min TF", 0, 10);
	DlgReal(4, "Max TF", 0, 100);
	DlgCheck(5, "Random Progression");

	i% := DlgShow(tunTemporalNSteps%, tunTemporalNRepeats%, tunTemporalMinTF, tunTemporalMaxTF, tunTemporalProgression%);
	' If i% is 1 the user hit "OK". If its 0, user hit "Cancel". 
	' When user hits OK we alwaus save the parameters, and when user hit Cancel we don't.
	if i% = 1 then
		SaveTuningCurveTemporalParameters();
'		PrintLog("TuningCurveTemporalDialog - user hit OK\n");
		tunType$ := tunTypeTemporal$;
		if tunContext$ = tunContextDAQ$ then
			iReturn% := 0;
		else
			iReturn% := 1;
		endif;
	endif;
	if i% = 0 then
'		PrintLog("TuningCurveTemporalDialog - user hit Cancel\n");
		tunType$ := tunTypeNone$;
		if tunContext$ = tunContextDAQ$ then
			iReturn% := 1;
		else
			iReturn% := 2;
		endif;
	endif;

	return iReturn%;
end;



' TuningCurveScriptDialog
' This dialog uses two global variables, tunContext$ and tunType$. 
' Set tunContext$ = tunContextConfig$ to run in the config scripts. The dialog and its children (TuningCurveOrientationDialog, etc)
' will behave as expected, allowing the user to set parameters and saving them in the registry. 
' Set tunContext$ = tunContextDAQ$ to run in a DAQ script. In this context you must check the return value of the dialog and (possibly)
' the value of tunType$.
' If the user hits Cancel in the main dialog, the return value is 0. If the user selects a subdialog and hits OK, the return value will be
' 1 and the value of tunType$ will be one of (tunTypeOrientation$, tunTypeContrast$, tunTypeSpatial$, tunTypeTemporal$). Here, proceed directly
' to DAQ. If the user Hits Cancel from the subdialog, then they return to the main dialog. If they hit OK from the main dialog, then the return 
' value is 1, but tunType$ = tunTypeNone$. 


func TuningCurveScriptDialog%()
	var i%;
	var iReturn%;
	GetTuningCurveScriptParameters();
	var bcl$[3];
	var ibcl%:=0;
	bcl$[0] := "gray";
	bcl$[1] := "black";
	bcl$[2] := "white";
	for i%:=0 to 2 do
		if tunBackgroundColor$ = bcl$[i%] then
			ibcl% := i%;
		endif
	next;

	DlgCreate("Tuning Curve Parameters", 50, 10);
	DlgGroup("Common Parameters", 0, 1, 40, 6);
	DlgReal(1, "Acquisition time(s):", 1, 1000, 20, 2);
	DlgReal(2, "Fixation duration(s):", .1, 10, 20, 3);
	DlgReal(3, "Maintain fixation(s):", .1, 10, 20, 4);
	DlgReal(4, "Time out time(s):", .01, 10, 20, 5);
	DlgList(5, "Background color:", bcl$, 3, 20, 6);
	DlgGroup("Individual Tuning Curve Types", 0, 7, 40, 5);
	DlgButton(6, "Orientation", TuningCurveOrientationDialog%, 1, 8);
	DlgButton(7, "Contrast", TuningCurveContrastDialog%, 1, 9);
	DlgButton(8, "Spatial Freq", TuningCurveSpatialDialog%, 1, 10);
	DlgButton(9, "Temporal Freq", TuningCurveTemporalDialog%, 1, 11);

	i%:=DlgShow(tunAcquisitionTime, tunFixationDuration, tunMaintainFixation,
		tunTimeOutTime, ibcl%);

	PrintLog("Return val is " + str$(i%) + "\n");
	if i% = 1 then
		tunBackgroundColor$ := bcl$[ibcl%];
		SaveTuningCurveScriptParameters();
'		PrintLog("Tuning Curve Parameters dialog - user hit OK, tunType=" + tunType$ + "\n");
		if tunContext$ = tunContextDAQ$ then iReturn% := 0;
		else iReturn% := 1;
		endif;
	endif;
	if i% = 0 then
'		PrintLog("Tuning Curve Parameters dialog - user hit Cancel, tunType=" + tunType$ + "\n");
		if tunContext$ = tunContextDAQ$ then 
			if tunType$ <> tunTypeNone$ then 
				iReturn% := 1;
				SaveTuningCurveScriptParameters();
			else iReturn% := 0;
		 	endif;
		else
			iReturn% := 2;		' The calling/main dialog would close if we returned 0
		endif;
	endif;
	return iReturn%;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Tuning Curve script END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	CoolerMouse parameters START
'
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var cmFixationDuration;			' fixation time for reward
var cmUseDialog%;					' 1 to use dialog, 0 to use console "classic" mode

proc GetCoolerMouseParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\CoolerMouse";

	Profile(key$, "FixationDuration", "2", stmp$);
	cmFixationDuration := val(stmp$);
	Profile(key$, "UseDialog", 1, cmUseDialog%);
	return;
end;

proc SaveCoolerMouseParameters()
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\CoolerMouse";

	Profile(key$, "FixationDuration", str$(cmFixationDuration));
	Profile(key$, "UseDialog", cmUseDialog%);
	return;
end;


func CoolerMouseScriptDialog%()
	var i%;
	GetCoolerMouseParameters();
	DlgCreate("CoolerMouse Parameters", 25, 10, 50);
	DlgReal(1, "Fixation Duration(s):", 0.1, 10);
	DlgCheck(2, "Use Dialog?");
	i% := DlgShow(cmFixationDuration, cmUseDialog%);
	if (i% = 1) then
		SaveCoolerMouseParameters();
	endif;
	return i%;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' CoolerMouse parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Functions specific to this script ONLY - START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func RigConfigDialog%(config$)

	DlgCreate("Rig Configuration: " + config$, 25, 10, 40);
	DlgGroup("Settings", 0, 1, 16, 10);
	DlgButton(2, "Data", DataParametersDialog%, 2, 2);
	DlgButton(3, "DAQ", DAQParametersDialog%, 2, 3);
	DlgButton(4, "Daily", DailyTotalsDialog%, 2, 4);
	DlgButton(5, "Fixation", FixationPointDialog%, 2, 5);
	DlgButton(6, "Stimulus", StimulusDialog%, 2, 6);
	DlgButton(7, "Distractor 1", Distractor1Dialog%, 2, 7);
	DlgButton(8, "Distractor 2", Distractor2Dialog%, 2, 8);
	DlgButton(9, "Distractor 3", Distractor3Dialog%, 2, 9);
	DlgButton(10, "Distractor 4", Distractor4Dialog%, 2, 10);

	DlgGroup("Scripts", 18, 1, 16, 10);
	DlgButton(11, "Fixation", FixationScriptDialog%, 20, 2);
	DlgButton(12, "Attention", AttentionScriptDialog%, 20, 3);
	DlgButton(13, "Tuning", TuningCurveScriptDialog%, 20, 4);
	DlgButton(14, "CoolerMouse", CoolerMouseScriptDialog%, 20, 5);
	DlgButton(15, "MSequence", MSequenceScriptDialog%, 20, 6);
	DlgButton(16, "ContrastReverse", CRGScriptDialog%, 20, 7);

	DlgShow();

end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Functions specific to this script ONLY - END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''






''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Start of script body...
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var iState%:=0;
const stateStart% := 0;
const stateQuit% := 9;
const stateNew% := 1;
const stateRigConfigDialog% := 4;


' Set context for tuning curve dialog
tunContext$ := tunContextConfig$;

' Initialize state
iState% := stateStart%;

' Infinite loop......
repeat
	
	docase 
		case iState% = stateStart% then

			if SelectConfigurationDialog%() = 1 then
				iState% := stateRigConfigDialog%;
			else
				iState% := stateQuit%;
			endif;

		case iState% = stateRigConfigDialog% then

			RigConfigDialog%(GetCurrentConfiguration$());

			iState% := stateQuit%;

	endcase;


until iState% = stateQuit%;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	END of script body...
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

