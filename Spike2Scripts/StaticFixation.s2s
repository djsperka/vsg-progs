' $Log: not supported by cvs2svn $ 


'Experiment specific variables
var NumberOfRewards%;
var WindowRadius, FixationX, FixationY, FixationDuration, AcquisitionTime;
var BlankDuration, NumberOfTrials%;
var DistractorFlag%, BackgroundColor$, FixationPointDiameter;
var FixationColor$;

var NumberOfChannels%,XChannel%,YChannel%,TriggerChannel%;
NumberOfChannels%:=Input("Number of channels :",1,1,14);
XChannel% := NumberOfChannels%+1;
YChannel% := NumberOfChannels%+2;
TriggerChannel% := NumberOfChannels%+3;
CreateSampleConfiguration();

'Determine the current distance to the screen
var DistanceToScreen$;
Profile("AlertRig\\CurrentExperiment","DistanceToScreen","850",DistanceToScreen$);
'DistanceToScreen$:=str$(1080);
'Determine which monkey we're currently running
var Monkey$;
Profile("AlertRig","CurrentMonkey","",Monkey$);
if Monkey$="" then Message("Could not determine current monkey"); halt; endif
message(DistanceToScreen$);
'Get information on number of trials and rewards for today
var TodaysTrials, TodaysRewards,RecordedDate$,TodaysDate$;
GetTodaysStats%();

'Read in the last used experimental parameters to use as defaults for the dialog
GetLastUsedParameters%();

'Bring up a dialog to populate experiment parameters
	'Dialog specific variables
	var BackgroundList$[3]; BackgroundList$[0]:="Black"; BackgroundList$[1]:="Gray"; BackgroundList$[2]:="White";
	var BackgroundListIndex := 1;
	var FixationColorList$[3]; FixationColorList$[0] := "Red"; FixationColorList$[1] := "Green"; FixationColorList$[2] := "Blue";
	var FixationColorIndex;

	var DlgResponse;
	if BackgroundColor$="Black" then BackgroundListIndex := 0; endif
	if BackgroundColor$="Gray" then BackgroundListIndex := 1; endif
	if BackgroundColor$="White" then BackgroundListIndex := 2; endif
DlgCreate("Specify fixation parameters");
DlgReal(1,"Window (deg): ",0,50);
DlgReal(2,"Fixation point X (deg): ",-50,50);
DlgReal(3,"Fixation point Y (deg): ",-50,50);
DlgReal(4,"Fixation duration (s): ",0,20);
DlgReal(5,"Acquisition (s): ",0,20);
DlgReal(6,"Intertrial interval (s): ",0,20);
DlgInteger(7,"Number of trials : ",0,10000);
DlgInteger(8,"Number of juices per reward",0,10);
DlgCheck(9,"Include distractor?");
DlgList(10,"Background color:",BackgroundList$[]);
DlgReal(11,"Fixation point diameter:",.01,5);
DlgList(12,"Fixation point color:",FixationColorList$[]);
DlgResponse := DlgShow(WindowRadius,FixationX,FixationY,FixationDuration,AcquisitionTime, BlankDuration,NumberOfTrials%,NumberOfRewards%,DistractorFlag%,BackgroundListIndex,FixationPointDiameter,FixationColorIndex);
if DlgResponse= 0 then halt; endif
BackgroundColor$ := BackgroundList$[BackgroundListIndex];
FixationColor$ := FixationColorList$[FixationColorIndex];
'message(FixationPointDiameter);
'Update the registry record of the last used parameters
SetLastUsedParameters%();

'Get information on current calibration constants (software gains) for the eye coil from the registry
var DegreesPerVoltX, DegreesPerVoltY,DegreesPerVoltX$, DegreesPerVoltY$;
Profile("AlertRig\\"+Monkey$,"DegreesPerVoltX","",DegreesPerVoltX$);
Profile("AlertRig\\"+Monkey$,"DegreesPerVoltY","",DegreesPerVoltY$);
DegreesPerVoltX := val(DegreesPerVoltX$);		'Since registry values are either integers are strings, 
DegreesPerVoltY := val(DegreesPerVoltY$);		'we store decimals as strings and convert them to decimals


'Read in the alert rig configuration file
'var ConfigFile;
'ConfigFile := FileOpen("c:\\alertrig\\spike2scripts\\AlertRig.s2c",6);
'if ConfigFile <> 0 then Message("Could not open configuration file"); halt; endif

'Open the data sampling window
var DataWindow%;
DataWindow% := FileNew(0,4);
Window(-0.235849,52.746,97.2484,99.8856);
View(DataWindow%).WindowVisible(1);

'Open an XY view to display eye position
var XYWindow%;
XYWindow% := FileNew(12);
XRange(-30,30);
YRange(-2,-30,30);
XYDrawMode(0,5,0);
WindowVisible(1);
Window(-0.550314,0.114416,41.5094,52.746);
XYColour(1,16);
XYSize(1,-1);

'Calcuate the fixation window
var index,RadiusX[1000],RadiusY[1000];
for index := 0 to 499 do
	RadiusX[index] := FixationX - WindowRadius + 2*WindowRadius*index/499;
	RadiusY[index] := FixationY + sqrt(WindowRadius*WindowRadius - (RadiusX[index]-FixationX)*(RadiusX[index]-FixationX));
	RadiusX[999-index] := RadiusX[index];
	RadiusY[999-index] := 2*FixationY-1*RadiusY[index];
'	if RadiusX[index]=0 then
'		if RadiusY[index]=0 then
'			Message(index);
'		endif
'	endif
next;

'Create a new channel in the XY view to display the fixation window
XYSetChan(0);
XYColour(2,13);
XYDrawMode(2,2,1);
XYJoin(2,1);
'Draw the fixation window
XYAddData(2,RadiusX[],RadiusY[]);

'Create a new channel in the XY view to display the fixation point
XYSetChan(0);

'Create a new channel in the XY view to show the monitor's location
XYSetChan(0);
XYColour(4,13);
XYDrawMode(4,3,1);
XYJoin(4,2);
XYAddData(4,-9,-7);
XYAddData(4,9,-7);
XYAddData(4,9,7);
XYAddData(4,-9,7);

'Create and display the Toolbar, not yet activating the IdleProcessing function

'Toolbar and IdleProcessing variables
var Pause,Stim$,StimHandle;
var Time,OldTime:=0,NewTriggerTime,NewTriggerState;
var StartTrial :=1, AcquireTarget :=0, HoldFixation :=0, WaitForBlank :=0, WaitForStim:=0, TargetAcquired :=0;
var TrialCounter :=1,TrialStartTime, TargetAcquiredTime, BlankStartTime;
var TriggerState,TriggerTime,TriggerOnTime, TriggerOffTime;
var EyePosX,EyePosY;

View(App(8)).WindowVisible(0);	'Hide the standard sample bar
ToolbarVisible(1);
ToolbarSet(1,"Sample start",Start%);
ToolbarSet(2,"Sample stop", Stop%);
ToolbarSet(3,"Juice",Juice%);
ToolbarSet(4,"Pause stimuli",PauseStimuli%);
ToolbarSet(5,"Resume stimuli",ResumeStimuli%);
ToolbarEnable(2,0);
ToolbarEnable(4,0);
ToolbarEnable(5,0);
Toolbar("Go",12345);



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
var CommandLine$;
CommandLine$ :="C:\\AlertRig\\Fixation\\StaticFixation\\Release\\StaticFixation "+str$(NumberOfTrials%) +" "
					+str$(FixationDuration) +" "+ str$(BlankDuration)+	" "+str$(FixationX)+" "+str$(FixationY)+" "
					+str$(DistractorFlag%)+" "+BackgroundColor$+" "+str$(FixationPointDiameter)+" "
					+FixationColor$+" "+DistanceToScreen$;
'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
'PrintLog(CommandLine$+"\n");
StimHandle := ProgRun(CommandLine$,0);
if StimHandle <0 then Message("Could not start stimulus."); halt; endif
Yield(5);	'Wait a few seconds to make sure the VSG has time to initialize.
SampleStart(0); 'Start sampling
ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
ToolbarEnable(2,1);
ToolbarEnable(1,0);
View(DataWindow%);
Yield(.1);
return 1;
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
SampleKey("L");
Yield(.1);
SampleStop();
ProgKill(StimHandle);
ProgRun("C:\\AlertRig\\ClearTrigger",0);
end;
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Juice%()
SampleKey("J");
return 1;
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Looking%(EyePosX,EyePosY)
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-FixationX,2) + Pow(EyePosY-FixationY,2)) <= Pow(WindowRadius,2) then return 1; else return 0; endif
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
	var i;
	TodaysRewards:=TodaysRewards+1;
	ToolbarText("Trial Number: "+str$(TodaysTrials)+"     Number of Rewards: "+str$(TodaysRewards));
	Profile("AlertRig\\"+Monkey$,"TotalRewards",TodaysRewards);
	for i:=1 to NumberOfRewards% do Yield(.05); SampleKey("J"); next
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func IdleProcessing%()   		'This function will be run whenever an interrupt
										'is available.

Time := MaxTime()-.001;
if Time > 0 then
	EyePosX := ChanMeasure(XChannel%,2,Time,Time-.005)*DegreesPerVoltX;
	EyePosY := ChanMeasure(YChannel%,2,Time,Time-.005)*DegreesPerVoltY;
endif
if Time > OldTime +.005 then
	View(XYWindow%).XYAddData(1,EyePosX,EyePosY);
	OldTime := Time;
endif

if Pause = 1 then return 1; endif

NewTriggerTime := NextTime(TriggerChannel%,TriggerTime,NewTriggerState);
if NewTriggerTime > TriggerTime then 
	if NewTriggerState = 0 then
		TriggerOnTime := NewTriggerTime;
		Stim$:="On";
		TodaysTrials:=TodaysTrials+1;
		ToolbarText("Trial Number: "+str$(TodaysTrials)+"     Number of Rewards: "+str$(TodaysRewards));
		Profile("AlertRig\\"+Monkey$,"TotalTrials",TodaysTrials);
		View(XYWindow%).XYAddData(3,FixationX,FixationY);
	endif

	if NewTriggerState = 1 then
		TriggerOffTime := NewTriggerTime;
		Stim$:="Off";
		View(XYWindow%).XYDelete(3);
	endif

	TriggerTime := NewTriggerTime;
endif

if StartTrial = 1 then
	SampleKey("H");
	TrialStartTime := MaxTime();
	StartTrial := 0;
	AcquireTarget :=1;
	WaitForStim :=1;
	return 1;
endif

if AcquireTarget = 1 then 
	if StartTrial = 1 then Message("Start and Acquire both 1"); halt; endif
	if Stim$="Off" then WaitForStim :=1; return 1; endif
	if ((Stim$="On") and (WaitForStim=1)) then
		WaitForStim :=0;
		TrialStartTime := TriggerOnTime;
	endif
	if Looking%(EyePosX,EyePosY)=1 then AcquireTarget := 0; HoldFixation := 1; TargetAcquiredTime:=MaxTime();return 1; endif
   if MaxTime()-TrialStartTime > AcquisitionTime then AcquireTarget :=0; WaitForBlank :=1; BlankStartTime := -1; SampleKey("L"); return 1; endif
endif

if WaitForBlank=1 then
	if Stim$ ="On" then WaitForStim :=1; return 1; endif
	if (Stim$="Off" and BlankStartTime =-1) then WaitForStim :=0; BlankStartTime := TriggerOffTime; endif
	if MaxTime()-BlankStartTime > BlankDuration then WaitForBlank :=0; StartTrial:=1; endif
	return 1;
endif

if HoldFixation=1 then 
	if Looking%(EyePosX,EyePosY)=0 then SampleKey("L"); HoldFixation:=0; WaitForBlank:=1; BlankStartTime :=-1; return 1; endif
	if (MaxTime()-TargetAcquiredTime > FixationDuration) then SampleKey("L"); Reward%(); HoldFixation:=0; WaitForBlank :=1; BlankStartTime :=-1; endif
endif

return 1;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func PauseStimuli%();
Pause :=1;
ToolbarEnable(4,0);
ToolbarEnable(5,1);
return 1;
end
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func ResumeStimuli%();
Pause :=0;
ToolbarEnable(4,1);
ToolbarEnable(5,0);
return 1;
end
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetTodaysStats%();
Profile("AlertRig\\"+Monkey$,"TotalRewards",0,TodaysRewards);
Profile("AlertRig\\"+Monkey$,"TotalTrials",0,TodaysTrials);
Profile("AlertRig\\"+Monkey$,"Date","",RecordedDate$);
TodaysDate$ := Date$();
if TodaysDate$ <> RecordedDate$ then 
	Profile("AlertRig\\"+Monkey$,"TotalRewards",0);
	TodaysRewards :=0;
	Profile("AlertRig\\"+Monkey$,"TotalTrials",0);
	TodaysTrials :=0;
	Profile("AlertRig\\"+Monkey$,"Date",TodaysDate$);
endif
return 1;
end
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetLastUsedParameters%();

'Read the Windows registry to determine last used values for the experiment parameters
'Since registry values are either integers are strings, we store decimals as strings and convert them to decimals
var NumberOfRewards$;
var WindowRadius$, FixationX$, FixationY$, FixationDuration$, AcquisitionTime$;
var BlankDuration$;
var FixationPointDiameter$;

Profile("AlertRig\\"+Monkey$,"WindowRadius","1",WindowRadius$);
Profile("AlertRig\\"+Monkey$,"FixationX","0",FixationX$);
Profile("AlertRig\\"+Monkey$,"FixationY","0",FixationY$);
Profile("AlertRig\\"+Monkey$,"FixationDuration","1",FixationDuration$);
Profile("AlertRig\\"+Monkey$,"AcquisitionTime","1",AcquisitionTime$);
Profile("AlertRig\\"+Monkey$,"BlankDuration","2",BlankDuration$);
Profile("AlertRig\\"+Monkey$,"NumberOfTrials%",1000,NumberOfTrials%);
Profile("AlertRig\\"+Monkey$,"DistractorFlag",0,DistractorFlag%);
Profile("AlertRig\\"+Monkey$,"BackgroundColor","Grey",BackgroundColor$);
Profile("AlertRig\\"+Monkey$,"FixationPointDIameter",".1",FixationPointDiameter$);
Profile("AlertRig\\"+Monkey$,"NumberOfRewards",1,NumberOfRewards%);

'Convert strings to decimenals
WindowRadius := val(WindowRadius$);
FixationX := val(FixationX$);
FixationY := val(FixationY$);
FixationDuration := val(FixationDuration$);
AcquisitionTime := val(AcquisitionTime$);
BlankDuration := val(BlankDuration$);
FixationPointDiameter := val(FixationPointDiameter$);

return 1;
end
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func SetLastUsedParameters%();	'Updates the registry record of the last used experimental parameters

'Since registry values are either integers are strings, we convert decimals to strings

Profile("AlertRig\\"+Monkey$,"WindowRadius",str$(WindowRadius));
Profile("AlertRig\\"+Monkey$,"FixationX",str$(FixationX));
Profile("AlertRig\\"+Monkey$,"FixationY",str$(FixationY));
Profile("AlertRig\\"+Monkey$,"FixationDuration",str$(FixationDuration));
Profile("AlertRig\\"+Monkey$,"AcquisitionTime",str$(AcquisitionTime));
Profile("AlertRig\\"+Monkey$,"BlankDuration",str$(BlankDuration));
Profile("AlertRig\\"+Monkey$,"NumberOfTrials%",NumberOfTrials%);
Profile("AlertRig\\"+Monkey$,"DistractorFlag",DistractorFlag%);
Profile("AlertRig\\"+Monkey$,"BackgroundColor",BackgroundColor$);
Profile("AlertRig\\"+Monkey$,"FixationPointDIameter",str$(FixationPointDiameter));
Profile("AlertRig\\"+Monkey$,"NumberOfRewards",NumberOfRewards%);

return 1;
end
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
var index;
SampleClear(); 'Set standard sampling state
SampleAutoFile(0); 'Enable automatic file naming
SampleAutoComment(0); 'Prompt for comment after sampling
SampleAutoCommit(60); 'Seconds between each file commit

'Channel recording definitions
SampleEvent(TriggerChannel%,0,2,3600); 'Trigger channel, level
SampleComment$(TriggerChannel%,"Trigger");
SampleTitle$(TriggerChannel%,"Trigger");
'DrawMode(TriggerChannel%,2);	'Set the trigger channel to line mode.

for index := 1 to NumberOfChannels% do
	SampleWaveMark(index,index-1,2000,34,15,28000); ' chan, port, event rate, points, pre-trigger, rate
	SampleTitle$(index,"Electrode_"+Str$(index)); 
next

'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
SampleWaveform(XChannel%,14,28000);
SampleTitle$(XChannel%,"Eye X");
SampleWaveform(YChannel%,15,28000);
SampleTitle$(YChannel%,"Eye Y");

SampleSequencer("c:\\alertrig\\Fixation.pls");
SampleOptimise(2,2,2,2,50);  'Set optimise mode (do this last)
SampleMode(1); 'Continuous sampling
end;
