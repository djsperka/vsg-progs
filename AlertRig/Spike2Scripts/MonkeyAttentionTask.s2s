'This is the version used Between after 06106
'Experiment specific variables
'Can turn correction trials on or off based on variable in input file.
SampleKey("X");

' DJS Changes made to move to another rig. 
'
' djs root dir for data, parameters files. The dir structure used is different than the original! 
var rootDir$ := "d:\\Experiments\\Attention";
var script$, bin$;
script$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2);	' folder containing this script
bin$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\bin";	' Location of executables is ..\bin, relative to script dir

' DJS end changes. More below - look for "djs" or "DJS" ...

var NumberOfRewards%,TSFileOut,TempTS,VSGReady,CorrectionTrialsOnOff,ConstDiffOnOff,StartCondition;
var WindowRadius, FixationX, FixationY, FixationDuration, AcquisitionTime;
var BlankDuration, NumberOfBlocks%;
var BackgroundColor$, FixationPointDiameter;
var CatchTrialPercentage,TargetTrial,CorrectionTrial,GratingConfig,TrialConfigNumber,RandTemp;
var n,StimOver,ContrastChangeTime;
var iTrigger,iTrigger2,iLastTrigger,iLast;
iLastTrigger:=-1;iLast:=-1;
var NumberOfChannels%,XChannel%,YChannel%,FixationPointChannel%,StimChannel%,AnswerPointChannel%,StimChangeChannel%,ConfounderChangeChannel%,ReadyChannel%;
'NumberOfChannels%:=Input("Number of channels :",1,1,14);
const stateVSGWait%:=10;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%:=11;		' waif for vsg to send ready signal #2
const stateStartTrial%		:= 0;
var iState%:=stateVSGWait%;		' present state

NumberOfChannels%:=1;
var MonkeyList$[3],MonkeyListIndex%:=0;
MonkeyList$[0]:="Bluto";
MonkeyList$[1]:="Cornelius";
MonkeyList$[2]:="Henry";
XChannel% := NumberOfChannels%+1;
YChannel% := NumberOfChannels%+2;
FixationPointChannel% := NumberOfChannels%+3;
StimChannel% := NumberOfChannels%+4;
AnswerPointChannel% := NumberOfChannels%+5;
StimChangeChannel% := NumberOfChannels%+6;
ConfounderChangeChannel% := NumberOfChannels%+7;
ReadyChannel%:=NumberOfChannels%+8;
CreateSampleConfiguration();
TargetTrial:=0; CorrectionTrial:=0;
'Determine which monkey we're currently running
var Monkey$,CurrentTargetTrial,CurrentTargetHandle;
var PathHandle,RunHandle;
var ExperimentPath$,RunNumber$,NewRunNumber;
PathHandle :=FileOpen(rootDir$ + "\\CurrentExperiment.par",8,0);	' djs use rootDir$
n:=read(ExperimentPath$);
RunHandle :=FileOpen(ExperimentPath$+ "\\RunNumber.par",8,0);
n:=read(RunNumber$);
FileClose(0);
RunHandle :=FileOpen(ExperimentPath$+ "\\RunNumber.par",8,1);
NewRunNumber:=val(RunNumber$)+1;
Print("%s",str$(NewRunNumber));
FileClose(0);

VSGReady:=1;
NumberOfBlocks% :=14;
CurrentTargetTrial:=0;
GratingConfig:=0;
'Get information on number of trials and rewards for today
var TodaysTrials, TodaysRewards,RecordedDate$,TodaysDate$;
GetTodaysStats%();

'Get information on current calibration constants (software gains) for the eye coil from the registry
var DegreesPerVoltX, DegreesPerVoltY,DegreesPerVoltX$, DegreesPerVoltY$;



'Read in the experimental parameters to use as defaults for the dialog
GetCurrentParameters%();

'Bring up a dialog to populate experiment parameters
	'Dialog specific variables
	var BackgroundList$[3]; BackgroundList$[0]:="Black"; BackgroundList$[1]:="Gray"; BackgroundList$[2]:="White";
	var BackgroundListIndex := 1;
	var GratingColorList$[4],GratingColorIndex;
	GratingColorList$[0]:="Grayscale"; GratingColorList$[1]:="S-cone isolating"; 
	GratingColorList$[2]:="M-cone isolating"; GratingColorList$[3]:="L-cone isolating";
	var DlgResponse;
	if BackgroundColor$="Black" then BackgroundListIndex := 0; endif
	if BackgroundColor$="Gray" then BackgroundListIndex := 1; endif
	if BackgroundColor$="White" then BackgroundListIndex := 2; endif

BackgroundColor$ := BackgroundList$[BackgroundListIndex];

'Bring up a separate dialog to obtain attention parameter information
var ContrastDelay, LowBaseContrast,HighBaseContrast,NumBaseContrast,LowPerChange, HighPerChange,NumberPerChanges,TimeToAnswer,IncorrectBrightness;
var GratingOrSpot$[2], GratingOrSpotIndex%:=0; GratingOrSpot$[0]:="Grating"; GratingOrSpot$[1]:="Spot"; 
var TargetX,TargetY;
var SpecifyGratingFlag%;
var TargetOrientation, TargetSF, TargetTF, TargetDiameter;
var GratingDelay,AnswerPointDelay,AnswerWindow;
var RandomFixationOffset,AnswerPointInitialBrightness,AnswerPointFullBrightness;
var NumberOfDistractors%,ModifyDistractors%;

TimeToAnswer :=5;
AnswerPointDelay :=.075;
GratingDelay :=.05;

TrialConfigNumber:=0;







'Read in the alert rig configuration file
'var ConfigFile;
'ConfigFile := FileOpen("d:\\alertrig\\spike2scripts\\AlertRig.s2c",6);
'if ConfigFile <> 0 then Message("Could not open configuration file"); halt; endif

'Open the data sampling window
var DataWindow%;
DataWindow% := FileNew(0,4);
Window(-0.235849,52.746,97.2484,99.8856);
View(DataWindow%).WindowVisible(1);

'Open an XY view to display eye position
var XYWindow%;
XYWindow% := FileNew(12);
XRange(-30,30);
YRange(-2,-30,30);
XYDrawMode(0,5,0);
WindowVisible(1);
Window(-0.550314,0.114416,41.5094,52.746);
XYColour(1,16);
XYSize(1,-1);

'Calcuate the fixation window
var index,RadiusX[1000],RadiusY[1000],AnswerRadiusY[1000];
for index := 0 to 499 do
	RadiusX[index] := FixationX - WindowRadius + 2*WindowRadius*index/499;

	RadiusY[index] := FixationY + sqrt(abs(WindowRadius*WindowRadius - abs((RadiusX[index]-FixationX)*(RadiusX[index]-FixationX))));
	RadiusX[999-index] := RadiusX[index];

	RadiusY[999-index] := 2*FixationY-1*RadiusY[index];
next;

'Create a new channel in the XY view to display the fixation window
XYSetChan(0);
XYColour(2,13);
XYDrawMode(2,2,1);
XYJoin(2,1);
XYSize(2,-1000);
'Draw the fixation window
XYAddData(2,RadiusX[],RadiusY[]);

'Create a new channel in the XY view to display the fixation point
XYSetChan(0);
XYSize(3,-1);

'Create a new channel in the XY view to show the monitor's location
XYSetChan(0);
XYColour(4,13);
XYDrawMode(4,3,1);
XYJoin(4,2);
XYAddData(4,-9,-7);
XYAddData(4,9,-7);
XYAddData(4,9,7);
XYAddData(4,-9,7);

'Determine the contrast changes we will present
var ContrastState[10000],RandomDelay[10000];
var ContrastIndex%;
DetermineContrastChanges();

'Create and display the Toolbar, not yet activating the IdleProcessing function

'Toolbar and IdleProcessing variables
var Pause,Stim$,StimHandle;
var Time,OldTime:=0,NewTriggerTime,NewTriggerState;
var StartTrial :=1, AcquireTarget :=0, HoldFixation :=0, WaitForBlank :=0, WaitForStim:=0, TargetAcquired :=0, ContrastChange :=0,AnswerPointsUp%:=0,GratingUp%:=0;
var TrialCounter :=1,TrialStartTime, TargetAcquiredTime, BlankStartTime;
var TriggerState,TriggerTime,TriggerOnTime, TriggerOffTime;
var EyePosX,EyePosY;
var TrialNumber% :=-1; 
var AnswerPoint, AnswerY,AnswerPointTime,CorrectAnswer:=0;
var AbortedTrials%:=0,CompletedTrials%:=1, CorrectTrials%:=0,FirstTrial%:=1,TimeTrialNumber%:=0,CurrentAborted%:=0;
var BaseFixationDuration,BaseContrastDelay;
BaseFixationDuration := FixationDuration;

BaseContrastDelay := ContrastDelay;
View(App(8)).WindowVisible(0);	'Hide the standard sample bar
ToolbarVisible(1);
ToolbarSet(1,"Sample start",Start%);
ToolbarSet(2,"Sample stop", Stop%);
ToolbarSet(3,"Juice",Juice%);
ToolbarSet(4,"Pause stimuli",PauseStimuli%);
ToolbarSet(5,"Resume stimuli",ResumeStimuli%);
ToolbarEnable(2,0);
ToolbarEnable(4,0);
ToolbarEnable(5,0);
Toolbar("Go",12345);



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
var CommandLine$;
'CommandLine$ :="d:\\AlertRig\\NewAttention "+str$(FixationX)+" "+str$(FixationY)+" "
'					+str$(FixationPointDiameter)+" "+str$(BaseContrast)+" "+str$(ContrastUp)+" "+str$(ContrastDown)+" "
'					+str$(TargetX)+" "+str$(TargetY)+" "+str$(TargetOrientation)+" "
	'				+str$(TargetSF)+" "+str$(TargetTF)+" "+str$(TargetDiameter);

					CommandLine$ :="c:\\work\\AlertRig\\bin\\MonkeyAttentionTask.exe "+str$(FixationX)+" "+str$(FixationY)+" "
					+str$(FixationPointDiameter)+" "+str$(LowBaseContrast)+" "+str$(HighBaseContrast)+" "+str$(NumBaseContrast)+" "+str$(LowPerChange)+" "+str$(HighPerChange)+" "
					+str$(NumberPerChanges)+" "+str$(TargetX)+" "+str$(TargetY)+" "+str$(TargetOrientation)+" "
					+str$(TargetSF)+" "+str$(TargetTF)+" "+str$(TargetDiameter)+" "+str$(ConstDiffOnOff)+" "+str$(StartCondition);
'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
'PrintLog(CommandLine$+"\n");
'halt;
SampleStart(0); 'Start sampling
PrintLog(CommandLine$);
PrintLog("\n");
PrintLog("X Clears All Triggers\n");
SampleKey("X");
StimHandle := ProgRun(CommandLine$,1);
if StimHandle <0 then Message("Could not start stimulus."); halt; endif


ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
ToolbarEnable(2,1);
ToolbarEnable(1,0);
View(DataWindow%);
return 1;
end; 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
SampleKey("X");
'Yield(.1);
SampleStop();
ProgKill(StimHandle);
'ProgRun(bin$ + "\\ClearTrigger",0); 
View(DataWindow%);
FilePathSet(ExperimentPath$+"\\DataFiles\\");
FileSaveAs("Run_"+ RunNumber$+".smr",-1);
Message("Press OK to end program");
FileClose(-1);
end;
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Juice%()
SampleKey("J");
return 1;
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Looking%(EyePosX,EyePosY)
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-FixationX,2) + Pow(EyePosY-FixationY,2)) <= Pow(WindowRadius,2) then return 1; else return 0; endif
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Answer%(EyePosX,EyePosY)
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-FixationX,2) + Pow(EyePosY-AnswerY,2)) <= Pow(AnswerWindow,2) then return 1; endif
	if (Pow(EyePosX-FixationX,2) + Pow(EyePosY+AnswerY,2)) <= Pow(AnswerWindow,2) then return -1; endif
	return 0;
end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func Reward%()
	var i;
	if FirstTrial% = 0 then 
		CompletedTrials%:=CompletedTrials%+1;
		CurrentTargetTrial:=CurrentTargetTrial+1;
	else
		CompletedTrials%:=1; FirstTrial%:=0;
		CurrentTargetTrial:=CurrentTargetTrial+1;
	endif
	CorrectTrials% := CorrectTrials%+1;
	TodaysRewards:=TodaysRewards+1;
	
	if CurrentTargetHandle =0 then
		'Get Keyboard to indicate taget type 1 trial'
	else
		'Get Keyboard toindicate taret type 2 trial'
	endif
	if CurrentTargetTrial = 30 then
		CurrentTargetTrial:=0;
		if CurrentTargetHandle =0 then
			CurrentTargetHandle:=1;
		else
			CurrentTargetHandle:=0;
	   endif
	endif

	ToolbarText("Today's trials: "+str$(TodaysTrials)+"     Today's rewards: "+str$(TodaysRewards)
					+"     This run's completed trials: "+str$(CompletedTrials%)+"     This run's % correct: "+str$(100*CorrectTrials%/CompletedTrials%)
					+"     This run's aborted trials: "+str$(AbortedTrials%));
	Profile("AlertRig\\"+Monkey$,"TotalRewards",TodaysRewards);
	for i:=1 to NumberOfRewards% do SampleKey("J"); Yield(.05); next 'changed yield from .05
	end;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func IdleProcessing%()   		'This function will be run whenever an interrupt
										'is available.
View(DataWindow%);
Time := MaxTime();
if Time > 0 then
	EyePosX := ChanMeasure(XChannel%,2,Time,Time-.005)*DegreesPerVoltX;
	
	EyePosY := ChanMeasure(YChannel%,2,Time,Time-.005)*DegreesPerVoltY;
endif
if Time > OldTime +.005 then
	View(XYWindow%).XYAddData(1,EyePosX,EyePosY);
	OldTime := Time;
endif
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
docase 

	
		case iState% = stateVSGWait% then

			' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
			PrintLog("state stateVSGWait: wait\n");
			iTrigger := NextTime(ReadyChannel%, iLast, iTrigger2);
			if iTrigger > iLastTrigger and iTrigger2 = 0 then
				PrintLog("state stateVSGWait: Got leading edge of trigger\n");
				iLastTrigger := iTrigger;
				iState% := stateVSGWaitConfirm%;
			endif;

		case iState% = stateVSGWaitConfirm% then

			' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
			iTrigger := NextTime(ReadyChannel%, iLastTrigger, iTrigger2);
			if iTrigger > iLastTrigger and iTrigger2 = 1 then
				PrintLog("state stateVSGWaitConfirm: Got trailing edge of trigger\n");
				iLastTrigger := iTrigger;
				iState% := stateStartTrial%;
			endif;

	
		case iState% = stateStartTrial% then
endcase
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
if Pause = 1 then return 1; endif
'PrintLog("Trigger Time = %f\n",TriggerTime);
NewTriggerTime := NextTime(FixationPointChannel%, TriggerTime, NewTriggerState);
PrintLog(str$(NewTriggerTime)+" " + Str$(NewTriggerState) + "\n");
if NewTriggerTime > TriggerTime then 
	if NewTriggerState = 0 then
		TriggerOnTime := NewTriggerTime;
		Stim$:="On";
		TodaysTrials:=TodaysTrials+1;
		ToolbarText("Today's trials: "+str$(TodaysTrials)+"     Today's rewards: "+str$(TodaysRewards)
					+"     This run's completed trials: "+str$(CompletedTrials%)+"     This run's % correct: "+str$(100*CorrectTrials%/CompletedTrials%)
					+"     This run's aborted trials: "+str$(AbortedTrials%));
		Profile("AlertRig\\"+Monkey$,"TotalTrials",TodaysTrials);
		View(XYWindow%).XYAddData(3,FixationX,FixationY);
		View(XYWindow%).XYAddData(2,RadiusX[],RadiusY[]);
	endif

	if NewTriggerState = 1 then
		TriggerOffTime := NewTriggerTime;
		Stim$:="Off";
		View(XYWindow%).XYDelete(3);
	endif 
	TriggerTime := NewTriggerTime;
endif
'PrintLog("StartTrial = %f\n",StartTrial);
'PrintLog("New Trigger Time = %f\n",NewTriggerTime);
'PrintLog("Trial Number = %f\n",TrialNumber%);
'Code to execute if a new trial is beginning
if iState% = stateStartTrial% then
if StartTrial = 1 then
	'if TrialNumber%=-1 then TrialNumber% :=0 else TrialNumber% := TrialNumber%+1; endif
	if TrialNumber%=-1 then TrialNumber% :=0 endif
	if TrialConfigNumber = 20 then
		if GratingConfig =0 then
			GratingConfig:=1;
		else
			GratingConfig:=0;
		endif
		TrialConfigNumber:=0;
	endif
	if GratingConfig =0 then
		SampleKey("G"); Yield();
	else
		SampleKey("g");Yield();
	endif
		
	FixationDuration:=BaseFixationDuration + RandomDelay[TimeTrialNumber%]; 
	ContrastDelay:=BaseContrastDelay + RandomDelay[TimeTrialNumber%];
	SampleKey("F");
	PrintLog("Fixation Up at %f \n",MaxTime());
	'PrintLog("Grating Delay = %f \n",GratingDelay);
	Yield();
	TrialStartTime := Time;
	StartTrial := 0;
	AcquireTarget :=1;
	WaitForStim :=1;
	ContrastChange :=0;
	AnswerPointsUp% :=0;
	GratingUp%:=0;
	StimOver:=0;
	'Determine if this trial will be raising or lowering the grating contrast
	if (ContrastState[TrialNumber%] = 1) then SampleKey("H"); PrintLog("ContrastState = " + Str$(TrialNumber%) +"\n") endif
	if (ContrastState[TrialNumber%] = 0) then SampleKey("L"); PrintLog("ContrastState = " + Str$(TrialNumber%) +"\n") endif
	return 1;
endif

'Code to execute if a new trial has begun, but he has not yet acquired fixation
if AcquireTarget = 1 then 
'PrintLog("Target not Acquired at %f \n",MaxTime());
	if StartTrial = 1 then Message("Start and Acquire both 1"); halt; endif
	if Stim$="Off" then WaitForStim :=1; return 1; endif
	if ((Stim$="On") and (WaitForStim=1)) then
		WaitForStim :=0;
		TrialStartTime := TriggerOnTime;
	endif
	if Looking%(EyePosX,EyePosY)=1 then AcquireTarget := 0; HoldFixation := 1; TargetAcquiredTime:=Time;PrintLog("Target Acquired at %f \n",MaxTime());return 1; endif
   if Time-TrialStartTime > AcquisitionTime then 
		AcquireTarget :=0; WaitForBlank :=1; BlankStartTime := -1; SampleKey("X");Yield(); AbortedTrials% := AbortedTrials%+1;CurrentAborted%:=CurrentAborted%+1; return 1; endif
		
endif

if WaitForBlank=1 then
	if TrialNumber%=20*NumberOfBlocks%-1 then Stop%(); return 0; endif
	if Stim$ ="On" then WaitForStim :=1; return 1; endif
	if (Stim$="Off" and BlankStartTime =-1) then WaitForStim :=0; BlankStartTime := TriggerOffTime; endif
	if MaxTime()-BlankStartTime > BlankDuration then WaitForBlank :=0; StartTrial:=1; endif
	return 1;
endif

if HoldFixation=1 then 
	if Looking%(EyePosX,EyePosY)=0 then SampleKey("X");Yield(); AbortedTrials%:=AbortedTrials%+1;CurrentAborted%:=CurrentAborted%+1;HoldFixation:=0; WaitForBlank:=1; BlankStartTime :=-1; return 1; endif
	if CurrentAborted%>5 then TimeTrialNumber%:=TimeTrialNumber%+1;  CurrentAborted%:=0;endif
	if (Time-TargetAcquiredTime >= AnswerPointDelay) and (AnswerPointsUp%=0) then SampleKey("A"); Yield();AnswerPointsUp%:=1;endif 'put back in
	if (Time-TargetAcquiredTime >= GratingDelay) and (GratingUp%=0) then Yield(); SampleKey("S"); GratingUp%:=1; endif
	if (Time-TargetAcquiredTime >= FixationDuration) then
  		AnswerPointTime := Time;
		AnswerPoint:=1; HoldFixation:=0; 
		' djs change this to 5 degrees to match app
		AnswerY:=FixationY+(ContrastState[TrialNumber%]*5); 
		View(XYWindow%).XYAddData(3,FixationX,AnswerY); 
		ArrConst(AnswerRadiusY[],RadiusY[]); ArrAdd(AnswerRadiusY[],(ContrastState[TrialNumber%]*5)); View(XYWindow%).XYAddData(2,RadiusX[],AnswerRadiusY[]);
	endif
	if (Time-TargetAcquiredTime > ContrastDelay) and ContrastChange=0 then
		if CorrectionTrial=0 then
			RandTemp:=rand(); if TrialConfigNumber<4 then RandTemp:=1.9; endif
			if  RandTemp<= CatchTrialPercentage/100 then  'if less then catch trial percentage, then this is an invalid cue trial
				if GratingConfig = 0 then  'if the grating config is original, then change the original distractor
 	   			SampleKey("D");Yield();
					SampleKey("O");
					TargetTrial:=0;
				else                        'if the grating config is reversed, then change the original cue
					SampleKey("C");Yield();
					SampleKey("O");
					TargetTrial:=0;
				endif
			else
				if GratingConfig = 1 then
 	   			SampleKey("D");Yield();
					SampleKey("O");
					TargetTrial:=1;
				else
					SampleKey("C");Yield();
					SampleKey("O");
					TargetTrial:=1;
				endif
			endif
		else
			if TargetTrial = 0 then
				RandTemp:=rand(); if TrialConfigNumber<4 then RandTemp:=3; endif
				if RandTemp <= CatchTrialPercentage/100 then
 	   			if GratingConfig = 0 then
 	   				SampleKey("D");Yield();
						SampleKey("o");
						TargetTrial:=0;
					else
						SampleKey("C");Yield();
						SampleKey("o");
						TargetTrial:=0;
					endif
				endif
			else
				if GratingConfig = 1 then
 	   			SampleKey("D");Yield();
					SampleKey("o");
					TargetTrial:=1;
				else
					SampleKey("C");Yield();
					SampleKey("o");
					TargetTrial:=1;
				endif
			endif
		endif
		ContrastChange:=1;
		ContrastChangeTime:=MaxTime();
	endif

	return 1;
endif

'if WaitForAnswerPoint=1 then



if AnswerPoint=1 then 
	if (Looking%(EyePosX,EyePosY)=0) and (GratingUp%=1) then SampleKey("s");Yield(); GratingUp%:=0; endif
	CorrectAnswer:=Answer%(EyePosX,EyePosY);
	if CorrectAnswer=1 then 
		SampleKey("Y");
		Yield(.025); 'changed yield from .025  
		CorrectionTrial:=0;
		TempTS:=MaxTime();
		View(TSFileOut);
		Print(Str$(TrialNumber%)+ "\t" + Str$(TempTS) +"\n");
		TrialNumber%:=TrialNumber%+1;
		TimeTrialNumber%:=TimeTrialNumber%+1;
		TrialConfigNumber:=TrialConfigNumber+1;
		SampleKey("X"); 
		Yield();
		Reward%(); 
		AnswerPoint:=0; 
		WaitForBlank:=1;  
		BlankStartTime :=-1; 
		return 1;
	endif
	if CorrectAnswer=-1 then 		  
		if TargetTrial=0 then
			 SampleKey ("Y");Yield(.025);
			 View(TSFileOut);
		    Print(Str$(TrialNumber%)+ "\t" + Str$(TempTS) +"\n");
			 TrialNumber%:=TrialNumber%+1;
			 TimeTrialNumber%:=TimeTrialNumber%+1;
			 TrialConfigNumber:=TrialConfigNumber+1;
			 CorrectionTrial:=0;
		else
			if CorrectionTrialsOnOff=0 then
				
			SampleKey ("Y");Yield(.025);
			 View(TSFileOut);
		    Print(Str$(TrialNumber%)+ "\t" + Str$(TempTS) +"\n");
			 TrialNumber%:=TrialNumber%+1;
			 TimeTrialNumber%:=TimeTrialNumber%+1;
			 TrialConfigNumber:=TrialConfigNumber+1;
			 CorrectionTrial:=0;
			
			else
				CorrectionTrial:=1; 
			endif
		endif
		SampleKey("X");Yield();
 	   
		if FirstTrial% = 0 then 
			CompletedTrials%:=CompletedTrials%+1;
			CurrentTargetTrial:=CurrentTargetTrial+1;
		else
			CompletedTrials%:=1; FirstTrial%:=0;
			CurrentTargetTrial:=CurrentTargetTrial+1;
		endif
		AnswerPoint:=0; WaitForBlank:=1;  BlankStartTime :=-1; return 1; endif
	if (Time-AnswerPointTime) > TimeToAnswer then AbortedTrials%:=AbortedTrials%+1; SampleKey("X"); Yield();WaitForBlank :=1; AnswerPoint :=0; BlankStartTime :=-1; return 1; endif
endif
endif
return 1;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func PauseStimuli%();
Pause :=1;
ToolbarEnable(4,0);
ToolbarEnable(5,1);
return 1;
end
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func ResumeStimuli%();
Pause :=0;
ToolbarEnable(4,1);
ToolbarEnable(5,0);
return 1;
end
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetTodaysStats%();
Profile("AlertRig\\"+Monkey$,"TotalRewards",0,TodaysRewards);
Profile("AlertRig\\"+Monkey$,"TotalTrials",0,TodaysTrials);
Profile("AlertRig\\"+Monkey$,"Date","",RecordedDate$);
TodaysDate$ := Date$();
if TodaysDate$ <> RecordedDate$ then 
	Profile("AlertRig\\"+Monkey$,"TotalRewards",0);
	TodaysRewards :=0;
	Profile("AlertRig\\"+Monkey$,"TotalTrials",0);
	TodaysTrials :=0;
	Profile("AlertRig\\"+Monkey$,"Date",TodaysDate$);
endif
return 1;
end
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetCurrentParameters%();
var n,dindex%,DistractorX[5],DistractorY[5], DistractorFile%,MinSF,MaxSF;
var ParamFileIn, ParamFileOut, junk$;
ParamFileIn :=FileOpen(ExperimentPath$ + "\\AttentionParameters.txt",8,0);		' djs use ExperimentPath$
n :=Read(junk$,Monkey$);
n :=Read(junk$,WindowRadius);
n :=Read(junk$,FixationX);
n :=Read(junk$,FixationY);
n :=Read(junk$,AcquisitionTime);
n :=Read(junk$,BlankDuration);
n :=Read(junk$,NumberOfRewards%);
n :=Read(junk$,FixationPointDiameter);
n :=Read(junk$,CatchTrialPercentage);
n :=Read(junk$,AnswerWindow);
n :=Read(junk$,NumBaseContrast);
n :=Read(junk$,LowBaseContrast);
n :=Read(junk$,HighBaseContrast);
n :=Read(junk$,LowPerChange);
n :=Read(junk$,HighPerChange);
n :=Read(junk$,NumberPerChanges);
n :=Read(junk$,ContrastDelay);
n :=Read(junk$,RandomFixationOffset);
n :=Read(junk$,TargetX);
n :=Read(junk$,TargetY);
n :=Read(junk$,TargetOrientation);
n :=Read(junk$,TargetSF);
n :=Read(junk$,MinSF);
n :=Read(junk$,MaxSF);
n :=Read(junk$,TargetTF);
n :=Read(junk$,TargetDiameter);
n :=Read(junk$,NumberOfDistractors%);
n :=Read(junk$,DegreesPerVoltX);
n :=Read(junk$,DegreesPerVoltY);
n :=Read(junk$,CorrectionTrialsOnOff);
n :=Read(junk$,ConstDiffOnOff);
n :=Read(junk$,StartCondition);
FixationDuration := ContrastDelay;



for dindex% := 1 to NumberOfDistractors% do 
	n :=Read(junk$,DistractorX[dindex%]);
	n :=Read(junk$,DistractorY[dindex%]);

next
FileClose(0);
DistractorFile% := FileOpen(ExperimentPath$ + "\\DistractorList.txt",8,1);		' djs use ExperimentPath$
for dindex% := 1 to NumberOfDistractors% do 
	Print("%f %f %f %f %f %f %f\n",TargetOrientation,TargetSF,TargetTF,TargetDiameter,LowBaseContrast,
	DistractorX[dindex%],DistractorY[dindex%]);
next
FileClose(0);
ParamFileOut :=FileOpen(ExperimentPath$+"\\DataFiles\\Run_"+RunNumber$+".par",8,1);
Print("Monkey Name\t%s\n", Monkey$);
Print("FixationWindow\t%f\n", WindowRadius);
Print("Fixation X\t%f\n", FixationX);
Print("Fixation Y\t%f\n", FixationY);
Print("Acquisition Time\t%f\n", AcquisitionTime);
Print("Blank Duration\t%f\n", BlankDuration);
Print("Number of Rewards\t%f\n", NumberOfRewards%);
Print("Fixation Point Diameter\t%f\n", FixationPointDiameter);
Print("Catch Trial Percentage\t%f\n", CatchTrialPercentage);
Print("Answer Window\t%f\n", AnswerWindow);
Print("Low Base Contrast\t%f\n", LowBaseContrast);
Print("High Base Contrast\t%f\n", HighBaseContrast);
Print("Number of Base Contrasts\t%f\n", NumBaseContrast);
Print("Low Percent Change\t%f\n", LowPerChange);
Print("High Percent Change\t%f\n", HighPerChange);
Print("Number of Percent Changes\t%f\n", NumberPerChanges);
Print("Random Fixation Offset\t%f\n", RandomFixationOffset);
Print("Target X\t%f\n", TargetX);
Print("Target Y\t%f\n", TargetY);
Print("Target Orientation\t%f\n", TargetOrientation);
Print("Target Spatial Frequency\t%f\n", TargetSF);
Print("Target Temporal Frequency\t%f\n", TargetTF);
Print("Target Diameter\t%f\n", TargetDiameter);
Print("Number of Distractors\t%f\n", NumberOfDistractors%);
Print("Distractor X1\t%f\n", DistractorX[1]);
Print("Distractor Y1\t%f\n", DistractorY[1]);
Print("DegreesPerVoltX\t%f\n", DegreesPerVoltX);
Print("DegreesPerVoltY\t%f\n", DegreesPerVoltY);
Print("StartCondition\t%f\n", StartCondition);
if CorrectionTrialsOnOff = 0 then Print("Correction Trials Off \n"); else Print("Correction Trials On \n"); endif 
if ConstDiffOnOff = 0 then Print("Constant Difficulty Across Contrasts OFF \n"); else Print("Constant Difficulty Across Contrasts On \n"); endif 

FileClose(ParamFileOut);
TSFileOut :=FileOpen(ExperimentPath$+"\\DataFiles\\Run_"+RunNumber$+".tsf",8,1);
return 1;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func DetermineContrastChanges()
var BlockIndex%,Block[20],RandomBlock[20],RandomNumber;
ArrConst(Block[:10],-1);
ArrConst(Block[10:10],1);
ArrConst(RandomDelay[],0);


for index :=0 to (NumberOfBlocks% -1) do
	BlockIndex%:=0;
   ArrConst(RandomBlock[],0);
	while BlockIndex% < 20 do
		RandomNumber:=round(19*rand());
		if RandomBlock[RandomNumber] = 0 then 
			RandomBlock[RandomNumber] := Block[BlockIndex%];
			BlockIndex% := BlockIndex%+1;
		endif
	wend
	ArrConst(ContrastState[index*20:20],RandomBlock[]);
next






var FindRand, tempProb,tempRand;
for index:=0 to (20*NumberOfBlocks% - 1) do 'this for loop sets the random offset duration based on an exponential distribution
	if RandomFixationOffset > 0 then
		FindRand:=1;
		while FindRand do
   		tempRand:=RandomFixationOffset*rand();
			tempProb:=exp(-2*tempRand);
			if tempProb>rand() then
				RandomDelay[index]:= tempRand;
				FindRand:=0;
			endif
		wend
	endif 
next

return 1;
end

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
var index;
SampleClear(); 'Set standard sampling state
SampleAutoFile(0); 'Enable automatic file naming
SampleAutoComment(0); 'Prompt for comment after sampling
SampleAutoCommit(60); 'Seconds between each file commit

'Channel recording definitions
SampleEvent(FixationPointChannel%,1,2,3600); 'Trigger channel, level
SampleComment$(FixationPointChannel%,"Fixation");
SampleTitle$(FixationPointChannel%,"Fixation");

SampleEvent(StimChannel%,2,2,3600); 'Trigger channel, level
SampleComment$(StimChannel%,"Stim");
SampleTitle$(StimChannel%,"Stim");

SampleEvent(AnswerPointChannel%,3,2,3600); 'Trigger channel, level
SampleComment$(AnswerPointChannel%,"Ans. Pt.");
SampleTitle$(AnswerPointChannel%,"Ans. Pt.");

SampleEvent(StimChangeChannel%,4,2,3600); 'Trigger channel, level
SampleComment$(StimChangeChannel%,"Stim Chg.");
SampleTitle$(StimChangeChannel%,"Stim Chg.");

SampleEvent(ConfounderChangeChannel%,5,2,3600); 'Trigger channel, level
SampleComment$(ConfounderChangeChannel%,"Catch trial");
SampleTitle$(ConfounderChangeChannel%,"Catch trial");

for index := 1 to NumberOfChannels% do
	SampleWaveMark(index,index-1,2000,34,15,28000); ' chan, port, event rate, points, pre-trigger, rate
	SampleTitle$(index,"Electrode_"+Str$(index)); 
next

SampleWaveform(XChannel%,14,1000);
SampleTitle$(XChannel%,"Eye X");
SampleWaveform(YChannel%,15,1000);
SampleTitle$(YChannel%,"Eye Y");

SampleSequencer(script$ + "MonkeyAttentionTask.pls");		' djs - renamed and moved the sequencer file. This was a copy of that used on little_al.
SampleOptimise(2,2,2,2,50);  'Set optimise mode (do this last)
SampleMode(1); 'Continuous sampling

	SampleEvent(ReadyChannel%,6,2,3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");

end;
