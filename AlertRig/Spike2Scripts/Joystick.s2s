'$Id: Joystick.s2s,v 1.7 2015-05-12 17:15:19 devel Exp $
'
' This file contains utilities for using the joystick on the alert2 rig. 

#include "../../Spike2Util/UsreyUtil.s2s"

const JSLeft% := 1;
const JSCenter% := 2;
const JSRight% := 3;
const JSUndefined% := 0;
const JSError% := -1;

var jsLeftHigh := 1;
var jsCenterLow := 2;
var jsCenterHigh := 3;
var jsRightLow := 4;
var jsChannelNumber% := -999;
var jsIsInitialized% := 0;

var jsDlgLeftHighTextItem%;
var jsDlgCenterLowTextItem%;
var jsDlgCenterHighTextItem%;
var jsDlgRightLowTextItem%;

GetJoystickParameters();

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitJoystick
'
' Scripts that use the joystick functions must indicate which input channel the 
' joystick is connected to. This function must be called before calling the 
' GetJoystickPosition() func or it will return JSError. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc InitJoystick(channel%)
    jsChannelNumber% := channel%;
    jsIsInitialized% := 1;
    return;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickParameters
'
' Called automatically when this file is included in a script. No need to 
' call it from scripts. This function fetches joystick settings for the 
' current configuration from the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc GetJoystickParameters()
    var key$;
    var stmp$;
    key$ := GetRegistryKey$(1) + "\\Joystick";
    jsLeftHigh := GetFloatRegistryValue(key$, "LeftHigh", jsLeftHigh);
    jsCenterLow := GetFloatRegistryValue(key$, "CenterLow", jsCenterLow);
    jsCenterHigh := GetFloatRegistryValue(key$, "CenterHigh", jsCenterHigh);
    jsRightLow := GetFloatRegistryValue(key$, "RightLow", jsRightLow);
    return;
end

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' SaveJoystickParameters
'
' This function saves joystick settings for the 
' current configuration in the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc SaveJoystickParameters()
    var key$;
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "LeftHigh", jsLeftHigh);
    SetFloatRegistryValue(key$, "CenterLow", jsCenterLow);
    SetFloatRegistryValue(key$, "CenterHigh", jsCenterHigh);
    SetFloatRegistryValue(key$, "RightLow", jsRightLow);
    return;
end


proc DisplayJoystickParameters()
    PrintLog("**************************************\n\n");
    PrintLog("JSLeft  :       v < %f\n", jsLeftHigh);
    PrintLog("JSCenter:  %f < v < %f\n", jsCenterLow, jsCenterHigh);
    PrintLog("JSRight :  %f < v\n", jsRightLow);
    PrintLog("\n**************************************\n");
    return;
end

func GetJoystickLeftHigh()
    return jsLeftHigh;
end

func GetJoystickCenterLow()
    return jsCenterLow;
end

func GetJoystickCenterHigh()
    return jsCenterHigh;
end

func GetJoystickRightLow()
    return jsRightLow;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickVoltage%
'
' Returns voltage currently read on joystick channel. Returns 0 if a 
' value was read, or -1 if the joystick channel was not initialized 
' (i.e. InitJoystick() was not called), or if there is some other 
' error (wrong channel number, e.g.). 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetJoystickVoltage%(&v)
    var status% := -1;
    var data%;
    if jsIsInitialized% <> 0 then
        v := ChanValue(jsChannelNumber%, MaxTime(), data%);
        if data% = 1 then
            status% := 0;
        endif
    endif
    return status%;
end

    


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GetJoystickPosition%
'
' Tests current voltage from joystick channel and determines position, 
' either JSLeft%, JSCenter%, JSRight% or JSUndefined%. If JoystickInit()
' has not been called JSError% is returned. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


func GetJoystickPosition%(&v)
    var pos% := JSError%;
    var s%;
    
    ' Check if debugging (initialized with channel < 0). If so, present a dialog to get 
    ' joystick position
    
    if jsIsInitialized% <> 0 and jsChannelNumber% < 0 then
        
        pos% := JoystickPositionDialog%();
        
    else
        
        s% := GetJoystickVoltage%(v);
        'printlog("voltage is %f, jsLeftHigh is %f and jsRightLow is %f\n",v,jsLeftHigh,jsRightLow);
        if s% = 0 then
            
            docase
            case v <= jsLeftHigh then
                pos% := JSLeft%;
            case v < jsCenterLow then
                pos% := JSUndefined%;
            case v <= jsCenterHigh then
                pos% := JSCenter%;
            case v < jsRightLow then
                pos% := JSUndefined%;
            else
                pos% := JSRight%;
            endcase
        endif
        
    endif
    
    return pos%;
end


func JoystickPositionDialog%()
    var val%;
    var pos%;
    DlgCreate("Joystick Position");
    DlgButton(100, "Undefined");
    DlgButton(101, "Left");
    DlgButton(102, "Center");
    DlgButton(103, "Right");
    val% := DlgShow();
    if val% = 0 or val% = 1 then
        pos% := JSError%;
    else
        pos% := val% - 100;
    endif
    return pos%;
end


proc JoystickConfigDialog()
    var volts:=0.0;
    var iUseJoystick% := 0;
    var iNoGaps% := 0;
    var iJoystickChannel% := 0;
    var status%;
    
    DlgCreate("Joystick Configuration", 40, 40);
    DlgAllow(0, 0, JoystickDialogCheck%);
    DlgReal(1, "Voltage", -5, 5);
    DlgCheck(2, "Use Joystick");
    DlgInteger(3, "Joystick Channel", 0, 29);
    DlgCheck(4, "No gaps");
    DlgButton(100, "Left Hi", JoystickConfigLeftHigh%, 1, 5); 
    DlgButton(101, "Ctr Low", JoystickConfigCenterLow%, 1, 6); 
    DlgButton(102, "Ctr Hi", JoystickConfigCenterHigh%, 1, 7); 
    DlgButton(103, "Right Low", JoystickConfigRightLow%, 1, 8); 
    jsDlgLeftHighTextItem% := DlgText(str$(jsLeftHigh), 20, 5, 4);
    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLow), 20, 6, 4);
    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterHigh), 20, 7, 4);
    jsDlgRightLowTextItem% := DlgText(str$(jsRightLow), 20, 8, 4);

    status% := DlgShow(volts, iUseJoystick%, iJoystickChannel%, iNoGaps%);
    
    if status% = 1 then
        PrintLog("Status = 1\n");
    endif
    
    return;
end


func JoystickConfigDialog%()   'This is only mildly different from the proc of same name (minus the %) above, 
                               'but to call this from a dialog button it has to be an integer function
    var volts:=0.0;
    var iUseJoystick% := 0;
    var iNoGaps% := 0;
    var iJoystickChannel% := 0;
    var status%;
    
    DlgCreate("Joystick Configuration", 40, 40);
    DlgAllow(0, 0, JoystickDialogCheck%);
    DlgReal(1, "Voltage", -5, 5);
    DlgCheck(2, "Use Joystick");
    DlgInteger(3, "Joystick Channel", 0, 29);
    DlgCheck(4, "No gaps");
    DlgButton(100, "Left Hi", JoystickConfigLeftHigh%, 1, 5); 
    DlgButton(101, "Ctr Low", JoystickConfigCenterLow%, 1, 6); 
    DlgButton(102, "Ctr Hi", JoystickConfigCenterHigh%, 1, 7); 
    DlgButton(103, "Right Low", JoystickConfigRightLow%, 1, 8); 
    jsDlgLeftHighTextItem% := DlgText(str$(jsLeftHigh), 20, 5, 4);
    jsDlgCenterLowTextItem% := DlgText(str$(jsCenterLow), 20, 6, 4);
    jsDlgCenterHighTextItem% := DlgText(str$(jsCenterHigh), 20, 7, 4);
    jsDlgRightLowTextItem% := DlgText(str$(jsRightLow), 20, 8, 4);

    status% := DlgShow(volts, iUseJoystick%, iJoystickChannel%, iNoGaps%);
    
    if status% = 1 then
        PrintLog("Status = 1\n");
    endif
    
    return 1;  'return of >0 allows calling dialog to remain open, return 1 whether the dialog is OKed or cancelled.
end


func JoystickDialogCheck%(item%)
    var status% := 1;
    docase
    case item% = 0 then
        PrintLog("value of use joystick check %d\n", DlgValue(2));
        DlgEnable(1-DlgValue(2), 1);
        PrintLog("value of no gaps check %d\n", DlgValue(4));
        DlgEnable(1-DlgValue(4), -101, -103);
    case item% = 2 then
        PrintLog("value of use joystick check %d\n", DlgValue(2));
        DlgEnable(1-DlgValue(2), 1);
    case item% = 3 then
        PrintLog("js init %d\n", DlgValue(3));
        InitJoystick(DlgValue(3));
    case item% = 4 then
        PrintLog("value of no gaps check %d\n", DlgValue(4));        
        DlgEnable(1-DlgValue(4), -101, -103);
    endcase
    return status%;
end


func JoystickConfigLeftHigh%()
    var key$;
    var v;
    if DlgValue(2) = 0 then
        v := DlgValue(1);
    else
        if GetJoystickVoltage%(v) <> 0 then
            LogError("", "Error reading joystick voltage. Check channel number.\n");
            return 1;
        endif
    endif
    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "LeftHigh", v);
    DlgValue$(jsDlgLeftHighTextItem%, str$(v));
    
    if DlgValue(4) = 1 then
        SetFloatRegistryValue(key$, "CenterLow", v);
        DlgValue$(jsDlgCenterLowTextItem%, str$(v));
    endif
    
    GetJoystickParameters();
    DisplayJoystickParameters();
    return 1;
end

func JoystickConfigCenterLow%()
    var key$;
    var v;
    if DlgValue(2) = 0 then
        v := DlgValue(1);
    else
        if GetJoystickVoltage%(v) <> 0 then
            LogError("", "Error reading joystick voltage. Check channel number.\n");
            return 1;
        endif
    endif
    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "CenterLow", v);
    DlgValue$(jsDlgCenterLowTextItem%, str$(v));
    
    GetJoystickParameters();
    DisplayJoystickParameters();
    return 1;
end

func JoystickConfigCenterHigh%()
    var key$;
    var v;
    if DlgValue(2) = 0 then
        v := DlgValue(1);
    else
        if GetJoystickVoltage%(v) <> 0 then
            LogError("", "Error reading joystick voltage. Check channel number.\n");
            return 1;
        endif
    endif
    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "CenterHigh", v);
    DlgValue$(jsDlgCenterHighTextItem%, str$(v));
    
    if DlgValue(4) = 1 then
        SetFloatRegistryValue(key$, "RightLow", v);
        DlgValue$(jsDlgRightLowTextItem%, str$(v));
    endif
    
    GetJoystickParameters();
    DisplayJoystickParameters();
    return 1;
end

func JoystickConfigRightLow%()
    var key$;
    var v;
    if DlgValue(2) = 0 then
        v := DlgValue(1);
    else
        if GetJoystickVoltage%(v) <> 0 then
            LogError("", "Error reading joystick voltage. Check channel number.\n");
            return 1;
        endif
    endif
    
    key$ := GetRegistryKey$(1) + "\\Joystick";
    SetFloatRegistryValue(key$, "RightLow", v);
    DlgValue$(jsDlgRightLowTextItem%, str$(v));
    
    GetJoystickParameters();
    DisplayJoystickParameters();
    return 1;
end
