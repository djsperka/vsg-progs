#include "Joystick.s2s"
#include "ExtractionUtilities.s2s"
#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2util/LogUtilities.s2s"
#include "../../Spike2util/BatchUtilities.s2s"

var jxHOutput := -1;    ' output file handle; if < 0 output is to log window only
var jxB[100];           ' boundaries of joystick regions
var jxNB% := 0;         ' number of boundaries
var jxChan% := -1;
var jxIsInitialized% := 0;
var jxData%;            ' data window
var jxNProcessed% := 0;

LogInit(1);




'jxNProcessed% := ProcessListFile%("", JoyX%);
'LogStatus("TestProcessListFile", "Processed " + str$(jxNProcessed%) + " files.");





' boundaries[] are voltages of the edges of the joystick regions you want defined. 
' boundaries should be ordered from lowest voltage to highest voltage. 


func JoystickExtractInit%(boundaries[], channel%, hOut, dataWindow%)
    var status% := 0;
    jxHOutput := hOut;
    jxData% := dataWindow%;
    jxChan% := channel%;
    ArrConst(jxB[0:Len(boundaries[])], boundaries[]);
    jxNB% := Len(boundaries[]);
    
    ' test boundaries
    var i%;
    var prev;
    prev := jxB[0];
    for i% := 1 to jxNB%-1 do
        if jxB[i%] <= prev then
            LogError("JoystickExtract_Init", "Boundaries must be ordered from lowest to highest voltage.");
            status% := -1;
        endif
    next
    
    if status% = 0 then 
        jxIsInitialized% := 1;
    endif
    
    return 0;
end



func JoystickExtract%(tstart, tend)
    var v[1];
    var tlast := -1;
    var tnew := 0;
    var n%;
    var lastregion% := -1;
    var newregion% := -1;
    var vNoise := 0.001;
    var tMin := 0.01;
    var s$;
    
    View(jxData%);
    
    CursorDelete(-1);
    Cursor(0, 0);
    while tnew > -1 do
        
        ' Get voltage and region at tnext
        'n% := ChanData(jxChan%, v[], tnew, MaxTime());
        v[0] := ChanValue(jxChan%, tnew);
        newregion% := JoyRegion%(v[0]);
        
        ' record transition
        'LogStatus("JoystickExtract", "In region " + str$(lastregion%) + " from " + str$(tlast) + "-" + str$(tnew) + " new region " + str$(newregion%) + " v=" + str$(v[0]));
        s$ := print$("%d %f %f\n", lastregion%, tlast, tnew);
        'View(LogHandle()).Print(s$);
        if jxHOutput >= 0 and lastregion% > -1 then
            View(jxHOutput).Print(s$);
        endif
        
        
        ' set new search criteria
        docase
        case newregion% > 0 and newregion% < jxNB% then
            CursorActive(0, 19, jxChan%, 0, "", "", jxB[newregion%-1], vNoise, tMin, "", jxB[newregion%]);
        case newregion% = 0 then
            CursorActive(0, 7, jxChan%, 0, "", "", jxB[0], vNoise, tMin);
        case newregion% = jxNB% then
            CursorActive(0, 8, jxChan%, 0, "", "", jxB[newregion%-1], vNoise, tMin);
        else
            LogError("JoystickExtract", "Region " + str$(newregion%) + " at " + str$(tnew) + " out of range (0-" + str$(jxNB%) + ")");
            return -1;
        endcase
        
        ' do next search
        tlast := tnew;
        lastregion% := newregion%;
        tnew := CursorSearch(0, 0);
        if tnew < 0 then
            LogError("JoystickExtract", "CursorSearch failed. Check noise and delay params. Last good search was at t=" + str$(tlast) + " max time is " + str$(MaxTime()));
            LogInfo("CursorValid is " + str$(CursorValid(0)));
            return -1;
        endif
        
    wend
    
    return 0;
end

func JoyRegion%(v)
    var region% := 0;
    while region% < jxNB% and v > jxB[region%] do
        region% += 1;
    wend
    return region%;
end

func NextJoystickRegion%(tStart, &tEnd)
    var v;
    var region%;
    var vNoise := 0.001;
    var tMin := 0.01;
    
    ' if tStart is negative it means use the first time in the file. 
    ' ChanValue doesn't like negative time, though, so we have to fetch the file's min time. 
    if tStart < 0 then
        tStart := 0;
    endif
    
    ' Position cursor 0
    Cursor(0, tStart);
    
    ' Get voltage and region at tStart
    v := ChanValue(jxChan%, tStart);
    region% := JoyRegion%(v);
    
    ' set new search criteria
    docase
    case region% > 0 and region% < jxNB% then
        CursorActive(0, 19, jxChan%, 0, "", "", jxB[region%-1], vNoise, tMin, "", jxB[region%]);
    case region% = 0 then
        CursorActive(0, 7, jxChan%, 0, "", "", jxB[0], vNoise, tMin);
    case region% = jxNB% then
        CursorActive(0, 8, jxChan%, 0, "", "", jxB[region%-1], vNoise, tMin);
    else
        LogError("JoystickExtract", "Region " + str$(region%) + " at " + str$(tStart) + " out of range (0-" + str$(jxNB%) + ")");
        return -1;
    endcase
        
    ' do next search
    tEnd := CursorSearch(0, 0);
    'LogStatus("NextJoystickRegion", "tStart " + str$(tStart) + " v " + str$(v) + " region " + str$(region%) + " tEnd " + str$(tEnd));
    return region%;
end


' Start looking at time tStart. When does joystick enter region iRegion%? 
' Returns iRegion% if such a time is found (tEnter is then set to the first entry 
' time after tStart). If no such time found, returns -1.

func WhenInJoystickRegion%(tStart, iRegion%, &tEnter)
    var v;
    var region%;
    var vNoise := 0.001;
    var tMin := 0.01;
    var status% := -1;
    
    ' if tStart is negative it means use the first time in the file. 
    ' ChanValue doesn't like negative time, though, so we have to fetch the file's min time. 
    if tStart < 0 then
        tStart := 0;
    endif
    
    ' Position cursor 0, then get voltage and region
    Cursor(0, tStart);
    v := ChanValue(jxChan%, tStart);
    region% := JoyRegion%(v);
    
    
    ' If we are already in iRegion% then we're done. 
    if region% = iRegion% then
        tEnter := tStart;
        status% := iRegion%;
    else
        ' set new search criteria
        docase
        case iRegion% > 0 and iRegion% < jxNB% then
            ' 20 is "Within Thresholds"
            CursorActive(0, 20, jxChan%, 0, "", "", jxB[iRegion%-1], vNoise, tMin, "", jxB[iRegion%]);
        case iRegion% = 0 then
            ' 8 is "Falling Threshold"
            CursorActive(0, 8, jxChan%, 0, "", "", jxB[0], vNoise, tMin);
        case region% = jxNB% then
            ' 7 is "Rising Threshold"
            CursorActive(0, 7, jxChan%, 0, "", "", jxB[region%-1], vNoise, tMin);
        else
            LogError("JoystickExtract", "Region " + str$(region%) + " at " + str$(tStart) + " out of range (0-" + str$(jxNB%) + ")");
            return -1;
        endcase
        
        ' search
        tEnter := CursorSearch(0, 0);
        'LogStatus("WhenInJoystickRegion", "tStart " + str$(tStart) + " v " + str$(v) + " region " + str$(region%) + " Enter region " + str$(iRegion%) + " tEnter " + str$(tEnter));
        if tEnter >= 0 then
            status% := iRegion%;
        endif
    endif
    
    return status%;
end
