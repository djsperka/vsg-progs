#include "ExtractionUtilities.s2s"
#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2util/LogUtilities.s2s"
#include "../../Spike2util/BatchUtilities.s2s"

var spHOutput := -1;    ' output file handle; if < 0 output is to log window only
var spChan% := -1;
var spMarker% := -1;
var spIsInitialized% := 0;
var spData%;            ' data window

LogInit(1);


func SpikeX%(h%, args$)
    var n%;
    var sOutfile$;
    var htxt%;
    var tlast := -1;
    
    
    n% := ReadStr(args$, spChan%, spMarker%);
    LogStatus("SpikeX", "Args " + args$ + " Read " + str$(n%));
    
    docase
    case n% = 1 then
        spMarker% := -1;    ' all codes/spikes accepted
    case n% = 0 then
        LogError("SpikeX", "List file must have filenames followed by channel number (and optional marker code)");
        return 1;
    endcase
    
    ' Open output text file
    sOutfile$ := ReplaceFileExtension$(h%, "");
    if spMarker% = -1 then
        sOutfile$ += Print$("_%d.spk", spChan%);
    else
        sOutfile$ += Print$("_%d_%d.spk", spChan%, spMarker%);
    endif
    htxt% := FileOpen(sOutfile$, 8, 1);
    
    ' Set markers
    View(h%);
    MarkMask(spChan%, 0);           ' Set mask mode 0 == AND subsequent masks
    MarkMask(spChan%, -1, 1, -1);   ' all layers, include all codes
    MarkMask(spChan%, 0, 0, -1);    ' layer 0, exclude all codes
    MarkMask(spChan%, 0, 1, spMarker%);     ' layer 0, include marker code specified in args (or all codes if none specified in args)
    
    ' Now find spikes
    tlast := -1;
    tlast := NextTime(spChan%, tlast);
    while tlast > -1 do
        View(htxt%).Print("%f\n", tlast);
        tlast := View(h%).NextTime(spChan%, tlast);
    wend
    
    return 0;
end
