'$Id: AcuteMSequenceExtract.s2s,v 1.2 2011-11-03 23:57:30 devel Exp $

' AcuteMSequenceExtract
'
' This script will extract trigger times from channels in data files recorded with Spike2. 
' A text file containing filenames (either full paths or relative paths are OK) and channel numbers
' is required. Trigger times are written to text files, one spike time per line, in the same folder 
' as the data file they are taken from. 
' 
' The input file must contain data file names, one per line. Blank lines and lines beginning with 
' a "#" are ignored. The filename must be followed by a channel number and (optionally) a wavemark
' ID. 
'
' Data file names can be full or relative pathnames. If relative, they are relative to the location
' of the input text file itself. You must have write access to the folders where the data files 
' are located because that is where the output files are written. The output files have the same 
' base name as the data files with "_CH_WM.spk" appended. "CH" is the channel number and "WM" is 
' the wavemark id. If no wavemark ID is provided then ALL spikes are extracted, and the output 
' file has "_CH.spk" appended. 

#include "../../Spike2Util/BatchUtilities.s2s"
#include "../../Spike2Util/FileUtilities.s2s"

var nProcessed% := 0;
var chanTerms% := 21;   ' Channel number for terms
const nSequenceTerms% := 32767;

nProcessed% := ProcessListFile%("", AcuteMSequenceTrigX%);
LogStatus("AcuteMSequenceExtract", "Processed " + str$(nProcessed%) + " files.");



func GetTermsChannel%(h%)
    var list%[10];
    var i%;
    var chan% := 0;
    
    ' Find all event channels
    ChanList(list%[], 0x2);
    for i% := 1 to list%[0] do
        if ChanTitle$(list%[i%]) = "Terms" then
            return list%[i%];
        endif
    next
    return 0;
end

    


func AcuteMSequenceTrigX%(h%, args$)
    var n%;
    var sOutfile$;
    var htxt%;
    var tLast := -1;
    var tTrigger := -1;
    var nTriggers% := 0;
    
    chanTerms% := GetTermsChannel%(h%);
    if chanTerms% = 0 then
        LogError("AcuteMSequenceTrigX", "Cannot get terms channel number!");
        return 1;
    endif
    
    
    sOutfile$ := ReplaceFileExtension$(h%, ".trg");
    htxt% := FileOpen(sOutfile$, 8, 1);
    LogStatus("AcuteMSequenceTrigX", "Output file " + sOutfile$);
    
    tTrigger := View(h%).NextTime(chanTerms%, tLast);
    while tTrigger > 0 do
        View(htxt%).Print("%f\n", tTrigger);
        nTriggers% += 1;
        tLast := tTrigger;
        tTrigger := View(h%).NextTime(chanTerms%, tLast);
    wend
    
    LogStatus("AcuteMSequenceTrigX", "nTriggers=" + str$(nTriggers%));
    
    return 0;
end
