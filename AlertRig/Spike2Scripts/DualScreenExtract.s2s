#include "ExtractionUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"
#include "../../Spike2Util/FileUtilities.s2s"


var hData%;
var hTxt;
var sInit$ := "";
var iCode%[4];
var parFile$;
var hPar;
var dF[1000];
var dS[1000];
var dX[1000];
var nF%, nS%, nX%;
var mean, stdev;

LogInit(1);

' Get data file. The "current" view must be a time view, otherwise we bail. 
hData% := View(0);
if (ViewKind(hData%) <> 0) then
    Message("Current view must be a time view.");
    halt;
endif

exX%(hData%, "");

ArrSum(dF[0:nF%], mean, stdev);
LogStatus("diff(F)", str$(mean) + "+-" + str$(stdev));
ArrSum(dS[0:nS%], mean, stdev);
LogStatus("diff(S)", str$(mean) + "+-" + str$(stdev));
ArrSum(dX[0:nX%], mean, stdev);
LogStatus("diff(X)", str$(mean) + "+-" + str$(stdev));


func exX%(h%, args$)
    var status% := 0;
    var tFound := -1;
    var sFound$;
    var tLast := -1;
    var sIgnore$;
    var tTrigger;
    var tMaster, tSlave;
    
    ' these two lines for tuning
    'var channelMaster% := 41;
    'var channelSlave% := 45;
    
    ' these two lines for donuthunt
    var channelMaster% := 19;
    var channelSlave% := 20;
        
    sIgnore$ := "0aQRV";
    tFound := NextKey(tLast, sFound$, sIgnore$);
    while (tFound >= 0) do
        
        PrintLog("Found key " + sFound$ + "\n");
        if FindFrames%(tFound, channelMaster%, tMaster, channelSlave%, tSlave) > 0 then
            LogStatus("exX", "found frames for " + sFound$ + "@" + str$(tFound) + " M " + str$(tMaster) + " S " + str$(tSlave) + " diff: " + str$(tSlave-tMaster));
            docase 
            case sFound$ = "F" then
                dF[nF%] := tSlave-tMaster;
                nF% += 1;
            case sFound$ = "S" then
                dS[nS%] := tSlave-tMaster;
                nS% += 1;
            case sFound$ = "X" then
                dX[nX%] := tSlave-tMaster;
                nX% += 1;
            endcase
        endif
        
        tLast := tFound;
        tFound := NextKey(tLast, sFound$, sIgnore$);
            
    wend
        
    return 0;
end

func FindFrames%(t, chM%, &tM, chS%, &tS)
    var tMFall, tSFall;
    
    ' look for pulse up in chM% and chS%
    if FindPulseUp%(chM%, t, tM, tMFall) = 1 and FindPulseUp%(chS%, t, tS, tSFall) = 1 then
        return 1;
    else
        return -1;
    endif
end
