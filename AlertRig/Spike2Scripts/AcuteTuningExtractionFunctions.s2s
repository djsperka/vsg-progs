'$Id: AcuteTuningExtractionFunctions.s2s,v 1.6 2012-04-16 23:01:42 devel Exp $'

#include "ExtractionUtilities.s2s"
#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"
#include "../../Spike2Util/FileUtilities.s2s"

const maxParam% := 1000;
var actunParam[maxParam%];
var actunIndex%[maxParam%];
var actunNParam% := 0;
var actunTriggerChannel%;
var actunVersion% := 1;

func AcTunX%(h%, args$)
    var sParFile$;
    var sTxtFile$;
    var iStatus% := 0;
    var iParam% := 0;
    var tStart, tEnd, tLast:=-1;
    var tFound;
    var v, h;
    var parameter;
    
    ' Initialize
    actunNParam% := 0;
    
    ' Determine the tuning version. 
    if GetTuningVersion%(actunVersion%, actunTriggerChannel%) = 1 then
        LogStatus("AcTunX", "Version " + str$(actunVersion%) + " trig/stim: " + str$(actunTriggerChannel%));
    else
        LogError("AcTunX", "Error deterimining tuning version.");
        return 1;
    endif
    
    ' if args$ is not empty, then we assume it is the par filename
    
    if Len(args$) > 0 then
        sParFile$ := args$;
    else
        sParFile$ := ReplaceFileExtension$(h%, ".par");
    endif
    LogInfo("par file " + sParFile$);
    sTxtFile$ := ReplaceFileExtension$(h%, ".txt");
    LogInfo("txt file " + sTxtFile$);
    
    v := View();
    h := FileOpen(sTxtFile$, 8, 1);
    View(v);
    
    ' Version 1 is the old style tuning data. The data file does not contain the tuning parameters - they must be extracted
    ' from the par file. 
    
    ' Version 3/4 are new stype tuning data. The par file can be ignored. Instead, the parameter values are embedded in the
    ' data file as text marks. Look for text mark starting with "T,". The value following the comma is the tuned parameter
    ' value. From there we search for a sample key "S", then the trig on/off. Version 3 uses the regular stim channel, but 
    ' version 4 was a hack to work around a bug in Visage triggering, and the frame channel pulses are used to determine
    ' stim on and off times. 
    
    docase 
    case actunVersion% = 1 then
        
        ' Open par file and get tuning parameters
        if GetV1TuningParameters%(sParFile$) < 0 then
            LogError("AcTunX", "Error getting parameters from par file " + sParFile$);
            return 1;
        endif
    
        while iParam% < actunNParam% and GetNextStimPeriod%(actunTriggerChannel%, tLast, tStart, tEnd) = 1 do
            
            View(h).Print("%f %f %f\n", actunParam[iParam%], tStart, tEnd);
            PrintLog("%f %f %f\n", actunParam[iParam%], tStart, tEnd);
            iParam% += 1;
            View(v);
            
        wend
        
    case actunVersion% = 3 then
        
        tLast := GetNextTuningParameterTextMark(tLast, parameter);
        while tLast > 0 and GetNextStimPeriod%(actunTriggerChannel%, tLast, tStart, tEnd) = 1 do
            
            View(h).Print("%f %f %f\n", parameter, tStart, tEnd);
            PrintLog("%f %f %f\n", parameter, tStart, tEnd);
            View(v);
            tLast := GetNextTuningParameterTextMark(tLast, parameter);
            
        wend
        
    case actunVersion% = 4 then
        
        tLast := GetNextTuningParameterTextMark(tLast, parameter);
        while tLast > 0 and GetNextFramePeriod%(actunTriggerChannel%, tLast, tStart, tEnd) = 1 do
            
            View(h).Print("%f %f %f\n", parameter, tStart, tEnd);
            PrintLog("%f %f %f\n", parameter, tStart, tEnd);
            View(v);
            tLast := GetNextTuningParameterTextMark(tLast, parameter);
            
        wend
        
    endcase
    
        
    return iStatus%;
end


func GetNextTuningParameterTextMark(tstart, &parameter)
    
    var t;
    var val$ := "";
    t := NextTextMark(tstart, val$);
    while t >= 0 and InStr(val$, "T,") <> 1 do
        tstart := t;
        t := NextTextMark(tstart, val$)
    wend
    if t >= 0 then
        parameter := val(Mid$(val$, 3));
    endif
    return t;
    
end

    
    
' Return neg on error
func GetV1TuningParameters%(sParFile$)
    var iStatus% := -1;
    var h;
    var v; ' save current view here
    var line$;
    var key$;
    var n%, i%;
    var x;
    var s$;
    
    v := View();
    h := FileOpen(sParFile$, 8);
    if h < 0 then
        LogError("GetTuningParameters", "Cannot open par file " + sParFile$);
        return iStatus%;
    endif
    
   
    ' Read first line of par file
    Read(line$);
    docase 
    case InStr(line$, "[Temporal") = 1 then        
        key$ := "Temporal Frequency";
        LogStatus("GetTuningParameters", "TF tuning");
    case InStr(line$, "[Spatial") = 1 then        
        key$ := "Spatial Frequency";
        LogStatus("GetTuningParameters", "SF tuning");
    case InStr(line$, "[Orientation") = 1 then        
        key$ := "Orientation";
        LogStatus("GetTuningParameters", "Ori tuning");
    case InStr(line$, "[Contrast") = 1 then
        key$ := "Grating Contrast";
        LogStatus("GetTuningParameters", "Contrast tuning");
    case InStr(line$, "[Aperture") = 1 then
        key$ := "Aperture";
        LogStatus("GetTuningParameters", "Area tuning");
    case InStr(line$, "[XY") = 1 then
        key$ := "Phase";
        LogStatus("GetTuningParameters", "XY tuning");
    else
        LogError("GetTuningParameters", "Tuning type not handled! (" + line$ + ")");
        iStatus% := -1;
        return iStatus%;
    endcase
    
    ' Now read line by line
    while Read(s$, i%, x) >= 0 do
        'PrintLog("%s\n", s$);
        if s$ = key$ then
            actunIndex%[actunNParam%] := i%;
            actunParam[actunNParam%] := x;
            actunNParam% += 1;
        endif
    wend
    LogStatus("GetTuningParameters", "Got " + str$(actunNParam%) + " tuning parameters.");
    if actunNParam% > 0 then
        iStatus% := 0;
    endif
    
    FileClose();
    View(v);
    return iStatus%;
end




' Find tuning version. Old-style acute tuning files have no text marks. Newer ones will have text marks
' and a version number in them. This function will return a version number and a channel for stim triggers. 
' The old-style files will be assigned version "1". 
' Returns 1 on success, or negative error value. 

func GetTuningVersion%(&version%, &trigChannel%)
    var s$;
    var iStatus% := 0;
    var tLast := -1;
    var count% := 0;
    var cLength%;
    var i%;
    while iStatus% = 0 do
        tLast := NextTextMark(tLast, s$);
        docase
        case tLast < 0 then
            ' no text marks means this is old-style. 
            version% := 1;
            if GetTriggerChannel%(version%, trigChannel%) = 1 then
                iStatus% := 1;
            else
                iStatus% := -1;
            endif
        else
            ' Parse version and command line length
            i% := InStr(s$, ",");
            ReadStr(DelStr$(s$, 1, i%), version%, cLength%);
            PrintLog("Version %d Len %d\n", version%, cLength%);
            ' Figure out which channel number is the stim channel
            if GetTriggerChannel%(version%, trigChannel%) = 1 then
                iStatus% := 1;
            else
                iStatus% := -1;
            endif
        endcase
    wend
    return iStatus%;
end
    
    


' Find channel with "Level" type. Assuming there's just one.
' Return 1 if found, 0 otherwise. 

func GetTriggerChannel%(iVersion%, &channel%)
    var iStatus% := 0;
    var iChannels%[10];
    docase
    case iVersion% = 1 then
        
        if ChanList(iChannels%[], 0x4) = 1 then
            iStatus% := 1;
            channel% := iChannels%[1];
        endif
        
    case iVersion% = 3 then
        
        iStatus% := GetNamedChannel%("Stim", channel%);
        
    case iVersion% = 4 then
        
        iStatus% := GetNamedChannel%("Frame", channel%);
        
    else
        
        LogError("GetTriggerChannel", "Unhandled version number (" + str$(iVersion%) + ")");
        
    endcase
        
    return iStatus%;
end



' Find channel with "Level" type and "Stim" title.
' Return 1 if found, 0 otherwise. 

func GetNamedChannel%(name$, &channel%)
    var iStatus% := 0;
    var i%;
    var iChannels%[10];
    if ChanList(iChannels%[], 0x4) > 0 then
        for i% := 1 to iChannels%[0] do
            if ChanTitle$(iChannels%[i%]) = name$ then
                channel% := iChannels%[i%];
                iStatus% := 1;
                i% := iChannels%[0];    ' Exit loop
            endif
        next
    endif
    return iStatus%;
end


' Find the next up/down period on the channel actunStimChannel%, starting at tLast.
' Returns 1 if a period is found, otherwise return 0. If a period is found, the 
' tLast value is set so the next call will find a new period. 

func GetNextStimPeriod%(actunStimChannel%, &tLast, &tStart, &tEnd)
    var iStatus% := 0;
    tStart := NextTriggerTransition(actunStimChannel%, tLast, 0);
    if tStart > 0 then
        tEnd := NextTriggerTransition(actunStimChannel%, tStart, 1);
        if tEnd > 0 then
            tLast := tEnd;
            iStatus% := 1;
        endif
    endif
    return iStatus%;
end


' Find a stim period like GetNextStimPeriod, but do it with pulses on the 
' frame channel. Some acute rig files use the frame channel to work around 
' a visage triggering bug. 

func GetNextFramePeriod%(channel%, &tLast, &tStart, &tEnd)
    var iStatus% := 0;
    var s%;
    var tRise, tFall;
    s% := FindPulseUp%(channel%, tLast, tStart, tFall);
    if s% = 1 then
        s% := FindPulseUp%(channel%, tStart, tEnd, tFall);
        if s% = 1 then
            tLast := tEnd;
            iStatus% := 1;
        endif
    endif
    return iStatus%;
end
