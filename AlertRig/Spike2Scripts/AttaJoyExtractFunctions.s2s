' $Id: AttaJoyExtractFunctions.s2s,v 1.4 2011-09-22 00:43:57 djsperka Exp $

#include "ExtractionUtilities.s2s"
#include "JoystickExtractFunctions.s2s"
#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/BatchUtilities.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"

var axHOutput := -1;    ' output file handle; if < 0 output is to log window only
var axChan% := -1;
var axIsInitialized% := 0;
var axData%;            ' data window
var axNProcessed% := 0;
var axVersion% := 0;

const axstateError% := -1;
const axstateStart% := 0;
const axstateFixpt% := 1;
const axstateStim% := 2;
const axstateChange% := 3;
const axstateEndTrial% := 4;
var axIState% := axstateStart%;

var axTFixpt := -1;;
var axTStim := -1;
var axTChange := -1;
var axTEndTrial := -1;
var axTResponse := -1;

const axTTNone% := -1;
const axTTF% := 0;
const axTTG% := 1;
const axCTNone% := -1;
const axCTC% := 0;
const axCTD% := 1;
const axPTNone% := 0;
const axPTPulse% := 1;
var axttype% := axTTNone%;
var axctype% := axCTNone%;
var axptype% := axPTNone%;
const axChanFixpt% := 21;
const axChanStim% := 23;
const axChanChg% := 24;
const axChanEndTrial% := 21;    ' look for falling edge of fixpt

var axBoundaries[4];            ' Joystick boundaries
const axChanJoystick% := 13;    ' shouldn't be const but OK for now

LogInit(1);


axBoundaries[0] := 2.37;
axBoundaries[1] := 2.40753;
axBoundaries[2] := 2.60;
axBoundaries[3] := 2.61;


func AttaX%(h%, args$)
    var n%;
    var sOutfile$;
    var htxt%;
    var tLast := -1;
    var tFound := -1;
    var sFound$;
    var sIgnore$ := "TWwsJRq";
    var tJoy4;
    var tLastTextMarker := -1;
    var tText;
    var iTextCode%[4];
    var sInitTextMarkers$[4];
    var i%;
    var r2%, r4%;
    
    ' If args is present, it should contain voltage boundaries for the joystick regions. 
    ' If args are not present, search the data file channel30 for text markers. If they are
    ' present, then the 4th one holds the bounaries. 
    ' If args not present, and no text markers, then we assume default values for the boundaries. 
    
    if Len(args$)>0 then
        
        if ReadStr(args$, axBoundaries[0], axBoundaries[1], axBoundaries[2], axBoundaries[3]) <> 4 then
            LogError("AttaX", "Error in file args (" + args$ + "): should have 4 values.");
            return -1;
        endif
        
    else
        
        tLastTextMarker := -1;
        i% := 0;
        View(h%);
        repeat
            tText := NextTime(30, tLastTextMarker, iTextCode%[], sInitTextMarkers$[i%]);
            if tText >= 0 then
                tLastTextMarker := tText;
                i% += 1;
            endif
            until tText < 0 or i% = 4;
        
        docase
        case i% > 0 and i% < 4 then
            LogError("", "Not enough text markers in file.");
            return -1;
        case i% = 4 then
            tLast := tLastTextMarker;
            for i% := 0 to 3 do
                LogInfo("Text Marker #" + str$(i%) + ": " + sInitTextMarkers$[i%]);
            next
            
            ' Version number is at the tail end of the first text marker
            i% := InStr(sInitTextMarkers$[0], ",");
            if i% = 0 then
                LogError("", "Error reading first text marker - it should contain version number!");
            else
                axVersion% := val(Mid$(sInitTextMarkers$[0], i%+1));
                if ParseInitString%(sInitTextMarkers$[3], axVersion%) = 0 then
                    LogInfo("Got joystick boundaries from text markers.");
                else
                    LogError("AttaX", "Parse error in text marker string.");
                    return -1;
                endif
            endif
        else
            LogInfo("No args, no text markers. Assuming version 0 data.");
        endcase
       
    endif
    
    ' Initialize joystick functions
    JoystickExtractInit%(axBoundaries[], axChanJoystick%, -1, h%);
    
    ' TODO: Open output file.
    ' Open parameter file
    sOutfile$ := ReplaceFileExtension$(h%, "ajj");
    htxt% := FileOpen(sOutfile$, 8, 1);

    View(h%);
    tFound := NextKeyOrText(tLast, sFound$, sIgnore$);
    while tFound >= 0 and  axIState% <> axstateError% do

        'LogInfo(sFound$ + " " + str$(tFound));
        
        docase 
        case axIState% = axstateStart% then
            docase
            case sFound$ = "F" then
                axttype% := axTTF%;
                if AttaXGetTimeFor%(sFound$, tFound, axTFixpt) <> 0 then
                    axIState% := axstateError%;
                else
                    axIState% := axstateFixpt%;
                    r4% := NextJoystickRegion%(axTFixpt, tJoy4);
                    r2% := WhenInJoystickRegion%(tJoy4, 2, axTResponse);
                    'LogStatus("Joystick", "r4=" + str$(r4%) + " tFixpt=" + str$(axTFixpt) + "-" + str$(tJoy4) + " r2 at " + str$(axTResponse));
                endif
                
            case sFound$ = "G" then
                axttype% := axTTG%;
                if AttaXGetTimeFor%(sFound$, tFound, axTFixpt) <> 0 then
                    axIState% := axstateError%;
                else
                    axIState% := axstateFixpt%;
                    r4% := NextJoystickRegion%(axTFixpt, tJoy4);
                    r2% := WhenInJoystickRegion%(tJoy4, 2, axTResponse);
                    'LogStatus("Joystick", "r4=" + str$(r4%) + " tFixpt=" + str$(axTFixpt) + "-" + str$(tJoy4) + " r2 at " + str$(axTResponse));
                endif
            else
                LogStatus("stateStart", "Unexpected key: " + sFound$ + " at " + str$(tFound));
            endcase
        case axIState% = axstateFixpt% then
            docase
            case sFound$ = "P" then
                axptype% := axPTPulse%;
            case sFound$ = "S" then
                if AttaXGetTimeFor%(sFound$, tFound, axTStim) <> 0 then
                    axIState% := axstateError%;
                else
                    axIState% := axstateStim%;
                endif
            case sFound$ = "X" then
                if AttaXGetTimeFor%(sFound$, tFound, axTEndTrial) <> 0 then
                    axIState% := axstateError%;
                else
                    axIState% := axstateEndTrial%;
                endif
            else
                LogStatus("stateFixpt", "Unexpected key: " + sFound$ + " at " + str$(tFound));
            endcase
        case axIState% = axstateStim% then
            docase
            case sFound$ = "C" or sFound$ = "D" then
                if sFound$ = "C" then
                    axctype% := axCTC%;
                else
                    axctype% := axCTD%;
                endif
                
                if AttaXGetTimeFor%(sFound$, tFound, axTChange) <> 0 then
                    axIState% := axstateError%;
                else
                    axIState% := axstateChange%;
                endif
            case sFound$ = "X" then
                if AttaXGetTimeFor%(sFound$, tFound, axTEndTrial) <> 0 then
                    axIState% := axstateError%;
                else
                    axIState% := axstateEndTrial%;
                endif
            else
                LogStatus("stateStim", "Unexpected key: " + sFound$ + " at " + str$(tFound));
            endcase
        case axIState% = axstateChange% then
            docase
            case sFound$ = "X" then
                if AttaXGetTimeFor%(sFound$, tFound, axTEndTrial) <> 0 then
                    axIState% := axstateError%;
                else
                    axIState% := axstateEndTrial%;
                endif
            else
                LogStatus("stateStim", "Unexpected key: " + sFound$ + " at " + str$(tFound));
            endcase                
        else
            LogError("AttaX", "Unknown state " + str$(axIState%));
            return -1;
        endcase
        
        ' Flush trial if end found
        if axIState% = axstateEndTrial% then
            var s$;
            s$ := Print$("%d %d %f %f %d %f %f %f\n", axttype%, axptype%, axTFixpt, axTStim, axctype%, axTChange, axTEndTrial, axTResponse);
            'PrintLog(s$);
            ' TODO: Write to file
            if htxt% >= 0 then
                View(htxt%).Print("%s", s$);
            endif
            axttype% := axTTNone%;
            axptype% := axPTNone%;
            axctype% := axCTNone%;
            axTFixpt := -1;
            axTStim := -1;
            axTChange := -1;
            axTEndTrial := -1;
            axTResponse := -1;
            axIState% := axstateStart%;
        endif
        
        tLast := tFound;    
        tFound := NextKeyOrText(tLast, sFound$, sIgnore$);
    wend
    
    ' TODO: close output file
    
    return 0;
end


func ParseInitString%(s$, vers%)
    var status% := 1;
    docase
    case vers% = 1 then
        if ReadStr(s$, axBoundaries[0], axBoundaries[1], axBoundaries[2], axBoundaries[3]) <> 4 then
            LogError("", "Expected 4 values in version 1 init string.");
        else
            status% := 0;
        endif
    else
        LogError("", "Unknown version number (" + str$(vers%) + ")");
    endcase   
    return status%;
end


                
func AttaXGetTimeFor%(s$, tFound, &tResult)
    var status% := 0;
    docase
    case s$ = "F" or s$ = "G" then
        
        status% := FindRisingEdge%(axChanFixpt%, tFound, tResult);
        if status% <> 0 then
            LogError("AttaXGetTimeFor", "Fixpt edge not found(status " + str$(status%) + "). F/G at " + str$(tFound));
            return -1;
        endif
        
    case s$ = "S" then
        
        status% := FindRisingEdge%(axChanStim%, tFound, tResult);
        if status% <> 0 then
            LogError("AttaXGetTimeFor", "Stim edge not found. S at " + str$(tFound));
            return -1;
        endif
        
    case s$ = "C" or s$ = "D" then
        
        status% := FindRisingEdge%(axChanChg%, tFound, tResult);
        if status% <> 0 then
            LogError("AttaXGetTimeFor", "Chg edge not found. C at " + str$(tFound));
            return -1;
        endif
        
    case s$ = "X" then
        
        status% := FindFallingEdge%(axChanFixpt%, tFound, tResult);
        if status% <> 1 then
            LogError("AttaXGetTimeFor", "Fixpt falling edge not found. X at " + str$(tFound));
            return -1;
        endif
        
    else
        
        LogError("AttaXGetTimeFor", "Don't know how to get time for \"" + s$ + "\" at " + str$(tFound));
        return -1;
        
    endcase
    
    return 0;
end
