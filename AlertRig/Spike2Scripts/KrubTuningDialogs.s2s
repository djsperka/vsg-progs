' $Id: KrubTuningDialogs.s2s,v 1.8 2013-07-22 22:39:53 jeff Exp $

#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "KrubGratings.s2s"


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
'
' These vars have their values set here but are used in the main tuning script. 
' This file must be #included in the main script. Don't worry about overlapping
' #include files (i.e. files that may be included here AND in the main script) - 
' spike2 is smart about it and only includes the file once. 
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'nifty OK button off/on
var KrubTuningDialogAllowOK%;

'cooling/continuous recording
var DoCooling%;
var NFreezeControls%;
var OnlyRecordDuringStimulus%;
const dlgCooling% := 1;
const dlgNFreeze% := 2;
const dlgStartMode% := 3;
var isTuning1%;

' Colors
var tunBGColor$[3];
var tunBGColorIndex% := 0;
var tunBGColorCurrent$;

' Tuning curve parameters

var tunNRepeats% := 1;
var tunStimTime := 2;
var tunBlankTime := 2;
var tunNSteps% := 15;
var tunOriMin := 0;
var tunOriMax := 360;
var tunContrastMin := 1;
var tunContrastMax := 100;
var tunSFMin := 0.1;
var tunSFMax := 6;
var tunTFMin := 0.5;
var tunTFMax := 64;
var tunRandomProgression% := 0;

var tunLinLog$[2];
var tunLinLogIndex% := 0;
var tunLinLogCurrent$;
tunLinLog$[0] := "linear";
tunLinLog$[1] := "log";


' Tuning curve types

var tunExptTypeFileLabel$;
var tunExptTypeLabel$;
var tunExptTypeArgs$;

const tuntypeNone%    := 99;
const tuntypeOri%     := 101;
const tuntypeDom%     := 102;
const tuntypeSF%       := 103;
const tuntypeTF%       := 104;
const tuntypeArea%     := 105;
const tuntypeXY%       := 106;
var tuntypeSelected%   := tuntypeNone%;


' tuned parameter arrays
const tunMaxParameters% := 500;
var tunParameterValues[tunMaxParameters%];
var tunParameterIndices%[tunMaxParameters%];

' Grating parameters
var tunGratingParams$;

' Fetch base grating parameters from registry
tunGratingParams$ := GetGratingParameters$("Stimulus");
if Len(tunGratingParams$) = 0 then
    LogWarn("KrubTuningDialog", "Check registry for Gratings/Stimulus values!");
    tunGratingParams$ := "0,0,5,5,100,.2,4,90,b,s,e";
endif


proc GetKrubTuningParameters()
	var stmp$;
	var key$;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\Tuning";
    
    tunStimTime := GetFloatRegistryValue(key$, "StimTime", tunStimTime);
    tunBlankTime := GetFloatRegistryValue(key$, "BlankTime", tunBlankTime);
    tunNSteps% := GetIntRegistryValue%(key$, "NSteps", tunNSteps%);
    tunOriMin := GetFloatRegistryValue(key$, "OriMin", tunOriMin);
    tunOriMax := GetFloatRegistryValue(key$, "OriMax", tunOriMax);
    tunContrastMin := GetIntRegistryValue%(key$, "ContrastMin", tunContrastMin);
    tunContrastMax := GetIntRegistryValue%(key$, "ContrastMax", tunContrastMax);
    tunSFMin := GetFloatRegistryValue(key$, "SFMin", tunSFMin);
    tunSFMax := GetFloatRegistryValue(key$, "SFMax", tunSFMax);
    tunTFMin := GetFloatRegistryValue(key$, "TFMin", tunTFMin);
    tunTFMax := GetFloatRegistryValue(key$, "TFMax", tunTFMax);
    tunRandomProgression% := GetIntRegistryValue%(key$, "RandomProgression", tunRandomProgression%);
    DoCooling% := GetIntRegistryValue%(key$, "DoCooling", DoCooling%);
    NFreezeControls% := GetIntRegistryValue%(key$, "NFreezeControls", NFreezeControls%);
    OnlyRecordDuringStimulus% := GetIntRegistryValue%(key$, "OnlyRecordDuringStimulus", OnlyRecordDuringStimulus%);
    return;
end

proc SaveKrubTuningParameters()
	var stmp$;
	var key$;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\Tuning";
    
    SetFloatRegistryValue(key$, "StimTime", tunStimTime);
    SetFloatRegistryValue(key$, "BlankTime", tunBlankTime);
    SetIntRegistryValue(key$, "NSteps", tunNSteps%);
    SetFloatRegistryValue(key$, "OriMin", tunOriMin);
    SetFloatRegistryValue(key$, "OriMax", tunOriMax);
    SetIntRegistryValue(key$, "ContrastMin", tunContrastMin);
    SetIntRegistryValue(key$, "ContrastMax", tunContrastMax);
    SetFloatRegistryValue(key$, "SFMin", tunSFMin);
    SetFloatRegistryValue(key$, "SFMax", tunSFMax);
    SetFloatRegistryValue(key$, "TFMin", tunTFMin);
    SetFloatRegistryValue(key$, "TFMax", tunTFMax);
    SetIntRegistryValue(key$, "RandomProgression", tunRandomProgression%);
    SetIntRegistryValue(key$, "DoCooling", DoCooling%);
    SetIntRegistryValue(key$, "NFreezeControls", NFreezeControls%);
    SetIntRegistryValue(key$, "OnlyRecordDuringStimulus", OnlyRecordDuringStimulus%);
    
    return;
end





func KrubTuningDialog%()
    var status%;
    
    KrubTuningDialogAllowOK% := 0;  'Disable OK button to start, force selection of experiment
    
    GetKrubTuningParameters();
    isTuning1% := 1;  'Note that we're using dialog 1!
    
    DlgCreate("Select Tuning Curve Type");
    DlgButton(1,"               OK               ");  'rename "OK" button with a long enough name to allow space to rename it when it is active
    DlgButton(tuntypeOri%, "Orientation", TunDlgOrientation%, 1, 1);
    DlgButton(tuntypeDom%, "Contrast", TunDlgContrast%, 1, 2);
    DlgButton(tuntypeSF%, "Spatial Frequency", TunDlgSF%, 1, 3);
    DlgButton(tuntypeTF%, "Temporal Frequency", TunDlgTF%, 1, 4);
    DlgCheck(dlgCooling%, "Use Cooling Chip",1,5);
    DlgInteger(dlgNFreeze%, 2, 0, 2, 2, 6); DlgText("Number of Freeze Controls",4,6);
    DlgCheck(dlgStartMode%, "Only Record During Stimulus Period",1,7);
    '    DlgButton(105, "Area", TunDlgArea%, 1, 5);
    '    DlgButton(106, "XY", TunDlgXY%, 1, 6);
    
    DlgAllow(0xffff, 0, KrubTuningDialogChanged%);
    
    
    status% := DlgShow(DoCooling%, NFreezeControls%,OnlyRecordDuringStimulus%);    
    if status% <> 0 then
        tunBGColorCurrent$ := tunBGColor$[tunBGColorIndex%];
        SaveKrubTuningParameters();
    endif
    
    
    
    return status%;
end


'
'
'===== KrubTuningDialogChanged =====

' This function is initially called with a "0" input
func KrubTuningDialogChanged%(item%) 
    printlog("only once\n");
    if DlgValue(3) = 1 then 'if we are only recording during the stimulus period, force selection of stimulus
        DlgEnable(1,-tuntypeOri%);
        DlgEnable(1,-tuntypeDom%);
        DlgEnable(1,-tuntypeSF%);
        DlgEnable(1,-tuntypeTF%);
    else
        DlgEnable(0,-tuntypeOri%);
        DlgEnable(0,-tuntypeDom%);
        DlgEnable(0,-tuntypeSF%);
        DlgEnable(0,-tuntypeTF%);
        DlgValue$(-1,"Select Tuning Later");
    endif;
    
    'if the value that was just selected is "only record during stimulus period" by default turn off OK 
    if item% = 3 then
        KrubTuningDialogAllowOK% := 0;
    endif;
    
        
    'This disables the "OK" button (though it will have different labels) until an experiment is selected
    if KrubTuningDialogAllowOK% = 1 or DlgValue(3) = 0 then
        DlgEnable(1,-1);  'enable "OK" 
    else
        DlgEnable(0,-1);  'Otherwise disable "OK"
    endif;
    
    return 1;
end



func KrubTuningDialog2%()  'this is the same as KrubTuning Dialog, but it has only the tuning options, no other options
    var status%;
    
    KrubTuningDialogAllowOK% := 0;  'Disable OK button to start, force selection of experiment
    
    GetKrubTuningParameters();
    isTuning1% := 0;  'Note that we're using dialog 2!
    
    DlgCreate("Select Tuning Curve Type");
    DlgButton(1,"               OK               ");  'rename "OK" button with a long enough name to allow space to rename it when it is active
    DlgButton(tuntypeOri%, "Orientation", TunDlgOrientation%, 1, 1);
    DlgButton(tuntypeDom%, "Contrast", TunDlgContrast%, 1, 2);
    DlgButton(tuntypeSF%, "Spatial Frequency", TunDlgSF%, 1, 3);
    DlgButton(tuntypeTF%, "Temporal Frequency", TunDlgTF%, 1, 4);
    '    DlgButton(105, "Area", TunDlgArea%, 1, 5);
    '    DlgButton(106, "XY", TunDlgXY%, 1, 6);
    
    DlgAllow(0xffff, 0, KrubTuningDialog2Changed%);
    
    
    status% := DlgShow();    
    if status% <> 0 then
        tunBGColorCurrent$ := tunBGColor$[tunBGColorIndex%];
        SaveKrubTuningParameters();
        ToolbarEnable(2,0); ' disallow select stimuli
        WriteStimFileToStartPresentation();  'start stimuli
    endif
    
    
    
    return status%;
end

'
'
'===== KrubTuningDialog2Changed =====

' This function is initially called with a "0" input
func KrubTuningDialog2Changed%(item%) 'this is the easy version, just enable/disable the OK button
        
    'This disables the "OK" button (though it will have different labels) until an experiment is selected
    if KrubTuningDialogAllowOK% = 1 then
        DlgEnable(1,-1);  'enable "OK" 
    else
        DlgEnable(0,-1);  'Otherwise disable "OK"
    endif;
    
    return 1;
end


func TunDlgOrientation%()
    var status%;
    var nParams%;
    DlgCreate("Orientation Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgInteger(4, "Number of repeats", 1, 100);
    DlgReal(5, "Min Orientation", 0, 360);
    DlgReal(6, "Max Orientation", 0, 360);
    DlgCheck(7, "Random Progression?");
	'DlgList(8, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgOrientationGrating%);
    'status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunOriMin, tunOriMax, tunRandomProgression%, tunBGColorIndex%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunOriMin, tunOriMax, tunRandomProgression%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
        'Reset dialog OK button text on Select dialog
        DlgValue$(-1,"OK");
        KrubTuningDialogAllowOK% := 0;  'Prepare to disable OK button
        if isTuning1% = 1 then
            KrubTuningDialogChanged%(-1);  'Enables "OK" button, -1 is sham input
        else
            KrubTuningDialog2Changed%(-1);  'Enables "OK" button, -1 is sham input
        endif;
    case status% = 1 then
        'status% := 0;  'would close calling dialog, do not do this now that we are verifying expt type
        tuntypeSelected% := tuntypeOri%;
        tunExptTypeFileLabel$ := "ori";
        tunExptTypeLabel$ := "Orientation";
        
        'Reset dialog OK button text on Select dialog, and note which experiment to run
        DlgValue$(-1,"Run Orientation");
        KrubTuningDialogAllowOK% := 1;  'Prepare to enable OK button
        if isTuning1% = 1 then
            KrubTuningDialogChanged%(-1);  'Enables "OK" button, -1 is sham input
        else
            KrubTuningDialog2Changed%(-1);  'Enables "OK" button, -1 is sham input
        endif;
        
        nParams% := (tunNSteps%+1)*tunNRepeats%;
        if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunOriMin, tunOriMax, 0, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
    endcase
    
    return status%;
end



func TunDlgOrientationGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, mo$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 8;
    tunGratingParams$ := GetGratingParameters$("Stimulus");
    'printlog("before grating params are %s\n",tunGratingParams$);
    i% := GratingParametersDialog%(label$, tunGratingParams$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, mo$, pattern$, aperture$);
    if i% = 1 then
        SaveGratingParameters("Stimulus", tunGratingParams$);
    endif
    'printlog("after grating params are %s\n",tunGratingParams$);
    return 1;
end



func TunDlgContrast%()
    var status%;
    var nParams%;
    DlgCreate("Contrast Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgInteger(4, "Number of repeats", 1, 100);
    DlgReal(5, "Min Contrast%", 1, 100);
    DlgReal(6, "Max Contrast%", 1, 100);
    DlgCheck(7, "Random Progression?");
    DlgList(8, "Linear/Log Progression:", tunLinLog$);
	'DlgList(8, "Background color:", tunBGColor$);
    tunLinLogIndex% := 1;  'default contrast to log
    DlgButton(151, "Grating Properties", TunDlgContrastGrating%);
    'status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunContrastMin, tunContrastMax, tunRandomProgression%, tunBGColorIndex%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunContrastMin, tunContrastMax, tunRandomProgression%, tunLinLogIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
        'Reset dialog OK button text on Select dialog
        DlgValue$(-1,"OK");
        KrubTuningDialogAllowOK% := 0;  'Prepare to disable OK button
        if isTuning1% = 1 then
            KrubTuningDialogChanged%(-1);  'Enables "OK" button, -1 is sham input
        else
            KrubTuningDialog2Changed%(-1);  'Enables "OK" button, -1 is sham input
        endif;
    case status% = 1 then
        'status% := 0;  'would close calling dialog, do not do this now that we are verifying expt type
        tuntypeSelected% := tuntypeDom%;
        nParams% := (tunNSteps%+1)*tunNRepeats%;
        tunExptTypeFileLabel$ := "dom";
        tunExptTypeLabel$ := "Contrast";
        
        'Reset dialog OK button text on Select dialog, and note which experiment to run
        DlgValue$(-1,"Run Contrast");
        KrubTuningDialogAllowOK% := 1;  'Prepare to enable OK button
        if isTuning1% = 1 then
            KrubTuningDialogChanged%(-1);  'Enables "OK" button, -1 is sham input
        else
            KrubTuningDialog2Changed%(-1);  'Enables "OK" button, -1 is sham input
        endif;
        
        'if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunContrastMin, tunContrastMax, 1, tunRandomProgression%) <> 0 then
        if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunContrastMin, tunContrastMax, tunLinLogIndex%, tunRandomProgression%) <> 0 then    
            'if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1], tunContrastMin, tunContrastMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
    endcase
    
    return status%;
end

func TunDlgContrastGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, mo$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 5;
    tunGratingParams$ := GetGratingParameters$("Stimulus");
    i% := GratingParametersDialog%(label$, tunGratingParams$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, mo$, pattern$, aperture$);
    if i% = 1 then
        SaveGratingParameters("Stimulus", tunGratingParams$);
    endif
    
    return 1;
end


func TunDlgSF%()
    var status%;
    var nParams%;
    DlgCreate("Spatial Frequency Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgInteger(4, "Number of repeats", 1, 100);
    DlgReal(5, "Min SF (cyc/deg)", .01, 100);
    DlgReal(6, "Max SF (cyc/deg)", .01, 100);
    DlgCheck(7, "Random Progression?");
    DlgList(8, "Linear/Log Progression:", tunLinLog$);
	'DlgList(8, "Background color:", tunBGColor$);
    tunLinLogIndex% := 1;  'default spatial frequency to log
    DlgButton(151, "Grating Properties", TunDlgSFGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunSFMin, tunSFMax, tunRandomProgression%, tunLinLogIndex%);
    'status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunSFMin, tunSFMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
        'Reset dialog OK button text on Select dialog
        DlgValue$(-1,"OK");
        KrubTuningDialogAllowOK% := 0;  'Prepare to disable OK button
        if isTuning1% = 1 then
            KrubTuningDialogChanged%(-1);  'Enables "OK" button, -1 is sham input
        else
            KrubTuningDialog2Changed%(-1);  'Enables "OK" button, -1 is sham input
        endif;
    case status% = 1 then
        'status% := 0;  'would close calling dialog, do not do this now that we are verifying expt type
        tuntypeSelected% := tuntypeSF%;
        tunExptTypeFileLabel$ := "sf";
        tunExptTypeLabel$ := "Spatial Frequency";
        
        'Reset dialog OK button text on Select dialog, and note which experiment to run
        DlgValue$(-1,"Run Spatial Frequency");
        KrubTuningDialogAllowOK% := 1;  'Prepare to enable OK button
        if isTuning1% = 1 then
            KrubTuningDialogChanged%(-1);  'Enables "OK" button, -1 is sham input
        else
            KrubTuningDialog2Changed%(-1);  'Enables "OK" button, -1 is sham input
        endif;
        
        nParams% := (tunNSteps%+1)*tunNRepeats%;
        if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunSFMin, tunSFMax, tunLinLogIndex%, tunRandomProgression%) <> 0 then
        'if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunSFMin, tunSFMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
    endcase
    
    return status%;
end

func TunDlgSFGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, mo$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 6;
    tunGratingParams$ := GetGratingParameters$("Stimulus");
    i% := GratingParametersDialog%(label$, tunGratingParams$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, mo$, pattern$, aperture$);
    if i% = 1 then
        SaveGratingParameters("Stimulus", tunGratingParams$);
    endif
    return 1;
end


func TunDlgTF%()
    var status%;
    var nParams%;
    DlgCreate("Temporal Frequency Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgInteger(4, "Number of repeats", 1, 100);
    DlgReal(5, "Min TF (cyc/sec)", .01, 100);
    DlgReal(6, "Max TF (cyc/sec)", .01, 100);
    DlgCheck(7, "Random Progression?");
    DlgList(8, "Linear/Log Progression:", tunLinLog$);
	'DlgList(8, "Background color:", tunBGColor$);
    tunLinLogIndex% := 1;  'default temporal frequency to log
    DlgButton(151, "Grating Properties", TunDlgTFGrating%);
    'status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunTFMin, tunTFMax, tunRandomProgression%, tunBGColorIndex%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunTFMin, tunTFMax, tunRandomProgression%, tunLinLogIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
        'Reset dialog OK button text on Select dialog
        DlgValue$(-1,"OK");
        KrubTuningDialogAllowOK% := 0;  'Prepare to disable OK button
        if isTuning1% = 1 then
            KrubTuningDialogChanged%(-1);  'Enables "OK" button, -1 is sham input
        else
            KrubTuningDialog2Changed%(-1);  'Enables "OK" button, -1 is sham input
        endif;
    case status% = 1 then
        'status% := 0;  'would close calling dialog, do not do this now that we are verifying expt type
        tuntypeSelected% := tuntypeTF%;
        tunExptTypeFileLabel$ := "tf";
        tunExptTypeLabel$ := "Temporal Frequency";
        
        'Reset dialog OK button text on Select dialog, and note which experiment to run
        DlgValue$(-1,"Run Temporal Frequency");
        KrubTuningDialogAllowOK% := 1;  'Prepare to enable OK button
        if isTuning1% = 1 then
            KrubTuningDialogChanged%(-1);  'Enables "OK" button, -1 is sham input
        else
            KrubTuningDialog2Changed%(-1);  'Enables "OK" button, -1 is sham input
        endif;
        
        nParams% := (tunNSteps%+1)*tunNRepeats%;
        if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunTFMin, tunTFMax, tunLinLogIndex%, tunRandomProgression%) <> 0 then
        'if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunTFMin, tunTFMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
    endcase
    
    return status%;
end

func TunDlgTFGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, mo$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 7;
    tunGratingParams$ := GetGratingParameters$("Stimulus");
    i% := GratingParametersDialog%(label$, tunGratingParams$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, mo$, pattern$, aperture$);
    if i% = 1 then
        SaveGratingParameters("Stimulus", tunGratingParams$);
    endif
    return 1;
end



'=======New Horizontal Cursor========

Func MoveCursor%();          'Start of function newcursor%
    
    DlgCreate("New Target Temperature"); 
    DlgReal(1, "New Target Temperature", 0, 100, 0, 0);
    ok% := DlgShow(TargetTemperature);
    if ok% = 1 then
        HCursor(CursorNum%,TargetTemperature);  'move cursor
        SaveKrubCoolingParameters();  'save it to registry
    endif;
    
    return 1                    'Returns control to the user
end

'=======Pump Settings================

Func AutoPump%();


    DlgCreate("Algorithm Setup");                                      'Sets up the dialog box
    DlgList(1,"Algorithm Status","On|Off");                            'Lists On or Off. On is considered option 1 and off option 2, this fact is used in the DoCase below
    DlgInteger(2,"Arbitrary pumpspeed", 0,100,0,0,5);                  'Allows user to input an integer                              'Allows user to input an integer
    DlgReal(3, "Time to calc temp using slope", 0, 100, 0, 0);
    DlgReal(4, "dTfactor", 0, 1000, 0, 0);
    DlgReal(5, "Ln factor", 0, 1000, 0, 0);
    DlgInteger(6, "Maximum Pump Speed", 0, 95, 0, 0);
    DlgButton(0,"Cancel");                                             'Cancel button, if pressed, values don't change
    DlgButton(1,"OK");  
    ok% := DlgShow(PumpStatus%,pumpspeed1, timeslope, dtfactor, lnfactor, maxspeed);  'makes sure that values only change if Ok is pressed
    if ok% = 1 then
        ToolbarEnable(6,PumpStatus%);  'This will disable the manual pump speed if automatic pump speed is set    
        SaveKrubCoolingParameters();  'save values to registry
    endif;
    
    return 1
end

'=======Freeze Control================             ' Adjusts the maximum speed based on the coldest chip temperature.
Func FC1%();

    DlgCreate("Freeze Control");
    DlgList(1, "Freeze Control", "On|Off");
    DlgReal(2, "Critical Temp1", 0, 40, 0, 0);
    DlgReal(3, "Temp1 MaxSpeed Percentage", 0, 100, 0 , 0);
    DlgReal(4, "Critical Temp2", 0, 40, 0, 0);
    DlgReal(5, "Temp2 MaxSpeed Percentage", 0, 100, 0, 0);
    DlgReal(6, "Critical Temp3", 0, 40, 0, 0);
    DlgReal(7, "Temp3 MaxSpeed Percentage", 0, 100, 0, 0);
    DlgReal(8, "Shutoff Temp", 0, 40, 0, 0);
    DlgButton(0, "Cancel");
    DlgButton(1,"OK");
    ok%:=DlgShow(FCStatus%,CT1,T1Perc,CT2,T2Perc,CT3,T3Perc,KillTemp);
    if ok% = 1 then   
        SaveKrubCoolingParameters();  'save values to registry
    endif;
    
    return 1
end


'=======Freeze Control================             ' Adjusts the maximum speed based on the coldest chip temperature.
Func FC2%();

    DlgCreate("Freeze Control");
    DlgList(1, "Freeze Control", "On|Off");
    DlgReal(2, "Critical Temp1", 0, 40, 0, 0);
    DlgReal(3, "Temp1 MaxSpeed Percentage", 0, 100, 0 , 0);
    DlgReal(4, "Critical Temp2", 0, 40, 0, 0);
    DlgReal(5, "Temp2 MaxSpeed Percentage", 0, 100, 0, 0);
    DlgReal(6, "Critical Temp3", 0, 40, 0, 0);
    DlgReal(7, "Temp3 MaxSpeed Percentage", 0, 100, 0, 0);
    DlgReal(8, "Shutoff Temp", 0, 40, 0, 0);
    DlgButton(0, "Cancel");
    DlgButton(1,"OK");
    ok%:=DlgShow(FCStatus2%,CT12,T1Perc2,CT22,T2Perc2,CT32,T3Perc2,KillTemp2);
    if ok% = 1 then   
        SaveKrubCoolingParameters();  'save values to registry
    endif;
    
    return 1
end


'=======Set Pump Speed===============
'JJ - this will only have an effect if the pump is set to OFF.   If pump is set to ON, the algorithm will override 
Func ManualPump%();
    
    DlgCreate("Set Pump Speed");
    DlgInteger(1,"Pump speed", 0,100,0,0,5);
    DlgButton(0,"Cancel");                     'Cancel button, if pressed, values don't change
    DlgButton(1,"OK");  
    ok% := DlgShow(speedinput);                'makes sure that values only change if Ok is pressed
    if ok% = 1 then   
        amp:=speedinput;  'directly change speed next idle loop
        SaveKrubCoolingParameters();  'save values to registry
    endif;    

    return 1
end


'This function actually covers 4 different dialogs, but it's just easier to do it this way
proc GetKrubCoolingParameters()
	var stmp$;
	var key$;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\Cooling";
    
    TargetTemperature := GetFloatRegistryValue(key$, "TargetTemperature", TargetTemperature);
    PumpStatus% := GetIntRegistryValue%(key$, "PumpStatus", PumpStatus%);
    pumpspeed1 := GetFloatRegistryValue(key$, "pumpspeed1", pumpspeed1);
    timeslope := GetFloatRegistryValue(key$, "timeslope", timeslope);
    dtfactor := GetFloatRegistryValue(key$, "dtfactor", dtfactor);
    lnfactor := GetFloatRegistryValue(key$, "lnfactor",lnfactor);
    maxspeed := GetFloatRegistryValue(key$, "maxspeed", maxspeed);
    
    FCStatus% := GetIntRegistryValue%(key$, "FCStatus", FCStatus%);
    CT1 := GetFloatRegistryValue(key$, "CT1", CT1);
    T1Perc := GetFloatRegistryValue(key$, "T1Perc", T1Perc);
    CT2 := GetFloatRegistryValue(key$, "CT2", CT2);
    T2Perc := GetFloatRegistryValue(key$, "T2Perc",T2Perc);
    CT3 := GetFloatRegistryValue(key$, "CT3", CT3);
    T3Perc := GetFloatRegistryValue(key$, "T3Perc",T3Perc);
    KillTemp := GetFloatRegistryValue(key$, "KillTemp", KillTemp);
    
    FCStatus2% := GetIntRegistryValue%(key$, "FCStatus2", FCStatus2%);
    CT12 := GetFloatRegistryValue(key$, "CT12", CT12);
    T1Perc2 := GetFloatRegistryValue(key$, "T1Perc2", T1Perc2);
    CT22 := GetFloatRegistryValue(key$, "CT22", CT22);
    T2Perc2 := GetFloatRegistryValue(key$, "T2Perc2",T2Perc2);
    CT32 := GetFloatRegistryValue(key$, "CT32", CT32);
    T3Perc2 := GetFloatRegistryValue(key$, "T3Perc2",T3Perc2);
    KillTemp2 := GetFloatRegistryValue(key$, "KillTemp2", KillTemp2);
    
    speedinput := GetFloatRegistryValue(key$, "speedinput", speedinput);
    
    return;
end

'This function actually covers 4 different dialogs, but it's just easier to do it this way
proc SaveKrubCoolingParameters()
	var stmp$;
	var key$;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\Cooling";
    
    SetFloatRegistryValue(key$, "TargetTemperature", TargetTemperature);
    SetIntRegistryValue(key$, "PumpStatus", PumpStatus%);
    SetFloatRegistryValue(key$, "pumpspeed1", pumpspeed1);
    SetFloatRegistryValue(key$, "timeslope", timeslope);
    SetFloatRegistryValue(key$, "dtfactor", dtfactor);
    SetFloatRegistryValue(key$, "lnfactor",lnfactor);
    SetFloatRegistryValue(key$, "maxspeed", maxspeed);
    
    SetIntRegistryValue(key$, "FCStatus", FCStatus%);
    SetFloatRegistryValue(key$, "CT1", CT1);
    SetFloatRegistryValue(key$, "T1Perc", T1Perc);
    SetFloatRegistryValue(key$, "CT2", CT2);
    SetFloatRegistryValue(key$, "T2Perc",T2Perc);
    SetFloatRegistryValue(key$, "CT3", CT3);
    SetFloatRegistryValue(key$, "T3Perc",T3Perc);
    SetFloatRegistryValue(key$, "KillTemp", KillTemp);
    
    SetIntRegistryValue(key$, "FCStatus2", FCStatus2%);
    SetFloatRegistryValue(key$, "CT12", CT12);
    SetFloatRegistryValue(key$, "T1Perc2", T1Perc2);
    SetFloatRegistryValue(key$, "CT22", CT22);
    SetFloatRegistryValue(key$, "T2Perc2",T2Perc2);
    SetFloatRegistryValue(key$, "CT32", CT32);
    SetFloatRegistryValue(key$, "T3Perc2",T3Perc2);
    SetFloatRegistryValue(key$, "KillTemp2", KillTemp2);
    
    SetFloatRegistryValue(key$, "speedinput", speedinput);
    
    return;
end