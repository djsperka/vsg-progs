' $Id: KrubTuningDialogs.s2s,v 1.2 2011-05-16 23:54:39 devel Exp $

#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "UsreyGratings.s2s"


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
'
' These vars have their values set here but are used in the main tuning script. 
' This file must be #included in the main script. Don't worry about overlapping
' #include files (i.e. files that may be included here AND in the main script) - 
' spike2 is smart about it and only includes the file once. 
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

' Colors
var tunBGColor$[3];
var tunBGColorIndex% := 0;
var tunBGColorCurrent$;

' Tuning curve parameters

var tunNRepeats% := 1;
var tunStimTime := 2;
var tunBlankTime := 2;
var tunNSteps% := 15;
var tunOriMin := 0;
var tunOriMax := 360;
var tunContrastMin := 1;
var tunContrastMax := 100;
var tunSFMin := 0.1;
var tunSFMax := 6;
var tunTFMin := 0.5;
var tunTFMax := 64;
var tunRandomProgression% := 0;


' Tuning curve types

var tunExptTypeFileLabel$;
var tunExptTypeLabel$;
var tunExptTypeArgs$;

const tuntypeOri%     := 101;
const tuntypeDom%     := 102;
const tuntypeSF%       := 103;
const tuntypeTF%       := 104;
const tuntypeArea%     := 105;
const tuntypeXY%       := 106;
var tuntypeSelected%   := tuntypeOri%;


' tuned parameter arrays
const tunMaxParameters% := 500;
var tunParameterValues[tunMaxParameters%];
var tunParameterIndices%[tunMaxParameters%];

' Grating parameters
var tunGratingParams$;

' Fetch base grating parameters from registry
tunGratingParams$ := GetGratingParameters$("Stimulus");
if Len(tunGratingParams$) = 0 then
    LogWarn("KrubTuningDialog", "Check registry for Gratings/Stimulus values!");
    tunGratingParams$ := "0,0,5,5,100,.2,4,90,b,s,e";
endif



func KrubTuningDialog%()
    var status%;
    
    LogWarn("KrubTuningDialog()", "TODO: Get Krub Tuning Parameters");
    
    DlgCreate("Select Tuning Curve Type");
    DlgButton(tuntypeOri%, "Orientation", TunDlgOrientation%, 1, 1);
    DlgButton(tuntypeDom%, "Contrast", TunDlgContrast%, 1, 2);
    DlgButton(tuntypeSF%, "Spatial Frequency", TunDlgSF%, 1, 3);
    DlgButton(tuntypeTF%, "Temporal Frequency", TunDlgTF%, 1, 4);
'    DlgButton(105, "Area", TunDlgArea%, 1, 5);
'    DlgButton(106, "XY", TunDlgXY%, 1, 6);
    status% := DlgShow();    
    if status% <> 0 then
        tunBGColorCurrent$ := tunBGColor$[tunBGColorIndex%];
    endif
    
    LogWarn("KrubTuningDialog()", "TODO: Save Tuning Parameters");
    
    return status%;
end


func TunDlgOrientation%()
    var status%;
    var nParams%;
    DlgCreate("Orientation Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgInteger(4, "Number of repeats", 1, 100);
    DlgReal(5, "Min Orientation", 0, 360);
    DlgReal(6, "Max Orientation", 0, 360);
    DlgCheck(7, "Random Progression?");
	DlgList(8, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgOrientationGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunOriMin, tunOriMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tuntypeSelected% := tuntypeOri%;
        tunExptTypeFileLabel$ := "ori";
        tunExptTypeLabel$ := "Orientation";
        nParams% := (tunNSteps%+1)*tunNRepeats%;
        if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunOriMin, tunOriMax, 0, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
    endcase
    
    return status%;
end



func TunDlgOrientationGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, cv$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 8;
    i% := GratingParametersDialog%(label$, tunGratingParams$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
    LogInfo("TunDlg Orientation: grating label=>" + label$ + "<");
    LogInfo("TunDlg Orientation: params=>" + tunGratingParams$ + "<");
    return 1;
end



func TunDlgContrast%()
    var status%;
    DlgCreate("Contrast Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgInteger(4, "Number of repeats", 1, 100);
    DlgReal(5, "Min Contrast%", 1, 100);
    DlgReal(6, "Max Contrast%", 1, 100);
    DlgCheck(7, "Random Progression?");
	DlgList(8, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgContrastGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunContrastMin, tunContrastMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tuntypeSelected% := tuntypeDom%;
        tunExptTypeFileLabel$ := "dom";
        tunExptTypeLabel$ := "Contrast";
        if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1], tunContrastMin, tunContrastMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
    endcase
    
    return status%;
end

func TunDlgContrastGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, cv$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 5;
    i% := GratingParametersDialog%(label$, tunGratingParams$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
    return 1;
end


func TunDlgSF%()
    var status%;
    var nParams%;
    DlgCreate("Spatial Frequency Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgInteger(4, "Number of repeats", 1, 100);
    DlgReal(5, "Min SF", .01, 100);
    DlgReal(6, "Max SF", .01, 100);
    DlgCheck(7, "Random Progression?");
	DlgList(8, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgSFGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunSFMin, tunSFMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tuntypeSelected% := tuntypeSF%;
        tunExptTypeFileLabel$ := "sf";
        tunExptTypeLabel$ := "Spatial Frequency";
        nParams% := (tunNSteps%+1)*tunNRepeats%;
        if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunSFMin, tunSFMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
    endcase
    
    return status%;
end

func TunDlgSFGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, cv$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 6;
    i% := GratingParametersDialog%(label$, tunGratingParams$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
    return 1;
end


func TunDlgTF%()
    var status%;
    var nParams%;
    DlgCreate("Temporal Frequency Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgInteger(4, "Number of repeats", 1, 100);
    DlgReal(5, "Min TF", .01, 100);
    DlgReal(6, "Max TF", .01, 100);
    DlgCheck(7, "Random Progression?");
	DlgList(8, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgTFGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunNRepeats%, tunTFMin, tunTFMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tuntypeSelected% := tuntypeTF%;
        tunExptTypeFileLabel$ := "tf";
        tunExptTypeLabel$ := "Temporal Frequency";
        nParams% := (tunNSteps%+1)*tunNRepeats%;
        if GetRepeatedParameterProgression%(tunNSteps%+1, tunNRepeats%, tunParameterValues[0:nParams%], tunParameterIndices%[0:nParams%], tunTFMin, tunTFMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
    endcase
    
    return status%;
end

func TunDlgTFGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, cv$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 7;
    i% := GratingParametersDialog%(label$, tunGratingParams$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
    return 1;
end


