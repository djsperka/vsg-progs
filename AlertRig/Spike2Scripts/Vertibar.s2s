' $Id: Vertibar.s2s,v 1.3 2011-09-01 18:38:54 djsperka Exp $
'
#include "../../Spike2Util/UsreyUtil.s2s"
#include "PunctaciousDialog.s2s"

' dialog
var vtbFramesPerTerm% := 1;
var vtbCenterCoord% := 0;
var vtbNBars% := 16;
var vtbBarWidth% := 0;
var vtbFullScreen% := 0;
var vtbHorizontal% := 0;

' ports used for recording
const vtbNPorts% := 8;   ' Number of analog ports
var vtbWavemarkPorts%[vtbNPorts%]; 
var vtbContinuousPorts%[vtbNPorts%];
var vtbNWavemarks% := 0;
var vtbNContinuous% := 0;

' Channel numbers
var vtbChanTrigger% := 21;
var vtbChanVSGReady% := 22;

' Windows
var vtbDataWindow%;
var vtbRasterWindow%[8];    ' one for each electrode

' Handle
var vtbStimHandle;

' trigger counting
var vtbNTriggersCounted% := 0;
var vtbNTriggersExpected% := 0;
var vtbLastTriggerTime := -1;
var vtbFirstTriggerTime := -1;

' states
const stateStartup%             :=  1;
const stateVSGWait%             :=  2;
const stateVSGConfirm%          :=  3;
const stateStartStim%           :=  4;
const stateStim%                :=  5;
const stateDone%                :=  6;

var iState% := stateStartup%;              ' This holds the current state

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Script starts here

LogInit(1);

GetVertibarScriptParameters();
if VertibarDialog%() = 0 then
    halt;
else
    SaveVertibarScriptParameters();
endif

' Sampling config
CreateSampleConfiguration();

' Prepare display windows, input channels, etc. 
InitializeWindows();

' Set up toolbar and launch
InitializeToolbar();




proc GetVertibarScriptParameters()
	var key$;
	key$:=GetRegistryKey$(1) + "\\Scripts\\Vertibar";
    
    vtbFramesPerTerm% := GetIntRegistryValue%(key$, "FramesPerTerm", vtbFramesPerTerm%);
    vtbNBars% := GetIntRegistryValue%(key$, "NBars", vtbNBars%);
    vtbFullScreen% := GetIntRegistryValue%(key$, "FullScreen", vtbFullScreen%);
    vtbHorizontal% := GetIntRegistryValue%(key$, "Horizontal", vtbHorizontal%);
    vtbBarWidth% := GetIntRegistryValue%(key$, "BarWidth", vtbBarWidth%);
    vtbCenterCoord% := GetIntRegistryValue%(key$, "CenterCoord", vtbCenterCoord%);
end;

proc SaveVertibarScriptParameters()
	var key$;
	key$:=GetRegistryKey$(1) + "\\Scripts\\Vertibar";
    SetIntRegistryValue(key$, "FramesPerTerm", vtbFramesPerTerm%);
    SetIntRegistryValue(key$, "NBars", vtbNBars%);
    SetIntRegistryValue(key$, "FullScreen", vtbFullScreen%);
    SetIntRegistryValue(key$, "Horizontal", vtbHorizontal%);
    SetIntRegistryValue(key$, "BarWidth", vtbBarWidth%);
    SetIntRegistryValue(key$, "CenterCoord", vtbCenterCoord%);
end;



func VertibarDialog%()
    var status% := 0;
    DlgCreate("Vertibar!");
    DlgInteger(1, "Frames per term", 1, 1000, 0, 0, 1);
    DlgInteger(2, "# of bars", 1, 250, 0, 0, 1);
    DlgCheck(3, "Full Screen width");
    DlgCheck(4, "Horizontabars");
    DlgInteger(5, "Bar Width (pixels)", 4, 800);
    DlgInteger(6, "Center X/Y (pixels)", -400, 400);
    DlgAllow(0xffff, 0, VertibarDialogChanged%);
    status% := DlgShow(vtbFramesPerTerm%, vtbNBars%, vtbFullScreen%, vtbHorizontal%, vtbBarWidth%, vtbCenterCoord%);;
    return status%
end


func VertibarDialogChanged%(item%)
    docase
    case item% = 0 then
        DlgEnable(1-vtbFullScreen%, 6);
    case item% = 4 then
        DlgEnable(1-DlgValue(4), 6);
    endcase
    return 1;
end

proc CreateSampleConfiguration()
    
    var i%;
    
	SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 3);
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 1);
    SampleAutoName$(dataCellName$ + "_vtb_000");
	SampleAutoFile(1);
    
    ' Get wavemark/continuous ports
    vtbNWavemarks% := GetWavemarkPorts%(vtbWavemarkPorts%[]);
    vtbNContinuous% := GetContinuousPorts%(vtbContinuousPorts%[]);
    PrintLog("wm %d cont %d\n", vtbNWavemarks%, vtbNContinuous%);
    
    'Wavemark channel recording definitions
    for i% := 0 to vtbNWavemarks%-1 do
		SampleWaveMark(i% + 1, vtbWavemarkPorts%[i%], 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(i% + 1, "WMrk " + str$(vtbWavemarkPorts%[i%])); 
	next
    for i% := 0 to vtbNContinuous%-1 do
        SampleWaveform(vtbNWavemarks% + i% + 1, vtbContinuousPorts%[i%], 20000);
        SampleTitle$(vtbNWavemarks% + i% + 1, "Cont " + str$(vtbContinuousPorts%[i%]));
    next

    SampleEvent(vtbChanTrigger%, 1, 1, 1000); 
    SampleTitle$(vtbChanTrigger%, "Cycle Trg");
    
   	SampleEvent(vtbChanVSGReady%, 6, 2, 200); 'Trigger channel, level
	SampleComment$(vtbChanVSGReady%, "VSG Rdy");
	SampleTitle$(vtbChanVSGReady%, "VSG Rdy");
    
	SampleSequencer(script$ + "SparseNoise.pls");
    SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
    SampleMode(1); 'Continuous sampling
    
end;


proc InitializeWindows()
    var i%;
    var AutoCorr%;
	var binsz;
    var winsz;
    
    View(App(8)).WindowVisible(0);	'Hide the standard sample bar    
    vtbDataWindow%:=FileNew(0,4);
    View(vtbDataWindow%).WindowVisible(1);
    XRange(0, 15);
    View(vtbDataWindow%).Window(0,0,50,100);
end


proc InitializeToolbar()
	
    ToolbarSet(1,"Quit",Quit%);
    ToolbarSet(2,"Sample start",Start%);
    ToolbarSet(3,"Sample stop", Stop%);
    ToolbarEnable(1, 1);
    ToolbarEnable(2, 1);
    ToolbarEnable(3, 0);
    Toolbar("Go",0xffff);
    
end
func Start%()
    var cmd$;
    var args$;
    PrintLog("bindir %s\n", GetBinDir$(1));
    cmd$ := "cmd /c " + GetBinDir$(1) + "vertibar.exe ";
    
    args$ := " -t " + str$(vtbFramesPerTerm%) + " -n " + str$(vtbNBars%) + " -o 15 -f " + GetStimDir$(1) + "MSequenceTerms";
    if vtbHorizontal% = 0 then
        ' Note center X must be adjusted to VSG default coords, x=0 is left hand edge.
        args$ += " -x " + str$(vtbCenterCoord%+400);
    else
        ' Note center Y must be adjusted to VSG default coords, y=0 is top edge.
        args$ += " -H -y " + str$(vtbCenterCoord%+300);
    endif
    
    if vtbFullScreen% = 0 then
        args$ += " -w " + str$(vtbBarWidth%);
    endif    
    cmd$ += args$;
    LogInfo(cmd$);
    vtbStimHandle := ProgRun(cmd$);
    
    SampleStart(0);
    ToolbarEnable(1,0); 
    ToolbarEnable(2,0);
    ToolbarEnable(3,1);
    ToolbarSet(0, "", Idle%);
    return 1;
end

func Stop%()
    
    SampleKey("q");
    Yield();
    SampleStop();
    ToolbarSet(0, "");
    ToolbarEnable(1,1); 
    ToolbarEnable(3,0);
    return 1;
    
end

func Quit%()
    ' this would have means to stop MSgSvr, like msequence. 
    return 0;
end


var tTrigger := -1;
var tLast := -1;
var tNow := -1;
var tLastTrigger := -1;
var vTrigger;
var tStateStart := -1;
var pctComplete;
var timeLeft;
var nc, ne; ' spike2 doesn't have a cast operator? 
var tLastUpdate := -1;

func Idle%()
    var status% := 1;
    var i%;
	tNow := View(vtbDataWindow%).MaxTime();
    
    docase 
    case iState% = stateStartup% then
        
        LogStatus("stateStartup", "Starting up.");
        ChangeStateTo(stateVSGWait%, tNow);
        
    case iState% = stateVSGWait% then
        
        ' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
        tTrigger := View(vtbDataWindow%).NextTime(vtbChanVSGReady%, tLast, vTrigger);
        if tTrigger > tLastTrigger and vTrigger = 0 then
            LogStatus("stateVSGWait", "Got leading edge of trigger.");
            tLastTrigger := tTrigger;
            ChangeStateTo(stateVSGConfirm%, tTrigger);                
        endif;
            
    case iState% = stateVSGConfirm% then
            
        ' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
        tTrigger := View(vtbDataWindow%).NextTime(vtbChanVSGReady%, tLastTrigger, vTrigger);
        if tTrigger > tLastTrigger and vTrigger = 1 then                
            LogStatus("stateVSGConfirm", "Got trailing edge of trigger.");
            tLastTrigger := tTrigger;
            ChangeStateTo(stateStartStim%, tTrigger);
        endif;
            
    case iState% = stateStartStim% then
        
        ' Issue sample key to start stim, then switch to looking for triggers
        LogStatus("stateStartStim", "Starting stimulus.");
        Yield(1.0);
        SampleKey("s");
        ChangeStateTo(stateStim%, tNow);
        vtbLastTriggerTime := tNow;
        
    case iState% = stateStim% then
        
        ' nothin' to do. user must hit stop to stop. 
        
    case iState% = stateDone% then
        
        Stop%();
        status% := 1;
        
    else
        
        LogError("", "Unknown state " + str$(iState%));
        Stop%();
        status% := 0;
        
    endcase
    
    return status%;
end

proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;

