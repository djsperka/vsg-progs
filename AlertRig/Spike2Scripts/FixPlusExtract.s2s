'$Id: FixPlusExtract.s2s,v 1.2 2010-10-12 17:38:54 devel Exp $

' FixPlusExtract
'
' Extracts trial information for FixPlus data files. 
' Ignores comments entered with new blocks. 
' Requires input text file with list of Spike2 data files. 
' Output files have one trial per line, with the following format:
' 
' outcome  tFixpt tStimOn tAllOff
' 
' Outcome is one of the following:
' -1 Unknown (error condition - should not happen)
' 1  Success - trial completed successfully
' 2  Failure - fixation not held through stim period
' 3  Failure - fixation point acquisition failed
' 4  Failure - fixation not held long enough to display stim
'
' The other three values are times taken from VSG triggers and they relate specific times in the stimulus display:
' 
' tFixpt - time of onset of fixation point
' tStimOn - time of onset of stimulus
' tAllOff - time when fixpt and stim turned off
'
' NOTE: In successful trials (outcome = 1), one should not use tAllOff as the endpoint of the fixation period. 
' Its probably more correct to use tStimOn + (hold fixation time). The script does not check for fixation after
' the hold fixation time is past. Instead reward is given and a request is sent to turn off the stimulus. The 
' extracted value only reflects the time when the stim actually went off. It is possible that the subject broke
' fixation after the fixation time passed, but before the stim went off -- in that case the trial is still 
' successful. 
                
#include "ExtractionUtilities.s2s"
#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2Util/LogUtilities.s2s"
#include "../../Spike2Util/BatchUtilities.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"

var hData%;
var hTxt%;
var fpNProcessed% := 0;

' Trial vars
var fpTFixpt;
var fpTStimOn;
var fpTAllOff;
var fpOutcome%;
const fpUnknown% := -1;
const fpSuccess% := 1;
const fpFailure% := 2;
const fpAcqFail% := 3;
const fpHoldFail% := 4;


' Initialize logging
LogInit(1);


fpNProcessed% := ProcessListFile%("", FixPlusX%);
LogStatus("FixPlusExtract", "Processed " + str$(fpNProcessed%) + " files.");


proc InitTrialVars()
    fpTFixpt := -1;
    fpTStimOn := -1;
    fpTAllOff := -1;
    fpOutcome% := fpUnknown%;
    return;
end

proc WriteTrialVars()
    var stmp$;
    stmp$ := Print$("%d %.3f %.3f %.3f", fpOutcome%, fpTFixpt, fpTStimOn, fpTAllOff);
    View(hTxt%).Print("%s\n", stmp$);
    PrintLog("%s\n", stmp$);
    return;
end


const fpstateError% := -1;
const fpstateReady% := 0;
const fpstateFixpt% := 1;
const fpstateStim% := 2;
const fpstateComplete% := 3;        ' trial is complete, waiting for X
const fpstateDone% := 4;
var fpIState% := fpstateReady%;



func FixPlusX%(h%, args$)
    var sTxtFilename$;
    var sFound$;
    var sIgnore$ := "Jqc";
    var tFound := -1;
    var tLast := -1;
    var tStart := -1;
    var tEnd := -1;
    
    hData% := h%;
    sTxtFilename$ := ReplaceFileExtension$(h%, "fpl");
    hTxt% := FileOpen(sTxtFilename$, 8, 1);
    if hTxt% < 0 then
        LogError("FixPlusX", "Cannot open output filename " + sTxtFilename$);
        return -1;
    endif
    
    View(hData%);
    tLast := -1;
    tFound := NextKeyOrText(tLast, sFound$, sIgnore$);
    while tFound >= 0 and fpIState% <> fpstateError% do

        'LogInfo(sFound$ + " " + str$(tFound));
        
        docase
        case fpIState% = fpstateReady% then
            
            ' need an 'F'
            if sFound$ = "F" then
                fpTFixpt := GetFixptOnTime(tFound);
                if fpTFixpt < 0 then
                    LogError("fpstateReady", "Error getting fixpt time for F at " + str$(tFound));
                    fpIState% := fpstateError%;
                else
                    fpIState% := fpstateFixpt%;
                endif
            else
                LogStatus("fpstateReady", "Expecting F, got " + sFound$);
            endif
            
        case fpIState% = fpstateFixpt% then
            
            ' Can have S, H or A
            docase
            case sFound$ = "S" then
                fpTStimOn := GetStimOnTime(tFound);
                if fpTStimOn < 0 then
                    LogError("fpstateFixpt", "Error getting stim on time for S at " + str$(tFound));
                    fpIState% := fpstateError%;
                else
                    fpIState% := fpstateStim%;
                endif
            case sFound$ = "H" then
                fpOutcome% := fpHoldFail%;
                fpIState% := fpstateComplete%;
            case sFound$ = "A" then
                fpOutcome% := fpAcqFail%;
                fpIState% := fpstateComplete%;
            else
                LogError("fpstateFixpt", "Unexpected text \"" + sFound$ + "\" found at " + str$(tFound));
                fpIState% := fpstateError%;
            endcase
            
        case fpIState% = fpstateStim% then
            ' can have +, -
            docase
            case sFound$ = "+" then
                fpOutcome% := fpSuccess%;
                fpIState% := fpstateComplete%;
            case sFound$ = "-" then
                fpOutcome% := fpFailure%;
                fpIState% := fpstateComplete%;
            case sFound$ = "X" then
                fpOutcome% := fpHoldFail%;
                fpIState% := fpstateDone%;
            else
                LogError("fpstateStim", "Unexpected text \"" + sFound$ + "\" found at " + str$(tFound));
                fpIState% := fpstateError%;
            endcase
        case fpIState% = fpstateComplete% then
            if sFound$ = "X" then
                fpTAllOff := GetFixptOffTime(tFound);
                if fpTAllOff < 0 then
                    LogError("fpstateComplete", "Error getting all off time for X at " + str$(tFound));
                    fpIState% := fpstateError%;
                else
                    fpIState% := fpstateDone%;
                endif
            else
                LogError("fpstateComplete", "Unexpected text \"" + sFound$ + "\" found at " + str$(tFound));
                fpIState% := fpstateError%;
            endif
        else
            LogError("", "Unexpected state (" + str$(fpIState%) + ") found at " + str$(tFound) + "\n");
            fpIState% := fpstateError%;
        endcase
            
        
        if fpIState% = fpstateDone% then
            WriteTrialVars();
            InitTrialVars();
            fpIState% := fpstateReady%;
        endif
        
        if fpIState% <> fpstateError% then
            tLast := tFound;
            tFound := NextKeyOrText(tLast, sFound$, sIgnore$);
        endif
    wend
    
    return 0;
end

func GetFixptOnTime(t)
    var tf := -1;
    if FindRisingEdge%(13, t, tf) <> 0 then
        tf := -1;
    endif
    return tf;
end

func GetStimOnTime(t)
    var ts := -1;
    if FindRisingEdge%(14, t, ts) <> 0 then
        ts := -1;
    endif
    return ts;
end

func GetFixptOffTime(t)
    var tf := -1;
    if FindFallingEdge%(13, t, tf) <> 1 then
        tf := -1;
    endif
    return tf;
end
