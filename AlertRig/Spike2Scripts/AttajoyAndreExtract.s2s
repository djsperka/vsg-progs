' $Id: AttajoyAndreExtract.s2s,v 1.1 2010/12/16 22:23:58 devel Exp $

#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2Util/BatchUtilities.s2s"
#include "AttaJoyExtractFunctions.s2s"


var nProcessed%;
var lgnChannel% := 3;
var v1Channel% := 4;
var lpFreq := 120;     ' low pass filter freq
var lpTRW := 70;
var bpLowFreq := 700;  ' band pass low freq
var bpHighFreq := 7000;  ' band pass hi freq
var bpTRW := 2.5;

' This does the regular extraction
nProcessed% := ProcessListFile%("", AndreAttaX%);
LogStatus("AttaJoyAndreExtraction", "Processed " + str$(nProcessed%) + " files.");

' This does the filtering/processing that Andre needs. Result is a matlab "mat" file. 
nProcessed% := ProcessListFile%("", AndreX%);
LogStatus("AttaJoyAndreExtraction", "LFP/MUA processed " + str$(nProcessed%) + " files.");

' This func just passes through to the regular extraction function AttaX%. The args used for 
' Andre's processing (two channel numbers) are incorretly interpreted by AttaX, so this function
' just passes the call on with an empty string for the args. Should the args ever be required 
' (they shouldn't - they're only used to pass joystick boundaries, and those are now included 
' in a text marker in each data file) then this processing WILL NOT WORK CORRECTLY! 

func AndreAttaX%(h%, args$)
    return AttaX%(h%, "");
end


func AndreX%(h%, args$)

    var exportFilename$;
    var xchans%[5];
    xchans%[0] := 4;
    var lgnChannel%;
    var v1Channel%;
    var lgnLFPChannel%;
    var lgnMUAChannel%;
    var v1LFPChannel%;
    var v1MUAChannel%;
    
    ' args must have 2 numbers - lgn channel and v1 channel
    if ReadStr(args$, lgnChannel%, v1Channel%) <> 2 then
        LogError("AndreX", "Expecting channel numbers as args. Got \"" + args$ + "\".");
        return -1;
    else
        LogStatus("AndreX", "LGN channel " + str$(lgnChannel%) + " V1 channel " + str$(v1Channel%));
    endif
    
    
    ' LGN LFP
    xchans%[1] := LFP%(lgnChannel%, lpFreq, lpTRW, 0, MaxTime());
    ChanTitle$(xchans%[1], "LGN LFP");

    ' V1 LFP
    xchans%[2] := LFP%(v1Channel%, lpFreq, lpTRW, 0, MaxTime());
    ChanTitle$(xchans%[2], "V1 LFP");

    ' LGN MUA 
    xchans%[3] := MUA%(lgnChannel%, bpTRW, bpLowFreq, bpHighFreq, lpFreq, lpTRW, 0, MaxTime());
    ChanTitle$(xchans%[3], "LGN MUA");

    ' V1 MUA
    xchans%[4] := MUA%(v1Channel%, bpTRW, bpLowFreq, bpHighFreq, lpFreq, lpTRW, 0, MaxTime());
    ChanTitle$(xchans%[4], "V1 MUA");

    ' Optimize and display filtered channels
    'Optimise(xchans%[]);
    'ChanShow(xchans%[]);


    ' Now export
    ExportChanList();
    ExportChanList(0, MaxTime(), xchans%[]);
    exportFilename$ := ReplaceFileExtension$(0, ".mat");
    PrintLog("Exporting %s\n", exportFilename$);
    FileSaveAs(exportFilename$, 100, 1, "", 2, "");
    
    return 0;
end


func LFP%(ichan%, lpFreq, lpTRW, sTime, eTime)
    var ochan%;
    
    ' Low pass filter
    FiltCreate(-1, 2, lpTRW, lpFreq);
    ochan% := FiltApply(-1, 0, ichan%, sTime, eTime);

    ' Downsample to 1kHz
    PrintLog("Sampling frequency is %f, downsamp 1:%d\n", 1/Binsize(ochan%), Round(1/Binsize(ochan%)/1000.));
    ChanProcessAdd(ochan%, 5, Round(1/Binsize(ochan%)/1000.));
    
    return ochan%;
end

func MUA%(ichan%, bandTRW, bandLow, bandHigh, lpFreq, lpTRW, sTime, eTime)
    var ochan1%;
    var ochan2%;
    
    ' band pass filter
    FiltCreate(-1, 4, bandTRW, bandLow, bandHigh);
    ochan1% := FiltApply(-1, 0, ichan%, sTime, eTime);
    
    ' Rectify
    ChanProcessAdd(ochan1%, 0);
    
    ' Now do LFP process
    ochan2% := LFP%(ochan1%, lpFreq, lpTRW, sTime, eTime);
    
    return ochan2%;
end
