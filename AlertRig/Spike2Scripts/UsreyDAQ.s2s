'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters START
'
'
' WARNING! This file should be used with AlertRig scripts only!!! 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/DlgUtilities.s2s"


var DistanceToScreenMM$;		' Distance to screen in MM 
var DegreesPerVoltX;			' Conversion factor from ADC to visual degrees
var DegreesPerVoltY;			' Conversion factor from ADC to visual degrees
var CalibrationOffsetDegrees;   ' Calibration dots are this many degrees offset in x,y from (0,0)
var CalibrationComPort%;        ' COM port to use for calibration (connection to ASL 'Serial Out')
var CalibrationConfigFile$;     ' path to xml file for calibration config. Can be same as regular config file for eye tracker.
var EyeCoilSamplingFrequency%;		' Frequency to sample eye coil at
var NumberOfElectrodes%;		' Number of electrodes (i.e. wavemark inputs) in use
var JuicePerReward%;			' Number of juice squirts per reward
var JuiceRewardMS% := 200;      ' for Ben's new juicer this is the length of time juicer is held open.
var JuicerIndex% := 0;          ' default juicer index will not allow sampling, 1 is open high, 2 is open low
var EyeXPort%;                  ' Port horizontal eye signal connected to
var EyeYPort%;                  ' Port vertical eye signal connected to
var JoystickPort%;              ' Port joystick is connected to
var JuicerType%;                ' Type of juicer
var pReward := 1;               ' Probability of reward
var UseRemoteStimulus% := 0;     ' if checked, send stim commands to ip.port below
var RemoteStimulusIP$ := "192.168.1.2";
var RemoteStimulusPort$ := "7000";
var SlaveStimulusIP$ := "192.168.1.2";
var SlaveStimulusPort$ := "7000";
'var WavemarkPorts%[16];
'var NumWavemarkPorts%;
'var ContinuousPorts%[16];
'var NumContinuousPorts%;
GetDAQParameters();

' Make sure Juicer information has been set, and set sequencer variable for juicer
' Quit if no juicer information has been set!
JuicerType% := GetJuicerType%();
if JuicerType% = 0 then
    JuicerCheckDialog%();
endif
SetJuicerSequencerVariable%();  'this will make the same call in various Start%() functions redundant


func JuicerCheckDialog%()
    
    GetDAQParameters();
    
    var iReturn%;
    
    var juicerList$[3];
    juicerList$[0] := "Select a juicer style";
    juicerList$[1] := "Open Hi (Ben, var dur)";
    juicerList$[2] := "Open Low (fixed dur)";
    
    'This dialog will not go away until you select one of the two juicer styles or cancel
    'but should only show up the first time that UsreyDAQ is run on a machine - after that 
    'there should be a legal value in the registry
    while JuicerIndex% < 1 or JuicerIndex% > 2 do
    
        DlgCreate("Juicer not specifed!");
        DlgList(1, "Juicer Open State:",juicerList$,3);
        
        iReturn% := DlgShow(JuicerIndex%);
        
        if iReturn% < 1 then
            halt;
        endif;
        
    wend;
        
    if iReturn% = 1 then
		SaveDAQParameters();
    endif;
        
    JuicerType% := JuicerIndex%;
        
	return iReturn%;
end



func GetJoystickPort%()
    return JoystickPort%;
end

func GetEyeXPort%()
    return EyeXPort%;
end

func GetEyeYPort%()
    return EyeYPort%;
end

'func GetDistanceToScreenMM$()
'    return DistanceToScreenMM$;
'end

func GetDegreesPerVoltX()
    return DegreesPerVoltX;
end

func GetDegreesPerVoltY()
    return DegreesPerVoltY;
end

func GetCalibrationOffsetDegrees()
    return CalibrationOffsetDegrees;
end

func GetCalibrationCOMPort%()
    return CalibrationComPort%; 
end

func GetCalibrationConfigFile$()
    return CalibrationConfigFile$;
end

func GetNumberOfElectrodes%()
    return NumberOfElectrodes%;
end

func GetJuicePerReward%()
    return JuicePerReward%;
end

func GetJuiceRewardMS%()
    return JuiceRewardMS%;
end

'When placed into the toolbar, the function must return an integer value
func DefaultReward%()
    DefaultReward();
    return 1;
end

'This is the overarching reward function that should be called to get a default reward
func DefaultReward()
    if pReward >= Rand() then
        if JuicerType% = 1 then  'open-high juicer, dispense based on ms
            DeliverRewardMS(JuiceRewardMS%);
        else
            if JuicerType% = 2 then  'open-low juicer, dispense based on number of hits
                DeliverRewardNum%(JuicePerReward%);
            endif;
        endif;
    else
        LogStatus("Trial complete", "Random reward not granted!");
    endif;
end


'This is the overarching reward function that should be called to get a specified reward
'when the input is known to be correct for the juicer type
func SpecifyReward(in%)
    if JuicerType% = 1 then  'open-high juicer, dispense based on ms
        DeliverRewardMS(in%);
    else
        if JuicerType% = 2 then  'open-low juicer, dispense based on number of hits
            DeliverRewardNum%(in%);
        endif;
    endif;
end


'This is retained to allow old functions that are not "fixed" to avoid crashes, redirect to default reward
proc DeliverReward()
    DefaultReward();
    return;
end


'This is retained to allow old functions that are not "fixed" to avoid crashes, redirect to default reward
proc DeliverRewardNumber()
    DefaultReward();
    return;
end


' Deliver a reward specified in milliseconds
proc DeliverRewardMS(iMS%)
    PrintLog("Reward %d\n", iMS%);
    SampleSeqVar(1, iMS%);
    SafeSampleKey("R");
    Yield(); YieldSystem(iMS%/1000.0);
    return;
end


func DeliverRewardNum%(iNum%)
	var i;
	for i:=1 to iNum% do Yield(.05); SafeSampleKey("J"); next
	return iNum%;
end


Proc SafeSampleKey(s$)
    var count% := 0;
    yield(.001);  'It takes the sequencer up to a full step to change the value of variable V2
    'Step is here assumed to be 1 ms, could possibly be read from sequencer?
    while SampleSeqVar(2) <> 0 and count% < 5000 do
        count% += 1;
        Yield(.001);
    wend
    SampleKey(s$);    
    return;
end



func DAQParametersDialog%()

	var iReturn%;
    var JuicerIndexDecremented%;
    
    'This little bit allows us to disallow any values other than legal juicer values
    'without changing the rest of the code
    JuicerIndexDecremented% := JuicerIndex%-1;

	GetDAQParameters();
    
    var juicerList2$[2];
    juicerList2$[0] := "Open Hi (Ben, var dur)";
    juicerList2$[1] := "Open Low (fixed dur)";
    
    
	DlgCreate("DAQ parameters");
	DlgInteger(1, "Number of Electrodes:", 1, 16, 0, 0, 1);
	DlgReal(2, "Degrees/Volt (X):", 0, 100);
	DlgReal(3, "Degrees/Volt (Y):", 0, 100);
    DlgReal(4, "Calibration offset(deg)", 0.1, 100);
    DlgInteger(5, "Calibration COM port", 1, 16);
	DlgInteger(6, "Eye Coil Sampling Freq (Hz):", 1, 20000);
    DlgReal(7, "Reward Prob (0-1):", 0, 1);
	DlgInteger(8, "Juice per reward:", 0, 10, 0, 0, 1);
    DlgInteger(9, "Juice Reward ms:", 0, 1000);
    DlgList(10, "Juicer Open State:",juicerList2$,2);
    DlgInteger(11, "Eye X Port", 0, 31);
    DlgInteger(12, "Eye Y Port", 0, 31);
    DlgInteger(13, "Joystick Port", 0, 31);
    DlgCheck(14, "Use Remote Stimulus");
    DlgString(15, "Remote ip", 21);
    DlgString(16, "Remote port", 5);
    DlgString(17, "Slave ip", 21);
    DlgString(18, "Slave port", 5);
    DlgAllow(0xffff, 0, DAQParametersDialogChanged%);
	iReturn% := DlgShow(NumberOfElectrodes%, DegreesPerVoltX, DegreesPerVoltY, 
                        CalibrationOffsetDegrees, CalibrationComPort%,
                        EyeCoilSamplingFrequency%, pReward, JuicePerReward%, JuiceRewardMS%,
                        JuicerIndexDecremented%, EyeXPort%, EyeYPort%, JoystickPort%, 
                        UseRemoteStimulus%, RemoteStimulusIP$, RemoteStimulusPort$, SlaveStimulusIP$, SlaveStimulusPort$);

	if iReturn% = 1 then
        JuicerIndex% := JuicerIndexDecremented% + 1; 'Correct JuicerIndex%
        SetJuicerSequencerVariable%();  'This allows reset of juicer sequencer variable without restarting the script.  Probably redundant.
		SaveDAQParameters();
	endif
	return iReturn%;
end;

func DAQParametersDialogChanged%(item%)    
    docase 
    case item% = 0 then
        DlgEnable(UseRemoteStimulus%, 13, 14);
    case item% = 12 then
        DlgEnable(DlgValue(12), 13, 14);
    endcase
    return 1;
end


	
proc GetDAQParameters()
	var key$;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    DegreesPerVoltX := GetFloatRegistryValue(key$, "DegreesPerVoltX", 0.0);
    DegreesPerVoltY := GetFloatRegistryValue(key$, "DegreesPerVoltY", 0.0);
    CalibrationOffsetDegrees := GetFloatRegistryValue(key$, "CalibrationOffsetDegrees", 8);
    CalibrationComPort% := GetIntRegistryValue%(key$, "CalibrationComPort", 2);
    CalibrationConfigFile$ := GetStringRegistryValue$(key$, "CalibrationConfigFile", "NONE_SELECTED");
    EyeCoilSamplingFrequency% := GetIntRegistryValue%(key$, "EyeCoilSamplingFrequency", 1000);
    NumberOfElectrodes% := GetIntRegistryValue%(key$, "NumberOfElectrodes", 1);
    pReward := GetFloatRegistryValue(key$, "pReward", 1);
    JuicePerReward% := GetIntRegistryValue%(key$, "JuicePerReward", 1);
    JuiceRewardMS% := GetIntRegistryValue%(key$, "JuiceRewardMS", JuiceRewardMS%);
    JuicerIndex% := GetIntRegistryValue%(key$, "JuicerIndex", JuicerIndex%);
    EyeXPort% := GetIntRegistryValue%(key$, "EyeXPort", 14);
    EyeYPort% := GetIntRegistryValue%(key$, "EyeYPort", 15);
    JoystickPort% := GetIntRegistryValue%(key$, "JoystickPort", 13);
    UseRemoteStimulus% := GetIntRegistryValue%(key$, "UseRemoteStimulus", 0);
    RemoteStimulusIP$ := GetStringRegistryValue$(key$, "RemoteStimulusIP", "192.168.1.2");
    RemoteStimulusPort$ := GetStringRegistryValue$(key$, "RemoteStimulusPort", "7000");
    SlaveStimulusIP$ := GetStringRegistryValue$(key$, "SlaveStimulusIP", "192.168.1.2");
    SlaveStimulusPort$ := GetStringRegistryValue$(key$, "SlaveStimulusPort", "7000");
    GetElectrodeParameters();
end;


proc SaveDAQParameters()
    var key$;
    var s$;
    var i%;
	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    SetStringRegistryValue(key$, "DegreesPerVoltX", str$(DegreesPerVoltX));
	SetStringRegistryValue(key$, "DegreesPerVoltY", str$(DegreesPerVoltY));
    SetFloatRegistryValue(key$, "CalibrationOffsetDegrees", CalibrationOffsetDegrees);
    SetIntRegistryValue(key$, "CalibrationComPort", CalibrationComPort%);
    SetStringRegistryValue(key$, "CalibrationConfigFile", CalibrationConfigFile$);
    SetFloatRegistryValue(key$, "pReward", pReward);
	SetIntRegistryValue(key$, "EyeCoilSamplingFrequency", EyeCoilSamplingFrequency%);
	SetIntRegistryValue(key$, "NumberOfElectrodes", NumberOfElectrodes%);
	SetIntRegistryValue(key$, "JuicePerReward", JuicePerReward%);
    SetIntRegistryValue(key$, "JuiceRewardMS", JuiceRewardMS%);
    SetIntRegistryValue(key$, "JuicerIndex", JuicerIndex%);
    SetIntRegistryValue(key$, "EyeXPort", EyeXPort%);
    SetIntRegistryValue(key$, "EyeYPort", EyeYPort%);
    SetIntRegistryValue(key$, "JoystickPort", JoystickPort%);
    SetIntRegistryValue(key$, "UseRemoteStimulus", UseRemoteStimulus%);
    SetStringRegistryValue(key$, "RemoteStimulusIP", RemoteStimulusIP$);
    SetStringRegistryValue(key$, "RemoteStimulusPort", RemoteStimulusPort$);
    SetStringRegistryValue(key$, "SlaveStimulusIP", SlaveStimulusIP$);
    SetStringRegistryValue(key$, "SlaveStimulusPort", SlaveStimulusPort$);
    SaveElectrodeParameters();
end;

func GetUseRemoteStimulus%()
    return UseRemoteStimulus%;
end

func GetRemoteStimulusIP$()
    return RemoteStimulusIP$;
end

func GetRemoteStimulusPort$()
    return RemoteStimulusPort$;
end

func GetSlaveStimulusIP$()
    return SlaveStimulusIP$;
end

func GetSlaveStimulusPort$()
    return SlaveStimulusPort$;
end


func GetJuicerType%()
    
    'Get the proper value for the Juicer Index
    var key$;
    key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
    JuicerIndex% := GetIntRegistryValue%(key$, "JuicerIndex", JuicerIndex%);
    
    return JuicerIndex%;
    
end



func SetJuicerSequencerVariable%()
   
    'Set sample sequencer variable 3 to 0 if juicer is open-high, and to 1 if juicer is open-low
    'This is equivalent to setting sample sequencer variable 3 to the value of the bit when closed
    if JuicerIndex% = 1 then 'open high
        SampleSeqVar(3,0);
    else
        if JuicerIndex% = 2 then 'open low
            SampleSeqVar(3,1);
        endif
    endif
    
end

    
'proc GetElectrodeParameters()
'	var key$;
'    var s$;
'	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
'    s$ := GetStringRegistryValue$(key$, "WavemarkPorts", "");
'    NumWavemarkPorts% := ReadStr(s$, WavemarkPorts%[]);
'    s$ := GetStringRegistryValue$(key$, "ContinuousPorts", "");
'    NumContinuousPorts% := ReadStr(s$, ContinuousPorts%[]);
'end;
'
'proc SaveElectrodeParameters()
'    var key$;
'    var s$;
'    var i%;
'	key$ := GetRigName$() + "\\" + GetCurrentConfiguration$() + "\\DAQ";
'    SetStringRegistryValue(key$, "WavemarkPorts", GetWavemarkPorts$());
'    SetStringRegistryValue(key$, "ContinuousPorts", GetContinuousPorts$());    
'end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
