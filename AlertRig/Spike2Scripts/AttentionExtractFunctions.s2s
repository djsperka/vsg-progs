#include "ExtractionUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"

' Initialization and state saving vars
var attxIsInitialized% := 0;
var attxOutputHandle := -1;
var attxTLast := -1;            ' last time processed
var attxTStop := -1;            ' Time to process to

' saved state vars
var attxITrial% := 0;
var attxIsCorrectionTrial% := 0;
var attxICueType% := 0;
const cuetypeTowards% := 1;
const cuetypeAway% := 2;
var attxIChangeType% := 0;
const changetypeUpper% := 4;
const changetypeLower% := 8;
var attxIUpDown% := 0;
const updownUp% := 16;
const updownDown% := 32;
var attxIResponse% := 0;
const responseNone% := 0;
const responseCorrect% := 1;
const responseIncorrect% := -1;
var attxWCueTime := -1;
var attxFCueTime := -1;
var attxFStimTime := -1;
var attxFChangeTime := -1;
var attxFRxTime := -1;
var attxFXTime := -1;               ' time of trigger following X
var attxBreakFixTime := -1;         ' time eye first breaks fix pt window
var attxAnsPtTime := -1;            ' time eye first enters an answer window

' big data chunk for eye data
var attxEyeX[10000];
var attxEyeY[10000];
var attxNEyeX%;
var attxNEyeY%;
var attxEyeXStartTime;
var attxEyeXBinSize;
var attxEyeYStartTime;
var attxEyeYBinSize;

' state related vars and consts
const attxstateStart% := 1;
const attxstateWhtPt% := 9;
const attxstateFixPt% := 2;
const attxstateStim% := 3;
const attxstateChange% := 4;
const attxstateAbort% := 5;
const attxstateError% := 6;
const attxstateDone% := 7;
const attxstateAnswer% := 8;
var attxIState% := attxstateStart%;

' Counters
var attxNTrials := 0;
var attxNTrialsCompleted := 0;
var attxNTrialsCorrect := 0;
var attxNTrialsTowards := 0;
var attxNTrialsAway := 0;
var attxNTrialsTowardsCorrect := 0;
var attxNTrialsAwayCorrect := 0;
var attxNTrialsCatch := 0;
var attxNTrialsCatchCorrect := 0;
var attxNCorrectionTrials := 0;
var attxNCorrectionTrialsCompleted := 0;
var attxNCorrectionTrialsCorrect := 0;

const MaxTrials% := 1000;
var attxRxTimeTowards[MaxTrials%];
var attxRxTimeAway[MaxTrials%];
var attxRxTimeCatch[MaxTrials%];


' Initialization function. Should be called once with a handle to an output file, already opened. 
' Running totals will be printed on log output. 

proc AttentionExtractInit(hOutput)
    attxIsInitialized% := 1;
    attxOutputHandle := hOutput;
    return;
end


func AttentionExtract%(tStart, tStop)
    var status% := 0;
    var tFound := -1;
    var sFound$;
    var sIgnore$ := "0Jqs";
    var tTrigger;
    
    attxTLast := tStart;
    attxTStop := tStop;

    tFound := NextKeyOrText(attxTLast, sFound$, sIgnore$);
    while tFound >= 0 and (attxTStop < 0 or (attxTStop > 0 and tFound <= attxTStop)) and attxIState% <> attxstateError% do

        docase
        case attxIState% = attxstateStart% then
            docase
            case sFound$ = "*" then
                attxIsCorrectionTrial% := 1;
            case sFound$ = "W" then
                attxITrial% += 1;
                attxWCueTime := GetTriggerTimeFor(sFound$, tFound);
                attxIState% := attxstateWhtPt%;
            else
                ' Error
                PrintLog("error expect W/* got %s\n", sFound$);
                attxIState% := attxstateError%;
            endcase
            
        case attxIState% = attxstateWhtPt% then
            docase
            case sFound$ = "F" then
                attxICueType% := cuetypeTowards%;
                attxIState% := attxstateFixPt%;
                attxFCueTime := GetTriggerTimeFor(sFound$, tFound);
            case sFound$ = "G" then
                attxICueType% := cuetypeAway%;
                attxIState% := attxstateFixPt%;
                attxFCueTime := GetTriggerTimeFor(sFound$, tFound);
            case sFound$ = "X" then
                attxIState% := attxstateAbort%;
            else
                ' Error
                PrintLog("error expect FG got %s\n", sFound$);
                attxIState% := attxstateError%;
            endcase
        case attxIState% = attxstateFixPt% then
            docase
            case sFound$ = "S" then
                attxFStimTime := GetTriggerTimeFor(sFound$, tFound);
                attxIState% := attxstateStim%;
            case sFound$ = "X" then
                attxIState% := attxstateAbort%;
            else
                'TODO ERROR
                attxIState% := attxstateError%;
            endcase
        case attxIState% = attxstateStim% then
            docase
            case sFound$ = "C" then
                attxIChangeType% := changetypeUpper%;
                attxIUpDown% := updownUp%;
                attxIState% := attxstateChange%;
                attxFChangeTime := GetTriggerTimeFor(sFound$, tFound);
            case sFound$ = "D" then
                attxIChangeType% := changetypeLower%;
                attxIUpDown% := updownUp%;
                attxIState% := attxstateChange%;
                attxFChangeTime := GetTriggerTimeFor(sFound$, tFound);
            case sFound$ = "c" then
                attxIChangeType% := changetypeUpper%;
                attxIUpDown% := updownDown%;
                attxIState% := attxstateChange%;
                attxFChangeTime := GetTriggerTimeFor(sFound$, tFound);
            case sFound$ = "d" then
                attxIChangeType% := changetypeLower%;
                attxIUpDown% := updownDown%;
                attxIState% := attxstateChange%;
                attxFChangeTime := GetTriggerTimeFor(sFound$, tFound);
            case sFound$ = "X" then
                attxIState% := attxstateAbort%;
            else
                'TODO ERROR
                attxIState% := attxstateError%;
            endcase
        case attxIState% = attxstateChange% then
            docase
            case sFound$ = "+" then
                attxIResponse% := responseCorrect%;
                attxIState% := attxstateAnswer%;
                attxFRxTime := tFound - attxFChangeTime;
            case sFound$ = "-" then
                attxIResponse% := responseIncorrect%;
                attxIState% := attxstateAnswer%;
                attxFRxTime := tFound - attxFChangeTime;
            case sFound$ = "X" then
                attxIState% := attxstateAbort%;
            else
                'TODO ERROR
                attxIState% := attxstateError%;
            endcase
        case attxIState% = attxstateAnswer% then
            docase
            case sFound$ = "X" then
                attxIState% := attxstateAbort%;
            else
                'TODO ERROR
                attxIState% := attxstateError%;
            endcase
        else
            'TODO this shouldn't happen!
            attxIState% := attxstateError%;
        endcase


        ' If we are in attxstateAbort%, then fetch the corresponding trigger.... lets use
        ' the trigger on the fixation channel.
        
        if attxIState% = attxstateAbort% then
            attxFXTime := GetTriggerTimeFor(sFound$, tFound);
            if attxFStimTime > 0 then
                GetEyeSignalIntervals(attxFStimTime, attxFXTime, attxEyeXStartTime, attxEyeX[], attxNEyeX%, attxEyeXBinSize, attxEyeYStartTime, attxEyeY[], attxNEyeY%, attxEyeYBinSize);
                var eAnswer%;
                var tBroke, tAnswer;
                var fxC := 0;
                var fyC := 0;
                var fRad := 1.5;
                var aOffset := 5;
                var aRad := 2.0;
                eAnswer% := GetEyePositionMilestones%(attxEyeX[], attxNEyeX%, attxEyeY[], attxNEyeY%, attxEyeXStartTime, attxEyeXBinSize, tBroke, tAnswer, fxC, fyC, fRad, aOffset, aRad);
                PrintLog("Got %d %d eye values between %f,%f, ans %d tBroke %f tAnswer %f\n", attxNEyeX%, attxNEyeY%, attxFStimTime, attxFXTime, eAnswer%, tBroke, tAnswer);
            endif
        endif
        

        ' If we are state attxstateAbort% or attxstateError% then we flush the state
        ' and transition to attxstateStart%.
        
        if attxIState% = attxstateAbort% or attxIState% = attxstateError% then
            FlushState();
            attxIState% := attxstateStart%;
        endif
        
        attxTLast := tFound;
        tFound := NextKeyOrText(attxTLast, sFound$, sIgnore$);
    wend

    PrintResults();
    
    return status%;
end


' Get M/N as a percentage, returned as a string in %4.1%% format, e.g 12.4%
' If N is zero, then return -----. 
func PctStr$(N, M)
    var s$ := "@@.@%";
    if N>0 then
        s$ := Print$("%4.1f%%", 100.0*M/N);
    endif
    return s$;
end

' Print current results to log window

proc PrintResults()
    var mean, std;
    PrintLog("\n==============================================================================\n\n");
    PrintLog("# Trials       : %5d\n", attxNTrials);
    PrintLog("# Completed (%): %5d (%s)     Cue         #  %%correct   rxtime\n", attxNTrialsCompleted, PctStr$(attxNTrials, attxNTrialsCompleted));
    mean := 0;
    std := 0;
    if attxNTrialsTowards > 0 then
        ArrSum(attxRxTimeTowards[0:attxNTrialsTowards], mean, std);
    endif
    PrintLog("                                   Towards   %3d     %s    %.3f +- %.3f s\n", attxNTrialsTowards, PctStr$(attxNTrialsTowards, attxNTrialsTowardsCorrect), mean, std);

    mean := 0;
    std := 0;
    if attxNTrialsAway > 0 then
        ArrSum(attxRxTimeAway[0:attxNTrialsAway], mean, std);
    endif
    PrintLog("                                   Away      %3d     %s    %.3f +- %.3f s\n", attxNTrialsAway, PctStr$(attxNTrialsAway, attxNTrialsAwayCorrect), mean , std);

    mean := 0;
    std := 0;
    if attxNTrialsCatch > 0 then
        ArrSum(attxRxTimeCatch[0:attxNTrialsCatch], mean, std);
    endif
    PrintLog("                                   Catch     %3d     %s    %.3f +- %.3f s\n", attxNTrialsCatch, PctStr$(attxNTrialsCatch, attxNTrialsCatchCorrect), mean , std);
    PrintLog("\n");
    PrintLog("# Correction tr: %5d\n", attxNCorrectionTrials);
    PrintLog("# Completed (%): %5d (%s)                    %%correct: %s         \n", attxNCorrectionTrialsCompleted, 
                                                        PctStr$(attxNCorrectionTrials, attxNCorrectionTrialsCompleted),
                                                        PctStr$(attxNCorrectionTrials, attxNCorrectionTrialsCorrect));
    
    return;
end

proc FlushState()
    var s$;
    var isum% := 0;
    var itrial%;
    
    ' Update tallies and counts.....
    if attxIsCorrectionTrial% = 0 then
        attxNTrials += 1;
        if attxIResponse% <> responseNone% then
            isum% := attxICueType% + attxIChangeType%;
            attxNTrialsCompleted += 1;
            if attxIResponse% = responseCorrect% then
                attxNTrialsCorrect += 1;
            endif
            docase
            case isum% = 5 then
                attxRxTimeTowards[attxNTrialsTowards] := attxFRxTime;
                attxNTrialsTowards += 1;
                if attxIResponse% = responseCorrect% then
                    attxNTrialsTowardsCorrect += 1;
                endif
            case isum% = 10 then
                attxRxTimeAway[attxNTrialsAway] := attxFRxTime;
                attxNTrialsAway += 1;
                if attxIResponse% = responseCorrect% then
                    attxNTrialsAwayCorrect += 1;
                endif
            case isum% = 9 or isum% = 6 then
                attxRxTimeCatch[attxNTrialsCatch] := attxFRxTime;
                attxNTrialsCatch += 1;
                if attxIResponse% = responseCorrect% then
                    attxNTrialsCatchCorrect += 1;
                endif
            else
                ' should not happen!
                PrintLog("Error: isum has value %d!\n", isum%);
            endcase
        endif
    else
        attxNCorrectionTrials += 1;
        if attxIResponse% <> responseNone% then
            isum% := attxICueType% + attxIChangeType%;
            attxNCorrectionTrialsCompleted += 1;
            if attxIResponse% = responseCorrect% then
                attxNCorrectionTrialsCorrect += 1;
            endif
        endif
    endif

    
    ' Dump this trial to the log and output file if it exists.
    itrial% := attxITrial%;
    if attxIsCorrectionTrial% = 1 then itrial% *= -1; endif;
    s$ := Print$("%d\t%.4f\t%d\t%.3f\t%.3f\t%d\t%d\t%.3f\t%d\t%.3f\n", itrial%, attxWCueTime, attxICueType%, attxFCueTime, attxFStimTime, attxIChangeType%, attxIUpDown%, attxFChangeTime, attxIResponse%, attxFRxTime);
    View(LogHandle()).Print(s$);
    if attxOutputHandle >= 0 then
        View(attxOutputHandle).Print(s$);
    endif
    attxICueType% := 0;
    attxIsCorrectionTrial% := 0;
    attxWCueTime := -1;
    attxFCueTime := -1;
    attxFStimTime := -1;
    attxIChangeType% := 0;
    attxIUpDown% := 0;
    attxFChangeTime := -1;
    attxIResponse% := 0;
    attxFRxTime := -1;
    attxBreakFixTime := -1;
    attxAnsPtTime := -1;
    return;
end


func StateString$(state%)
    var s$;
    docase
    case attxIState% = attxstateStart% then
        s$ := "START";
    case attxIState% = attxstateFixPt% then
        s$ := "FIXPT";
    case attxIState% = attxstateStim% then
        s$ := "STIM";
    case attxIState% = attxstateChange% then
        s$ := "CHANGE";
    case attxIState% = attxstateAbort% then
        s$ := "ABORT";
    else
        s$ := "UNKNOWN";
    endcase
    return s$;
end


func GetTriggerTimeFor(key$, tKey)
    var tFound := -99;
    docase
    case key$ = "F" or key$ = "G" or key$ = "W"  or key$ = "X" then
        tFound := NextTriggerTransition(5, tKey, 2);
    case key$ = "S" then
        tFound := NextTriggerTransition(6, tKey, 0);
    case key$ = "C" or key$ = "D" or key$ = "c" or key$ = "d" then
        tFound := NextTriggerTransition(7, tKey, 0);
    else
        tFound := -2;
    endcase
    return tFound;
end


' Get the enclosing interval of measurement times given trigger times
' at the start and end of the desired interval. The trigger times are
' likely measured at times slightly different than the measurement times
' of the eye signal channels (which themselves may not be measured at 
' the same times), so we return the closes measurement times before 
' the start trigger time, tStart, and after the end trigger time, tEnd.
'
' Be aware that the start and end times for x and y channels will NOT be 
' the same. They should be close (within 1/sampling rate) of each other.
' Nevertheless, you might find that the number of samples returned is 
' different for the x and y channels. 

func GetEyeSignalIntervals(tStart, tEnd, &txFirstTime, exValues[], &nexValues%, &exBinSize, &tyFirstTime, eyValues[], &neyValues%, &eyBinSize)
    var tyStart, tyEnd;
    var iStatus% := 0;
    
    ' Get bin sizes
    exBinSize := BinSize(2);
    eyBinSize := BinSize(3);
    
    ' Get the data
    nexValues% := ChanData(2, exValues[], tStart, tEnd, txFirstTime);
    neyValues% := ChanData(3, eyValues[], tStart, tEnd, tyFirstTime);
    
    return iStatus%;
end

        
' Find the times at which fixation is broken and when the eye 
' first enters an answer window. The arrays xEye[] and yEye[]
' hold nxEye% and nyEye% values; the fixation point center
' is at (fxC, fyC), its window has radius fRad; the answer
' point offset is aOffset, answer point window radius is aRad.
'
' We require that the first data point be INSIDE the fixation 
' window. If it isn't, then we assume that fixation was broken
' and there's really not much to do. 
'
' If the first data point is inside the fixation window, then 
' we will loop over the points until we find the first point
' when fixation was broken. After that, we look for the first 
' point where one of the answer point windows was entered. 
'
' The values tBreak and tAnswer are the times when fixation 
' is broken and the answer point window entered, respectively. 
' If the data runs out before one or both of those points is 
' reached (i.e. if the trial ended) then those times will be
' returned as -1. 
'
' The return value will be +1(-1) if the 
' upper (lower) answer window was entered. If neither then 
' iAnswer% will be 0. 

func GetEyePositionMilestones%(xEye[], nxEye%, yEye[], nyEye%, tStart, binSize, &tBroke, &tAnswer, fxC, fyC, fRad, aOffset, aRad)
    var iAnswer% := 0;
    const stateInit% := 1;
    const stateFix% := 2;
    const stateBroke% := 3;
    const stateDone% := 4;
    var i%;
    var iState% := stateInit%;
    
    'for i% := 0 to (Min(nxEye%, nyEye%)-1) do
    
    tBroke := -1;
    tAnswer := -1;
    i% := 0;
    repeat
        
        docase
        case iState% = stateInit% then
            
            if IsInsideCircle%(xEye[i%], yEye[i%], fxC, fyC, fRad) = 1 then
                iState% := stateFix%;
            else
                ' This is bad, because we expect that we are initially fixated. 
                iState% := stateDone%;
            endif
            
        case iState% = stateFix% then
            
            if IsOutsideCircle%(xEye[i%], yEye[i%], fxC, fyC, fRad) = 1 then
                iState% := stateBroke%;
                tBroke := tStart + i% * binSize;
            endif
            
        case iState% = stateBroke% then
            
            docase
            case IsInsideCircle%(xEye[i%], yEye[i%], fxC, fyC + aOffset, aRad) = 1 then
                iState% := stateDone%;
                iAnswer% := 1;
                tAnswer := tStart + i% * binSize;
            case IsInsideCircle%(xEye[i%], yEye[i%], fxC, fyC - aOffset, aRad) = 1 then
                iState% := stateDone%;
                iAnswer% := -1;
                tAnswer := tStart + i% * binSize;
            endcase
            
        endcase
       
        i% += 1;
    until i% = Min(nxEye%, nyEye%) or iState% = stateDone%;
    return iAnswer%;
end

