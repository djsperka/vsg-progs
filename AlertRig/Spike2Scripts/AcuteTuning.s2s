' $Id: AcuteTuning.s2s,v 1.1 2010-04-08 21:18:12 devel Exp $
'
' AcuteTuning.s2s
'
' This is a replacement for the old acute rig tuning curve functions CreateParameterFile.s2s, 
' CreateSDL.s2s. 

#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "UsreyGratings.s2s"

' tuning type-specific values
var tunFileLabel$ := "zzz";

' tuning daq parameters
var tunNChannels%;
var tunColorIndex%;
var tunColor$[4];

' daq channels for triggers from vsg
var tunChanTrigger% := 11;
var tunChanVSGReady% := 12;

' prog handles
var tunHandleStim := -1;

' window handles
var tunWindowData%;

' states
const stateStartup%             :=  1;
const stateVSGWait%             :=  2;
const stateVSGConfirm%          :=  3;
const stateStartStim%           :=  4;
const stateStim%                :=  5;
const stateDone%                :=  6;

var iState% := stateStartup%;              ' This holds the current state

' Tuning curve types

const tuntypeOri%     := 101;
const tuntypeDom%     := 102;
const tuntypeSF%       := 103;
const tuntypeTF%       := 104;
const tuntypeArea%     := 105;
const tuntypeXY%       := 106;
var tuntypeSelected%   := tuntypeOri%;

' String vars whose values are specific to the expt type
var tunExptTypeFileLabel$;
var tunExptTypeLabel$;
var tunExptTypeArgs$;

' Colors
var tunBGColor$[3];
var tunBGColorIndex% := 0;

' Tuning curve parameters

var tunStimTime := 2;
var tunBlankTime := 2;
var tunNSteps% := 15;
const tunMaxSteps% := 100;
var tunOriMin := 0;
var tunOriMax := 360;
var tunContrastMin := 1;
var tunContrastMax := 100;
var tunSFMin := 0.1;
var tunSFMax := 6;
var tunTFMin := 0.5;
var tunTFMax := 64;
var tunRandomProgression% := 0;

' tuned parameter arrays
var tunParameterValues[tunMaxSteps%];
var tunParameterIndices%[tunMaxSteps%];


' Initializations

tunBGColor$[0] := "gray";
tunBGColor$[1] := "black";
tunBGColor$[2] := "white";









' stuff left over from original script. 
var index;
var TriggerTime:=-1,NextTriggerTime, BlockData$[8],BlockIndex;
var SpikeCount;
var TriggerNumber:=0;
var TimeLeft,PercentComplete;



tunColor$[0] := "Black and white";
tunColor$[1] := "S cone isolating";
tunColor$[2] := "M cone isolating";
tunColor$[3] := "L cone isolating";

View(App(0)).Window(0,0,75,95);




'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Script starts here

' Initialize logging
LogInit(1);


' Get experimental parameters. 
' tunFileLabel$ is set here! 
if AcuteTuningDialog%() = 0 then
    halt;
endif

' Sampling config
CreateSampleConfiguration();

' Prepare display windows, input channels, etc. 
InitializeWindows();


	
'ToolbarSet(1,"Quit",Quit%);
'ToolbarSet(2,"Sample start",Start%);
'ToolbarSet(3,"Sample stop", Stop%);
'ToolbarEnable(3,0);
'Toolbar("Go",1234);





proc CreateSampleConfiguration()
    
    var i%;
    
	SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 3);
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 1);
    SampleAutoName$(dataCellName$ + "_" + tunFileLabel$ + "_000");
	SampleAutoFile(1);

    'Channel recording definitions

    for i% := 1 to tunNChannels% do
        SampleWaveMark(i%, i%-1, 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
        SampleTitle$(i%, "Trode " + Str$(i%-1));
    next

    SampleEvent(tunChanTrigger%, 1, 1, 1000); 
    SampleTitle$(tunChanTrigger%, "Terms");
    
   	SampleEvent(tunChanVSGReady%, 6, 2, 200); 'Trigger channel, level
	SampleComment$(tunChanVSGReady%, "VSG Rdy");
	SampleTitle$(tunChanVSGReady%, "VSG Rdy");
    
	SampleSequencer(script$ + "AcuteTuning.pls");
    SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
    SampleMode(1); 'Continuous sampling
    
end;


proc InitializeWindows()
    var i%;
    var AutoCorr%;
    
	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
    
    tunWindowData% := FileNew(0,4);
    View(tunWindowData%).WindowVisible(1);
    View(tunWindowData%).Window(0,33,100,100);

    SaveParameterFile();
end

proc SaveParameterFile()
    var handle;
    var filename$;
    
    filename$ := ReplaceFileExtension$(-1, "par");
    handle := FileOpen(filename$, 8, 1);
    if handle <0 then 
        Message("Could not create parameter file " + filename$);
    else
        LogInfo("TODO : Writing parameters to file " + filename$);
        FileClose();
    endif
    
    return;
end


func AcuteTuningDialog%()
    var status%;
    
    DlgCreate("Select Tuning Curve Type");
    DlgButton(101, "Orientation", TunDlgOrientation%, 1, 1);
    DlgButton(102, "Contrast", TunDlgContrast%, 1, 2);
    DlgButton(103, "Spatial Frequency", TunDlgSF%, 1, 3);
    DlgButton(104, "Temporal Frequency", TunDlgTF%, 1, 4);
    DlgButton(105, "Area", TunDlgArea%, 1, 5);
    DlgButton(106, "XY", TunDlgXY%, 1, 6);
    status% := DlgShow();    
    return status%;
end


func TunDlgOrientation%()
    var status%;
    DlgCreate("Orientation Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgReal(4, "Min Orientation", 0, 360);
    DlgReal(5, "Max Orientation", 0, 360);
    DlgCheck(6, "Random Progression?");
	DlgList(7, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgOrientationGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunOriMin, tunOriMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tunExptTypeFileLabel$ := "ori";
        tunExptTypeLabel$ := "Orientation";
        if GetParameterProgression%(tunNSteps%+1, tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1], tunOriMin, tunOriMax, 0, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
        tunExptTypeArgs$ := " -O " + GetRealArrayAsString$(tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1]);
        PrintLog(tunExptTypeArgs$ + "\n");
    endcase
    
    return status%;
end



func TunDlgOrientationGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, cv$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 8;
    i% := GratingParametersDialog%(label$, param$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
    return 1;
end



func TunDlgContrast%()
    var status%;
    DlgCreate("Contrast Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgReal(4, "Min Contrast%", 1, 100);
    DlgReal(5, "Max Contrast%", 1, 100);
    DlgCheck(6, "Random Progression?");
	DlgList(7, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgContrastGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunContrastMin, tunContrastMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tunExptTypeFileLabel$ := "dom";
        tunExptTypeLabel$ := "Contrast";
        if GetParameterProgression%(tunNSteps%+1, tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1], tunContrastMin, tunContrastMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
        tunExptTypeArgs$ := " -C " + GetRealArrayAsString$(tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1]);
        PrintLog(tunExptTypeArgs$ + "\n");
    endcase
    
    return status%;
end

func TunDlgContrastGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, cv$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 5;
    i% := GratingParametersDialog%(label$, param$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
    return 1;
end


func TunDlgSF%()
    var status%;
    DlgCreate("Spatial Frequency Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgReal(4, "Min SF", .01, 100);
    DlgReal(5, "Max SF", .01, 100);
    DlgCheck(6, "Random Progression?");
	DlgList(7, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgSFGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunSFMin, tunSFMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tunExptTypeFileLabel$ := "sf";
        tunExptTypeLabel$ := "Spatial Frequency";
        if GetParameterProgression%(tunNSteps%+1, tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1], tunSFMin, tunSFMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
        tunExptTypeArgs$ := " -S " + GetRealArrayAsString$(tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1]);
        PrintLog(tunExptTypeArgs$ + "\n");
    endcase
    
    return status%;
end

func TunDlgSFGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, cv$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 6;
    i% := GratingParametersDialog%(label$, param$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
    return 1;
end


func TunDlgTF%()
    var status%;
    DlgCreate("Temporal Frequency Tuning Parameters");
    DlgReal(1, "Stimulus time(s)", 0.1, 100.0);
    DlgReal(2, "Blank time(s)", 0.1, 100.0);
    DlgInteger(3, "Number of steps", 2, 100);
    DlgReal(4, "Min TF", .01, 100);
    DlgReal(5, "Max TF", .01, 100);
    DlgCheck(6, "Random Progression?");
	DlgList(7, "Background color:", tunBGColor$);
    DlgButton(151, "Grating Properties", TunDlgTFGrating%);
    status% := DlgShow(tunStimTime, tunBlankTime, tunNSteps%, tunTFMin, tunTFMax, tunRandomProgression%, tunBGColorIndex%);
    
    ' Check return value from DlgShow. If user hit OK, the return value is 1, but we must
    ' change it to 0 here.... that's so the calling dialog exits. 
    ' Before we return from here, though, we have all the info needed to put together the 
    ' command line for the tuning program. 
    
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tunExptTypeFileLabel$ := "tf";
        tunExptTypeLabel$ := "Temporal Frequency";
        if GetParameterProgression%(tunNSteps%+1, tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1], tunTFMin, tunTFMax, 1, tunRandomProgression%) <> 0 then
            ' TODO: Make sure dialog limits values to this never happens!
            Message("Cannot get progression values for this expt!");
            halt;
        endif
        tunExptTypeArgs$ := " -T " + GetRealArrayAsString$(tunParameterValues[0:tunNSteps%+1], tunParameterIndices%[0:tunNSteps%+1]);
        PrintLog(tunExptTypeArgs$ + "\n");
    endcase
    
    return status%;
end

func TunDlgTFGrating%()
    
    var x, y, w, h, sf, tf, ori;
    var contrast%;
    var label$, param$, cv$, pattern$, aperture$;
    var i%;
    var disable%[11];
    var ndisable%;

    ' Disregard the return value from GratingParametersDialog and return 1 so the calling dialog does not exit. 
    ArrConst(disable%[], 0);
    ndisable% := 1;
    disable%[0] := 7;
    i% := GratingParametersDialog%(label$, param$, disable%[], ndisable%, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$);
    return 1;
end


func TunDlgArea%()
    var status%;
    DlgCreate("Area Tuning Parameters");
    status% := DlgShow();
    PrintLog("TunDlgArea %d\n", status%);
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tunExptTypeFileLabel$ := "area";
        tunExptTypeLabel$ := "Area";
    endcase
    return status%;
end

func TunDlgXY%()
    var status%;
    DlgCreate("XY Tuning Parameters");
    status% := DlgShow();
    PrintLog("TunDlgXY %d\n", status%);
    docase
    case status% = 0 then 
        status% := 1;
    case status% = 1 then
        status% := 0;
        tunExptTypeFileLabel$ := "xy";
        tunExptTypeLabel$ := "XY";
    endcase
    return status%;
end
