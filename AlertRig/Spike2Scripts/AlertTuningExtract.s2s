var iKeepGoing% := 1;
var BatchFile%;
var OutputFile%;
var DataFile%;
var ta$, ta2$, ta3$, ta4$, ta5$;			' don't know what ta means, but these are strings read from the list/bat file. 
var ExpDir$;							' Experiments dir - where you'll find data files
var BaseFileName$;					' 
var DataChannel%;
var StimChannel%;
var ChgChannel%;
var KeyboardChannel% := 31;
var SpikeMarker%;


BatchFile% := FileOpen("E:\\Documents and Settings\\dan\\Desktop\\spike2ana\\list.txt",8,0);
while iKeepGoing% do

	View(BatchFile%);
	read(ta$, ta2$, ta3$, ta4$);
	if InStr(ta$, "end") then				' Line with "End" in it signifies the end of data to be processed
		iKeepGoing% :=0;
	else 											' Line with "New" in it means a new file is to be opened. Second item on line is the 
		if Instr(ta$, "NEW") then			' base filename for the data file. Assumed its in a subdir of ExpDir$ named "DataFiles"
			ExpDir$ := ta2$;
		else
			BaseFileName$ := ta$;			' Base filename is first thing on line
			SpikeMarker% := val(ta2$);		' followed by the marker value
			DataChannel% := val(ta3$);		' The channel where the data is is third on the line
			StimChannel% := val(ta4$);		' channel where we see stim triggers from vsg
			ChgChannel% := val(ta5$);		' Channel where "stim changed" triggers is seen
			DataFile% := FileOpen(ExpDir$ + "DataFiles\\" + BaseFileName$ + ".smr",0,1);
			PrintLog("datafile=" + str$(DataFile%) + "\n");
		'	message(ExpDir$ + "DataFiles\\" + BaseFileName$ + ".smr");
			View(DataFile%);

			OutputFile% := FileOpen(ExpDir$ + "SpikeTimes\\" + BaseFileName$+ ".trt" +Str$(DataChannel%)+Str$(SpikeMarker%),8,1);

			' Strategy is thus: Scan keyboard channel for "S". That is the request to bring up the stim. 
			' A successful trial is one where we find the "s" before an "X" is found. The "X" indicates trial aborted 
			' (probably because fixation broken), whereas the "s" indicates the trial was a success - take the stim down 
			' but leave the fixpt. When the "Ss" pair is found, use each to search for the next trigger (rising for "S", 
			' falling for "s") in the StimChannel. Those trigger times are the "on" time for the stim. 
			' Use the "a" key to count the advance of the stimulus - its not used in the output at all, however it might
			' be useful to count it anyways....

			' Close output file
			View(OutputFile%);
			FileClose(0, -1);

			' Close data file
			View(DataFile%);
			FileClose(0, -1);
		endif

	endif
wend

View(BatchFile%);
FileClose(0, -1);



' Find the next sample key in key$ starting from the time tstart. Returns the time it was found
' at or else -1

func NextSampleKey(key$, tstart)
	var t, tlast;
	var code%[4];
	var iBreak% := 0;
	var keychan% := 31;
	var tfound := -1;

	tlast := tstart;
	t := NextTime(31, tlast, code%[]);
	while (t >= 0 and iBreak%=0) do
		PrintLog("Found " + Chr$(code%[0]) + " at " + str$(t) + "\n");
		if Chr$(code%[0]) = key$ then
			PrintLog("Found " + key$ + " at " + str$(t) + "\n");
			tfound := t;
			iBreak% := 1;
		else
			tlast := t;
			t := NextTime(keychan%, tlast, code%[]);
	   endif
	wend
	return tfound;
end



' if key1$ is found, returns 1, if key2$ found returns 2. In either case tfound is set to the time its
' found at. Search begins at tstart.

func NextSampleKeyOr%(key1$, key2$, tstart, &tfound)
	var t, tlast;
	var code%[4];
	var iBreak% := 0;
	var keychan% := 31;
	var ireturn% := -1;

	tlast := tstart;
	t := NextTime(31, tlast, code%[]);
	while (t >= 0 and iBreak%=0) do
		PrintLog("Found " + Chr$(code%[0]) + " at " + str$(t) + "\n");
		if Chr$(code%[0]) = key1$ then
			PrintLog("Found " + key$ + " at " + str$(t) + "\n");
			tfound := t;
			iBreak% := 1;
		else
			tlast := t;
			t := NextTime(keychan%, tlast, code%[]);
	   endif
	wend
	return tfound;
end



