var iKeepGoing% := 1;
var BatchFile%;
var OutputFile%;
var DataFile%;
var ta$, ta2$, ta3$, ta4$, ta5$;			' don't know what ta means, but these are strings read from the list/bat file. 
var ExpDir$;							' Experiments dir - where you'll find data files
var BaseFileName$;					' 
var DataChannel%;
var StimChannel%;
var ChgChannel%;
var KeyboardChannel% := 31;
var SpikeMarker%;

'''''' CHANGE HERE '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' Change this line to reflect the location of your list file. 
BatchFile% := FileOpen("c:\\dev\\data\\spike2ana\\list.txt",8,0);

'''''' NO CHANGES BELOW THIS LINE! '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

while iKeepGoing% do

	View(BatchFile%);
	read(ta$, ta2$, ta3$, ta4$);
	if InStr(ta$, "end") then				' Line with "End" in it signifies the end of data to be processed
		iKeepGoing% :=0;
	else 											' Line with "New" in it means a new file is to be opened. Second item on line is the 
		if Instr(ta$, "NEW") then			' base filename for the data file. Assumed its in a subdir of ExpDir$ named "DataFiles"
			ExpDir$ := ta2$;
		else
			BaseFileName$ := ta$;			' Base filename is first thing on line
			SpikeMarker% := val(ta2$);		' followed by the marker value
			DataChannel% := val(ta3$);		' The channel where the data is is third on the line
			StimChannel% := val(ta4$);		' channel where we see stim triggers from vsg
			ChgChannel% := val(ta5$);		' Channel where "stim changed" triggers is seen
			OutputFile% := FileOpen(ExpDir$ + "SpikeTimes\\" + BaseFileName$+ ".trt" +Str$(DataChannel%)+Str$(SpikeMarker%),8,1);
			DataFile% := FileOpen(ExpDir$ + "DataFiles\\" + BaseFileName$ + ".smr",0,1);
			PrintLog("datafile=" + str$(DataFile%) + "\n");
			View(DataFile%);


			' Strategy is thus: Scan keyboard channel for "S". That is the request to bring up the stim. 
			' A successful trial is one where we find the "s" before an "X" is found. The "X" indicates trial aborted 
			' (probably because fixation broken), whereas the "s" indicates the trial was a success - take the stim down 
			' but leave the fixpt. When the "Ss" pair is found, use each to search for the next trigger (rising for "S", 
			' falling for "s") in the StimChannel. Those trigger times are the "on" time for the stim. 
			' Use the "a" key to count the advance of the stimulus - its not used in the output at all, however it might
			' be useful to count it anyways....

			var tStimUpRequest, tStimDownRequest;	' the times that the "S" and "s" sample keys are at for a given trial
			var t1, t2;										' the corresponding times for the actual trigger responses from the vsg
			var tStartSearch := -1;
			var ival%;										' return value from funcs
			var iContinue% := 1;							' When this is set to 0 we exit the loop. 

			while iContinue% do

				' Get an "S"
				tStimUpRequest := NextSampleKey("S", tStartSearch);
				if (tStimUpRequest >= 0) then

					' Find a subsequent "s" (successful trial) or "X" (fail/abort)
					ival% := NextSampleKeyOr%("s", "X", tStimUpRequest, tStimDownRequest);
					docase 
						case ival% = 1 then
							' Successful trial, get trigger times and write to output file
							t1 := NextTriggerTransition(StimChannel%, tStimUpRequest, 0);
							t2 := NextTriggerTransition(StimChannel%, tStimDownRequest, 1);
							if (t1 >=0 and t2>= 0) then
								' t1 and t2 are the trigger times we need. Write to output file
								View(OutputFile%).Print("%.4f\n%.4f\n", t1, t2);
								View(DataFile%);
								tStartSearch := t2;
							else
								' This shouldn't happen, but it did. The stim triggers _requests_ were found, but the corresponding 
								' trigger responses were not found! 
								PrintLog("Stim requests at " + str$(tStimUpRequest) + "/" + str$(tStimDownRequest) + " did not have corresponding triggers in StimChannel!\n");
								iContinue% := 0;
							endif
						case ival% = 2 then
							' failed trial. Set start search time to the X time
							tStartSearch := tStimDownRequest;
						else
							' end of data reached
							iContinue% := 0;
					endcase;
				else
					' No "S" triggers found. End of data. 
					iContinue% := 0;
				endif
			wend

			' Close output file
			View(OutputFile%);
			FileClose(0, -1);

			' Close data file
			View(DataFile%);
			FileClose(0, -1);
		endif
	endif
wend

View(BatchFile%);
FileClose(0, -1);



' Find the next sample key in key$ starting from the time tstart. Returns the time it was found
' at or else -1

func NextSampleKey(key$, tstart)
	var t, tlast;
	var code%[4];
	var iBreak% := 0;
	var keychan% := 31;
	var tfound := -1;

	tlast := tstart;
	t := NextTime(31, tlast, code%[]);
	while (t >= 0 and iBreak%=0) do
		PrintLog("Found " + Chr$(code%[0]) + " at " + str$(t) + "\n");
		if Chr$(code%[0]) = key$ then
			PrintLog("Found " + key$ + " at " + str$(t) + "\n");
			tfound := t;
			iBreak% := 1;
		else
			tlast := t;
			t := NextTime(keychan%, tlast, code%[]);
	   endif
	wend
	return tfound;
end



' if key1$ is found, returns 1, if key2$ found returns 2. In either case tfound is set to the time its
' found at. Search begins at tstart.

func NextSampleKeyOr%(key1$, key2$, tstart, &tfound)
	var t, tlast;
	var code%[4];
	var iBreak% := 0;
	var keychan% := 31;
	var ireturn% := -1;

	tlast := tstart;
	t := NextTime(31, tlast, code%[]);
	while (t >= 0 and iBreak%=0) do
		PrintLog("Found " + Chr$(code%[0]) + " at " + str$(t) + "\n");
		docase
			case Chr$(code%[0]) = key1$ then
				PrintLog("Found key1: " + key1$ + " at " + str$(t) + "\n");
				tfound := t;
				iBreak% := 1;
				ireturn% := 1;
			case Chr$(code%[0]) = key2$ then
				PrintLog("Found key2: " + key2$ + " at " + str$(t) + "\n");
				tfound := t;
				iBreak% := 1;
				ireturn% := 2;
			else
				tlast := t;
				t := NextTime(keychan%, tlast, code%[]);
		endcase;
	wend
	return ireturn%;
end



' Given a channel (a trigger channel) and a start time, find the next trigger transition in that channel with the 
' transition value 'transval'. The transval value should be 0 (1) for a positive-going (negative-going) transition. 
' Returns the time of the trigger, or -1 if no such trigger found. 

func NextTriggerTransition(chan%, tstart, transval)
	var t, tlast;
	var iBreak% := 0;
	var transition;
	var tfound := -1;

	tlast := tstart;
	t := NextTime(chan%, tlast, transition);
	while (t >= 0 and iBreak%=0) do
		PrintLog("Found trans " + str$(transition) + " at " + str$(t) + "\n");
		if (transition = transval) then
			tfound := t;
			iBreak% := 1;
		else
			tlast := t;
			t := NextTime(chan%, tlast, transition);
	   endif
	wend
	return tfound;
end


