' NextKeyOrText
'
' Find the next occurrence of a sample key or sample text after a given starting point. 
' Looks in channel 31 (where sample keys are recorded) and channel 30 (where sample text is 
' recorded) starting at tstart (or the beginning of the file if tstart is less than zero)
' and returns the first time (in either channel) where a key or mark is found. The time it 
' occurred at is the return value (-1 if none are found) and the text found is returned in 
' val$. If the found keys/text are found to occur in ignore$ they are ignored. This is useful
' for skipping juice "J" sample keys, for example, and other extraneous keys. Note also that
' this function makes no distinction between sample text which is a single character and 
' sample text which is a longer string. The same search (using the function InStr) is performed
' against ignore$ using the ENTIRE sample text string found, so it might be hard to ignore
' longer sample text strings. 
' 
' Modified 7-20-09 djs Search on channel 30 (sample text) strings is done using the first
' character of those strings, not the entire string. Some care should be taken when generating
' sample text in a data file if you will be using this function: If your text string begins with
' a character in the sIgnore$ list, the text will be ignored. If it SHOULD be ignored, but it 
' doesn't begin with such a character, then you'll get an extra piece of text to deal with. Its
' probably best to begin each sample text string with a characteristic (and unique, for the data
' file) character. 
'


var euIdentialTime% := 0;
var euTIdenticalTime := -1;
var euSIdentical$;
var euIgnoreText% := 0;         ' used internally only - when 1 NextKeyOrText will ignore text marks. See NextKey()

func NextKey(tstart, &val$, ignore$)
    var t := -1;
    euIgnoreText% := 1;
    t := NextKeyOrText(tstart, val$, ignore$);
    euIgnoreText% := 0;
    return t;
end



func NextKeyOrText(tstart, &val$, ignore$)
    var status% := 0;   ' -1 on error or unknown case
    var tfound := -1;
    var ttemp;

    ' vars for finding sample keys
    var tKey := -1;
    var sKey$;
    var iKeyCode%[4];

    ' vars for finding text markers
    var tText := -1;
    var sText$;
    var iTextCode%[4];  ' not used, actually
    
    
    ' check for special case
    if euIdentialTime% = 1 and tstart = euTIdenticalTime then
        val$ := euSIdentical$;
        tfound := euTIdenticalTime;
        euIdentialTime% := 0;
        euTIdenticalTime := -1;
        euSIdentical$ := "";
    else
        euIdentialTime% := 0;
        euTIdenticalTime := -1;
        euSIdentical$ := "";
    
        ' First look in channel 31 - sample keys
        tKey := NextTime(31, tstart, iKeyCode%[]);
        while tKey>=0 and (Len(ignore$)>0 and InStr(ignore$, Chr$(iKeyCode%[0]))>0) do
            ttemp := tKey;
            tKey := NextTime(31, ttemp, iKeyCode%[]);
        wend

        ' Next look in channel 30 - text markers. 
        ' djs 9-27-2010 Confirm that there is a text marker channel. 
        ' djs 6-21-2011 Added NextKey - which directs this function to ignore channel 30 text marks. 
        if euIgnoreText% = 0 and ChanKind(30)>0 then
            tText := NextTime(30, tstart, iTextCode%[], sText$);
        endif
        
        
        while tText>=0 and (Len(ignore$)>0 and InStr(ignore$, Left$(sText$, 1))) do
            ttemp := tText;
            tText := NextTime(30, ttemp, iTextCode%[], sText$);
        wend
        
        ' four cases.
        docase
        case tKey < 0 and tText < 0 then
            tfound := -1;
        case tKey < 0 and tText >= 0 then
            tfound := tText;
            val$ := sText$;
        case tKey >= 0 and tText < 0 then
            tfound := tKey;
            val$ := Chr$(iKeyCode%[0]);
        else
            'PrintLog("Found both tstart=" + str$(tstart) + " tText=" + str$(tText) + " tKey=" + str$(tKey) + "\n");
            docase 
            case tKey < tText then
                tfound := tKey;
                val$ := Chr$(iKeyCode%[0]);
            case tText < tKey then
                tfound := tText;
                val$ := sText$;
            case tText = tKey then
                'PrintLog("SAME TIME! %f %s %s\n", tText, sText$, sKey$);
                ' take the text first, then the key
                tfound := tText;
                val$ := sText$;
                euIdentialTime% := 1;
                euTIdenticalTime := tKey;
                euSIdentical$ := Chr$(iKeyCode%[0]);
            endcase
        endcase
    endif
    
    return tfound;
end



' NextTriggerTransition
'
' Find the first occurrence of a trigger transition in channel chan% after the time tstart with the 
' transition value 'transval'. The transval value should be 0 (1) for a positive-going (negative-going) 
' transition. Returns the time of the trigger, or -1 if no such trigger found. 
' Modified 11-05-08 djs. transval value of 2 means to accept any transition (regardless of transition type). 

func NextTriggerTransition(chan%, tstart, transval)
	var t, tlast;
	var iBreak% := 0;
	var transition;
	var tfound := -1;

	tlast := tstart;
	t := NextTime(chan%, tlast, transition);
	while (t >= 0 and iBreak%=0) do
		if (transval = 2 or transition = transval) then
			tfound := t;
			iBreak% := 1;
		else
			tlast := t;
			t := NextTime(chan%, tlast, transition);
	   endif
	wend
	return tfound;
end


func NextTextMark(tstart, &val$)
    var tText;
    var iTextCode%[4];
    
    if ViewKind() <> 0 then
        return -1;
    endif
    
    if ChanKind(30)=0 then
        return -1;
    endif
    
    return NextTime(30, tstart, iTextCode%[], val$);
end
