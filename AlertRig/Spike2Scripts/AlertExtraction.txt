Extracting data from Spike2 data files in the usrey lab. 


Spike data

Spikes are extracted with the script "SpikesExtract.s2s". When you run it you will be prompted for an input text file 
(with extension .txt). Each line in the input file should contain a filename (enclosed in quotes) and the channel number 
to take spike times from. If you've sorted and labelled spikes, you can add the spike label to the line and only those 
spike times will be extracted. Blank lines and lines beginning with # are ignored. The filenames can be full path names 
or relative path names (relative to the location of the text input file). The filename (including path) must be in 
quotes "". Output files are ascii text, and contain only spike times, one per line. These files are easily loaded into 
Matlab with a line like this:

Matlab> spikes = load('A_riv_019_1_1.spk');

Here is a sample input file:

# Sample input file for spike extraction

# All spikes in channel 1. Output file ./data/A_riv_019_1.spk
"./data/A_riv_019.smr" 1

# Spikes with label "1" in channel 1. Output file ./data/A_riv_019_1_1.spk
"./data/A_riv_019.smr" 1 1

# Spikes with label "2" in channel 1. Output file ./data/A_riv_019_1_2.spk
"./data/A_riv_019.smr" 1 2

# Spikes with label "3" in channel 1. Output file ./data/A_riv_019_1_3.spk
"./data/A_riv_019.smr" 1 3



FixPlus Data


Use the script FixPlusExtract.s2s. Input text file must have list of Spike2 data files. Output files have extension ".fpl". 
Output format is as follows:

outcome   tFixpt   tStimOn   tAllOff

Outcome is one of the following:
 -1 Unknown (error condition - should not happen)
 1  Success - trial completed successfully
 2  Failure - fixation not held through stim period
 3  Failure - fixation point acquisition failed
 4  Failure - fixation not held long enough to display stim

The other three values are times taken from VSG triggers and they relate specific times in the stimulus display:
 tFixpt - time of onset of fixation point
 tStimOn - time of onset of stimulus
 tAllOff - time when fixpt and stim turned off

NOTE: In successful trials (outcome = 1), one should not use tAllOff as the endpoint of the fixation period. 
Its probably more correct to use tStimOn + (hold fixation time). The script does not check for fixation after
the hold fixation time is past. Instead reward is given and a request is sent to turn off the stimulus. The 
extracted value only reflects the time when the stim actually went off. It is possible that the subject broke
fixation after the fixation time passed, but before the stim went off -- in that case the trial is still 
successful. 



Tuning data

Tuning data is extracted with the script TuningExtract.s2s (extracts from currently open file) or TuningExtractBatch.s2s 
(extracts from a list of Spike2 files). Output is in 3-column format:

 parameter   tStimOn    tStimOff

 parameter - the tunable parameter value for this trial
 tStimOn - time of onset of stimulus
 tStimOff - time stim turned off

As with the note above, it may be more accurate to use the fixation period as the cutoff for the time in which fixation was 
held, instead of the period between 'tStimOn' and 'tStimOff'.



Rivalry data



Rivalry data is extracted with the script RivalryExtract.s2s (extracts from currently open file) or RivalryExtractBatch.s2s 
(extracts from a list of spike2 data files). See below for extraction of joystick data. Output for each trial is written 
on three lines in the output text file. The format of the first of these lines is 

 TrialType  Correction Keys TFixptM TFixptS TEndTrialM TEndTrialS t(0) t(1) t(2) t(3) NStimTimes

where

 TrialType is an integer (see below for possible values)
 Correction is 1 for correction trials, 0 otherwise
 Keys is a string consisting of these characters: [569A]. Each represents a stimulus configuration (see below)
 TFixptM is the time of onset of the fixpt on master screen
 TFixptS is the time of onset of the fixpt on slave screen
 TEndTrialM is the time stim/fixpt were OFF master screen
 TEndTrialS is the time stim/fixpt were OFF slave screen
 t(0) - t(3) are pre-determined times used in the trial, see below
 NStimTimes is the number of stimuli times on each of the next two lines

TrialType can be one of the following values:
 0 - Training L
 1 - Training R
 2 - Rivalry LR
 3 - Rivalry RL
 4 - RivalryCatch LR
 5 - RivalryCatch RL
 6 - Training L - Rivalry - Training
 7 - Training R - Rivalry - Training
 8 - Training L - Fixed
 9 - Training R - Fixed

Stimulus configurations are indicated by one of the characters 5, 6, 9, A.
 5 - (training) Master and Slave horizontal
 A - (training) Master and Slave vertical
 6 - (rivalry) Master horizontal, Slave vertical
 9 - (rivalry) Master vertical, Slave horizontal

Pre-determined times are shown in the first line for a trial, the values t(0), t(1), t(2) and t(3). Whether they are used depends
on the trial type. If unused for a given trial type the values will be -1. In most cases the ACTUAL value should be taken from the
stim times - because of latencies in the scripts these times do not represent the actual times when the chances occurred. 

 trial type 0, 1, 2, 3 : t(0)-t(3) are not used
 trial type 4, 5: t(0) is the catch switch time (actual time will be the stim change time for the first occurrence of 5 or A in the keys)
 trial type 6, 7: t(0) is the length of the first training period
                  t(1) is the length of the rivalry period
                  t(2) is the length of the second training period
 trial type 8, 9: t(0) is the time after which the stim is fixed (there's no corresponding time in the stim times list for this). 

The stim times are listed on two lines. The first is the master stim times, the second is the slave stim times. The first value 
on each line is NStimTimes. If NStimTimes is 0 there are no additional values on the line(s), otherwise the times listed indicate 
the times when the stim changes took place.


Joystick data

Joystick data for rivalry is extracted using the script RivalryJoystickExtract.s2s. This script takes a list of input Spike2 data 
files and extracts joystick transition data. The Rivarlry data files contains a TextMark that specifies the joystick bounaries used 
during data acquisition. This script reads those boundaries and uses them to find time periods where the joystick position is in 
each of the regions between the boundaries. We use 4 boundaries, and so there are 5 regions (numbered in the extracted data files 0, 
1, 2, 3, 4). Starting at the lowest VOLTAGE boundary, region 0 is all voltages below that value (or joystick position to the LEFT of 
that boundary). Region 1 is the small region between the "Left High" boundary and the "Center Low" boundary. Region 2 is the center 
region (between "Center Low" and "Center High".Region 3 is the small region between "Center High" and "Right Low". Region 4 is all 
voltages above "Right Low", or joystick to the far right. 

The regions used in the Rivalry expt are regions 0 (left), 2 (Center), and 4 (right). This script prompts the user for an input text 
file. This text file should contain filenames (with full pathnames or pathnames relative to the location of the input text file). 

Each input file is scanned and an output text file is written in the same folder as the input data file, with the extension ".rjy". 
You must have write access to the directory where the aspike2 data file resides. 

A word of caution: The search method used for finding border crossings can fail in some cases. It will appear to fail at the end of 
a data file. I have not programmed a test to tell the difference. Thus the Spike2 "Log" window will look something like this when 
processing a data file:

ProcessListFile  Change current directory to C:\Documents and Settings\dan\Desktop\riv\
ProcessListFile  File A_riv_012.smr, args "". Start processing...
JoyX  Found joystick boundaries: 2.411, 2.429, 2.691, 2.716%
ERROR===============================================
JoystickExtract CursorSearch failed. Check noise and delay params. Last good search was at t=628.177 max time is 631.92
====================================================
INFO CursorValid is 0%0a ProcessListFile  File A_riv_012.smr, processing complete, status 0 
ProcessListFile  Done with listfile 
ProcessListFile  Restore current directory to C:\Documents and Settings\dan\Desktop\riv\

Note the line below the "ERROR". The time of the "last good search" is the time when the joystick voltage last crossed a boundary. The 
"max time" is the last time data was recorded in the file. In this case, the max time is less than 4 seconds from the last border crossing, 
and so its likely that the joystick was not moved during that time.

If you see a large difference between the "last good search time" and the "max time", then you may have an error in the search. There are 
some parameters used in the search relating to noise rejection that can be tweaked. I've tested the parameters in use with several Rivalry 
data files (as well as files from AttaJoy used with Farran's expt) and the searches all reach the end of the files successfully.


AttaJoy data

AttaJoy data is extracted with the script AttaJoyExtract.s2s (extracts from currently open file) or AttajoyExtractBatch.s2s (extracts 
from a list of spike2 data files). Output files containing extracted data have an extension of .ajj. 

Extracted data has the following format

TrialType  TFixpt  TStim  ChangeType  ChangeTime  TrialEndTime  ResponseTime

where 
 TrialType is 0 (1) for attend-towards (attend-away)
 TFixpt is the time of onset of the fixation point
 TStim is the time of onset of the stimulus
 ChangeType is 0 (1) when attend-towards (attend-away) stim changes contrast
 ChangeTime is the time the contrast change happens
 TrialEndTime is the time the stim were taken off the screen 
 ResponseTime is the time the subject responded to the stim change (if at all)

This must be updated to handle data from shock trials.

