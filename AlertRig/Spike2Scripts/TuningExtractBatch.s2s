#include "tuningExtractFunctions.s2s"
#include "../../Spike2Util/FileUtilities.s2s"

var hData%;
var sInitArg$;
var hTxt%;
var iCode%[4];
var hList%;
var iFileCounter% := 0;
var sFilename$;
var sTxtFilename$;
var sParFilename$;

' Open list file 
hList% := FileOpen("", 8, 0, "Select list file");
if hList% < 0 then
    Message("Error opening file. Is it open in another application?\n");
    halt;
endif

' The list file should contain filenames to be processed. 
' The format of the file is as follows:
' blank lines and lines beginning with "#" are ignored.
' Non-blank, non-comment lines must begin with a filename. 
' It must be either a full pathname to a data file (.smr)
' or a pathname relative to the current dir (best go with full pathnames). 


' Now that list file is opened, fetch one line at a time (ignoring blank and comment lines). 
' For each file found, we open it and a text file for output, make the data file the current view, 
' initialize the extraction and then extract. 

while GetNextDataFile%(hList%, sFilename$, sInitArg$) > 0 do
    
    ' Open data file
    iFileCounter% += 1;
    PrintLog("File %d: %s\n", iFileCounter%, sFilename$);
    hData% := FileOpen(sFilename$, 0, 0);
    if hData% < 0 then
        PrintLog("Error (%d): Cannot open file %s\n", hData%, sFilename$);
    else
        ' Open output text file
        sTxtFilename$ := ReplaceFileExtension$(hData%, ".txt");
        sParFilename$ := ReplaceFileExtension$(hData%, ".par");
        hTxt% := FileOpen(sTxtFilename$, 8, 1);
        if hTxt% < 0 then
            PrintLog("Error (%d): Cannot open output file %s\n", hTxt%, sTxtFilename$);
            View(hData%).FileClose();
        else
            ' Initialize processing
            if TuningExtractInit%(hTxt%, sParFilename$) = 0 then
                View(hData%);
                TuningExtract%(-1, -1);
            else
                PrintLog("Error : TuningExtractInit failed.\n");
            endif
            View(hData%); 
            FileClose();
            View(hTxt%);
            FileClose();
        endif
    endif    
wend

FileClose(hList%);


func GetNextDataFile%(h%, &sFile$, &sInit$)
    var i% := 0;
    var ok% := 0;
    var saveView%;
    saveView% := View(h%);
    View(h%);
    while i% = 0 do
        i% := Read(sFile$, sInit$);
        if i% > 0 and InStr(sFile$, "#") = 1 then
                i% := 0;    ' Comment line
        endif        
    wend
    return i%;
end
