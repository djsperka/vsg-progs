' $Id: CoolerMouse.s2s,v 1.7 2011-10-25 17:23:19 devel Exp $
'
' Eye X, Y - ADC input 14, 15 respectively
' VSG trigger - assumed on DIGIN byte 0.  *** THE 1401 SHOULD HAVE PREFERENCES 
'               SET WITH THE "Event Ports 0 and 1 on read digital input connector" 
'               BOX CHECKED!!!
'
'========================================================================

#include "../../Spike2Util/UsreyUtil.s2s"



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	CoolerMouse parameters START
'
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var cmFixationDuration;			' fixation time for reward
var cmUseDialog%;					' 1 to use dialog, 0 to use console "classic" mode

proc GetCoolerMouseParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\CoolerMouse";

	Profile(key$, "FixationDuration", "2", stmp$);
	cmFixationDuration := val(stmp$);
	Profile(key$, "UseDialog", 1, cmUseDialog%);
	return;
end;

proc SaveCoolerMouseParameters()
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\CoolerMouse";

	Profile(key$, "FixationDuration", str$(cmFixationDuration));
	Profile(key$, "UseDialog", cmUseDialog%);
	return;
end;


func CoolerMouseScriptDialog%()
	var i%;
	GetCoolerMouseParameters();
	DlgCreate("CoolerMouse Parameters", 25, 10, 50);
	DlgReal(1, "Fixation Duration(s):", 0.1, 10);
	DlgCheck(2, "Use Dialog?");
	i% := DlgShow(cmFixationDuration, cmUseDialog%);
	if (i% = 1) then
		SaveCoolerMouseParameters();
	endif;
	return i%;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' CoolerMouse parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



' Window handles and channel numbers
var XChannel%,YChannel%;		' Channel number assigned to eye x and y
var TriggerChannel%;			' Channel number assigned to vsg trigger input (i.e. trigger sent by vsg)
var DataWindow%;	' time view
var ReadyChannel%;	' VSG Status channel
var ChangedChannel%;	' Indicates fixation point location has changed
var XYWindow%;		' window with eye pos shown
var iStimChannel%;	' channel number for stimulus in xy window
var iStimWindowChannel%;' channel number for stimulus window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var StimHandle%;	' handle for stimulus application

' Display stuff
var FixWindowX[36],FixWindowY[36];	' points for displaying fixation window in xy view
var windowX[36], windowY[36];
' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];
var iStimIndex%;


' Check for valid data file path
if Len(dataDataSet$) = 0 then
	Message("No data set is selected! Edit Data parameters...");
	' Might be nice to open the dialog here....
	halt;
else 
	' Set path for new data files
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1, 1);
	SampleAutoName$(dataCellName$ + "_fix_000");
	SampleAutoFile(1);
	PrintLog("dataPathRoot=" + dataPathRoot$ + "\n");
	PrintLog("dataDataSet=" + dataDataSet$ + "\n");
	PrintLog("AutoFile status " + str$(SampleAutoFile()) + "\n");
endif

CoolerMouseScriptDialog%();



' Assign channel numbers for eye X,Y and trigger. 
XChannel% := NumberOfElectrodes%+1;
YChannel% := NumberOfElectrodes%+2;
TriggerChannel% := NumberOfElectrodes%+3;
ReadyChannel% := NumberOfElectrodes%+4;
ChangedChannel% := NumberOfElectrodes%+5;

CreateSampleConfiguration();


' Get display windows ready
InitializeWindows();
DrawStim(1);

' Prepare the toolbar buttons
InitializeToolbar();







const stateStart%			:= 0;
const stateVSGWait%			:= 1;
const stateVSGWaitConfirm% 		:= 2;
const stateWaitForAcquisition%		:= 3;
const stateWaitForFixation%		:= 4;
const stateStartTrial%			:= 5;
const stateSuccess%			:= 6;
const stateFailure%			:= 7;
const stateFixptMoving%			:= 8;
const stateDone%			:= 10;

var VSGReady%	:= 0;	' set to 1 after vsg ready/confirm cycle
var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var iState%:=stateStart%;		' present state
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tAcquisition:= -1;
var tTrigger:=-1;	' temp var for newly discovered trigger times
var nTrialsStarted%:=0;
var nTrialsSuccess%:=0;
var nTrialsFail%:=0;

' Run real time analysis here. 
func IdleProcessing%()
	var iStatus% := 1;	' this is return value. value of 1 (0) continues (stops) processing
	var quitEvent% := 0;
	var changedEvent% := 0;

	tNow := MaxTime();

	xEye := ChanMeasure(XChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltX;
	yEye := ChanMeasure(YChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltY;

	' Don't update display every time....
	if tNow-tLastUpdate > .005 then
		View(XYWindow%).XYAddData(1,xEye,yEye);
		tLastUpdate := tNow;
	endif

	' Check for events on the Quit channel and the Changed channel
	if VSGReady% = 1 then

		if (NextTime(ReadyChannel%, tLast, vTrigger) > tLast) then 
			iState% := stateDone%;
		else
			if (NextTime(ChangedChannel%, tLast, vTrigger) > tLast) then 
				if vTrigger = 1 then
					GetFixationPointParameters();
					DrawStim(1);
					iState% := stateStartTrial%;
				else
					DrawStim(0);
					iState% := stateFixptMoving%;
				endif
			endif;
		endif;


	endif;

	' What state are we in? 
	docase 
		case iState% = stateStart% then

			' initial state on startup. 
			' DIGOUT to present stimulus
			' Enter state 1

			iState% := stateVSGWait%;

		case iState% = stateVSGWait% then

			' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
			tTrigger := NextTime(ReadyChannel%, tLast, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 0 then
				PrintLog("state stateVSGWait: Got leading edge of trigger\n");
				tLastTrigger := tTrigger;
				ChangeStateTo(stateVSGWaitConfirm%, tTrigger);
			endif;

		case iState% = stateVSGWaitConfirm% then

			' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
			tTrigger := NextTime(ReadyChannel%, tLastTrigger, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 1 then
				PrintLog("state stateVSGWaitConfirm: Got trailing edge of trigger\n");
				tLastTrigger := tTrigger;
				VSGReady% := 1;
				ChangeStateTo(stateStartTrial%, tTrigger);
			endif;

		case iState% = stateStartTrial% then

			ChangeStateTo(stateWaitForAcquisition%, tNow);

		case iState% = stateFixptMoving% then

			' Nothing happens here. 

		case iState% = stateDone% then

			' We're all done
			Stop%();
			iStatus% := 0;

		case iState% = stateWaitForAcquisition% then

			' Acquisition happens when the eye falls within the fixation window.
			if InFixationWindow%(xEye, yEye) > 0 then

				PrintLog("State 2 - acquired target. tNow=" + str$(tNow) + " Enter state 3\n");
				iState% := stateWaitForFixation%;
				tStateStart := tNow;
				tAcquisition := tNow;
	
			endif

		case iState% = stateWaitForFixation% then

			' Waiting for fixation....
			if InFixationWindow%(xEye, yEye) <= 0 then

				iState% := stateFailure%;
				tStateStart := tNow;

			else

				if tNow - tAcquisition >= cmFixationDuration then

					' Fixation. Reward. New trial.
					iState% := stateSuccess%;
					tStateStart := tNow;

				endif

			endif

		case iState% = stateSuccess% then

			nTrialsSuccess% += 1;
			Reward%();
			' tally successful trials
			iState% := stateStartTrial%;
			tStateStart := tNow;

		case iState% = stateFailure% then

			nTrialsFail% += 1;
			iState% := stateStartTrial%;
			tStateStart := tNow;

		else 

			' Unknown state!
			Message("Unknown state=" + str$(iState%));
			halt;

	endcase;

	tLast := tNow;
	
	return iStatus%;

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;
	SampleClear(); 'Set standard sampling state

	'Channel recording definitions
	SampleEvent(TriggerChannel%, 1, 2, 3600); 'Trigger channel, level
	SampleComment$(TriggerChannel%, "Trigger");
	SampleTitle$(TriggerChannel%, "Trigger");

	'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
	SampleWaveform(XChannel%, 14, 1000);
	SampleTitle$(XChannel%,"Eye X");
	SampleWaveform(YChannel%, 15, 1000);
	SampleTitle$(YChannel%, "Eye Y");

	SampleEvent(ReadyChannel%,6,2,3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");

	SampleEvent(ChangedChannel%,7,2,3600); 'Trigger channel, level
	SampleComment$(ChangedChannel%,"FixPt Chgd");
	SampleTitle$(ChangedChannel%,"FixPt Chgd");

	SampleSequencer(script$ + "Fixation.pls");
	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawStim
' 
' Draws stimulus in xy window (iDraw%==1) or blanks it (0). 
proc DrawStim(iDraw%)

	if iDraw% > 0 then
		var xstim, ystim;
		xstim := GetStimX();
		ystim := GetStimY();

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iStimChannel%, xstim, ystim);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], xstim);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], ystim);

		View(XYWindow%).XYAddData(iStimWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iStimChannel%);
		View(XYWindow%).XYDelete(iStimWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(-0.235849,52.746,97.2484,99.8856);
	View(DataWindow%).WindowVisible(1);

	'Open an XY view to display eye position
	XYWindow% := FileNew(12);
	XRange(-30,30);
	YRange(-2,-30,30);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(-0.550314,0.114416,41.5094,52.746);
	XYColour(1,16);
	XYSize(1,-1);

	'Calcuate the fixation window
	var index%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for index% := 0 to 35 do
		FixWindowX[index%] := WindowRadius * Cos(index% * twopi/36.0);
		FixWindowY[index%] := WindowRadius * Sin(index% * twopi/36.0);
	next;

	'Create a new channel in the XY view to display the fixation window
	iStimWindowChannel% := XYSetChan(0);
	XYColour(2,13);
	XYDrawMode(2,2,1);
	XYJoin(2,1);

	'Draw the fixation window ON SECOND THOUGHT, DON'T
	'XYAddData(2, FixWindowX[], FixWindowY[]);	

	'Create a new channel in the XY view to display the fixation point
	iStimChannel% := XYSetChan(0);

	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(4,13);
	XYDrawMode(4,3,1);
	XYJoin(4,2);
	XYAddData(4,-9,-7);
	XYAddData(4,9,-7);
	XYAddData(4,9,7);
	XYAddData(4,-9,7);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(1, "Sample start", Start%);
	ToolbarSet(2, "Sample stop", Stop%);
	ToolbarSet(3, "Juice", Reward%);
	ToolbarSet(4, "Quit", Quit%);
	ToolbarEnable(2,0);
	Toolbar("Go",12345);

end;


' Get grating p[arameters from registry AlertRig\\(config)\\Gratings\\type$
func GetGratingParameters$(type$)
	var key$;
	var stmp$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\Gratings";
	Profile(key$, type$, "", stmp$);
	return stmp$;
end;


' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
	var CommandLine$;
	var FixationPoint$;
	var Extras$;
	var Distractors$:="";
	
	SampleStart(0); 'Start sampling
	
	GetFixationPointParameters();

	CommandLine$ := "cmd /k " + bin$ + "\\dCoolerMouse";

	'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
	PrintLog(CommandLine$+"\n");
	StimHandle% := ProgRun(CommandLine$,0);
	if StimHandle% <0 then Message("Could not start stimulus."); halt; endif
	
	ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
'	ToolbarEnable(6,0);
'	ToolbarEnable(7,1);
'	ToolbarEnable(8,1);
'	ToolbarEnable(9,1);
'	ToolbarEnable(10,1);
	View(DataWindow%);
	Yield(.1);
	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()

	' Disable idle process func
	ToolbarSet(0,"");

	' Tell stim app to shut down
	SampleKey("Q");
	Yield(.1);
	SampleStop();
	ProgKill(StimHandle%);
	ProgRun(bin$ + "\\ClearTrigger",0);

	' Save data file
	' djs 5-2-2005
	' When autonaming is used, this is not necessary. In fact, the call to FileSave fails!
	' Leaving the call out altogether makes it work. .. . . 
	'View(DataWindow%);
	'if FileSave() <> 0 then
	'	Message("WARNING! Data file not saved!!!");
	'endif

end;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func GetStimX()
	var xstim;
	xstim := FixationX;
	return xstim;
end;

func GetStimY()
	var ystim;
	ystim := FixationY;
	return ystim;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InFixationWindow%(EyePosX,EyePosY)
	var i% := 0;
	var xstim, ystim;
	xstim := GetStimX();
	ystim := GetStimY();
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-xstim, 2) + Pow(EyePosY-ystim, 2)) <= Pow(WindowRadius,2) then 
		i% := 1;
	endif
	return i%;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
	var i;
	for i:=1 to JuicePerReward% do Yield(.05); SampleKey("J"); next
	return 1;
end;



