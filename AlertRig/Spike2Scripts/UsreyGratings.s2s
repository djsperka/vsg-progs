#include "../../Spike2Util/UsreyUtil.s2s"

var grutilDisable%[11];
var grutilNDisable% := 0;


'Save grating parameters, old, before phase was an integral part of the gr$ string
'func SaveGratingParameters(type$, gr$, phase)
'    var key$;
'    key$ := GetRegistryKey$(1) + "\\Gratings";
'    SetStringRegistryValue(key$, type$, gr$);
'    SetStringRegistryValue(key$, type$+"Phase", Str$(phase));
'    return 0;
'end

'Save grating parameters, remove phase as it is now an integral part of the gr$ string
func SaveGratingParameters(type$, gr$)
    var key$;
    key$ := GetRegistryKey$(1) + "\\Gratings";
    SetStringRegistryValue(key$, type$, gr$);
    return 0;
end


' Get grating parameters from registry AlertRig\\(config)\\Gratings\\type$
' Temporary version, removing
'func GetGratingParameters$(type$, &phase)
'	var key$;
'	var stmp$;
'    var phase$;
'	key$ := GetRegistryKey$(1) + "\\Gratings";
'    phase$ := GetStringRegistryValue$(key$, type$+"Phase", "");
'    phase := Val(phase$);
'	return GetStringRegistryValue$(key$, type$, "");
'end;

' Get grating parameters from registry AlertRig\\(config)\\Gratings\\type$
func GetGratingParameters$(type$)
	var key$;
	var stmp$;
	key$ := GetRegistryKey$(1) + "\\Gratings";
	return GetStringRegistryValue$(key$, type$, "");
end;



'We can no longer populate a grating in a new configuration using Tuning - I don't know when this capability
'was taken away, but it was probably long ago.  This function allows us to access the existing Stimulus grating
'in the default configuration as a starting point.
func GetDefaultGratingParameters$(type$)
    var key$;
	var stmp$;
	key$ := "AlertRig\default\Gratings";
	return GetStringRegistryValue$(key$, type$, "");
end;



' GratingParametersDialog%
'
' Presents a dialog to edit grating parameters. You can disable certain pieces of the dialog to prevent changes to those values. If the 
' user hits OK then the grating parameter string is returned in param$ (this is the value saved in the registry and passed to VSG apps
' to specify gratings). In addition, each of the individual parameter values is returned in the various parameters. 
' 
' disable%[] is an array with ndisable% elements. Each element should be an integer between 1 and 11 - these represent dialog items that should
' be disabled -- i.e. the user may not modify them. You still must provide a value for them when calling GratingParametersDialog, however; the 
' values will be visible but grayed out. The dialog item numbers are as follows:
'
' 	1: X coordinate
'   2: Y coordinate
'   3: Outer Width
'   4: Outer Height
'   5: Inner Width  'Distinction between outer and inner width added 1-20-12, jj
'   6: Inner Height
'   5: Contrast %
'   6: Spatial freq
'   7: Temporal freq
'   8: Orientation (degrees)
'   9: Phase (degrees)
'   10: Color
'   11: Pattern (sine, square wave)
'   12: Aperture (oval, rectangular)
'
' Returns 1 (0) if the user hits OK (Cancel). 


func GratingParametersDialog%(label$, &param$, disable%[], ndisable%, &x, &y, &w, &h, &iw, &ih, &contrast%, &sf, &tf, &ori, &phase, &cv$, &pattern$, &aperture$)

	var i%;

	var ColorVectorList$[5];
	var cvl$[5];
	var icvl% := 0;
	ColorVectorList$[0]:="Black/White";	cvl$[0]:="b";
	ColorVectorList$[1]:="L cone";		cvl$[1]:="l";
	ColorVectorList$[2]:="M cone";		cvl$[2]:="m";
	ColorVectorList$[3]:="S cone";		cvl$[3]:="s";
	ColorVectorList$[4]:="Custom";		cvl$[4]:="custom";

	var PatternList$[2];
	var pl$[2];
	var ipl% := 0;
	PatternList$[0]:="Sine";	pl$[0]:="s";
	PatternList$[1]:="Square";	pl$[1]:="q";

	var ApertureList$[2];
	var al$[2];
	var ial% := 0;
	ApertureList$[0]:="Ellipse";	al$[0]:="e";
	ApertureList$[1]:="Rectangle";	al$[1]:="r";

    ' If the passed params$ is non-empty, then parse it before opening the dialog. 
    if Len(param$)>0 then
        ' Check for presence of cv$/pattern$/aperture$, if present find index...but no return?
        ' Updated to allow FindMatchedString to output to icvl% etc. 9/21/11 JJ
        if ParseGratingParameters%(param$, x, y, w, h, iw, ih, contrast%, sf, tf, ori, phase, cv$, pattern$, aperture$) = 0 then
            icvl% := FindMatchedStringIndex%(cv$, cvl$[], 5, 4);
            ipl% := FindMatchedStringIndex%(pattern$, pl$[], 2, 0);
            ial% := FindMatchedStringIndex%(aperture$, al$, 2, 0);
        endif
    endif

    ' Prepare global var to handle disabled vars in the check function. 
    for i% := 0 to ndisable%-1 do
        grutilDisable%[i%] := disable%[i%];
    next;
    grutilNDisable% := ndisable%;


	DlgCreate("Grating parameters: " + label$, 25, 10);
    DlgAllow(0, 0, GratingParametersDialogCheck%);
	DlgReal(1, "X:", -40, 40);
	DlgReal(2, "Y:", -40, 40);
	DlgReal(3, "Outer Width:", .1, 30);
	DlgReal(4, "Outer Height:", .1, 30);
    DlgReal(5, "Inner Width:", 0, 30);
	DlgReal(6, "Inner Height:", 0, 30);
	DlgInteger(7, "Contrast(%):", -100, 100);
	DlgReal(8, "Spatial Freq:", .01, 10);
	DlgReal(9, "Temporal Freq:", 0, 10);
	DlgReal(10, "Orientation (degrees):", 0, 360);
    DlgReal(11, "Initial Phase (deg, 0 = white at center)", -360, 360);
	DlgList(12, "Color:", ColorVectorList$[]);
	DlgList(13, "Pattern:", PatternList$[]);
	DlgList(14, "Aperture:", ApertureList$[]);
	i% := DlgShow(x, y, w, h, iw, ih, contrast%, sf, tf, ori, phase, icvl%, ipl%, ial%);
    Convert180(phase);
	if i%=1 then
		cv$ := cvl$[icvl%];
		pattern$ := pl$[ipl%];
		aperture$ := al$[ial%];
        if w > iw and h > ih then  'don't let inner dimensions of donut be larger than outer
            ' save parameters
            param$ := EncodeGratingParameters$(x, y, w, h, iw, ih, contrast%, sf, tf, ori, phase, cv$, pattern$, aperture$);
        else
            message("Inner diameters cannot be greater than outer diameters!  Try Again!");
        endif;
	endif
    return i%;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' GratingParametersDialogCheck%(item%)
' 
' Check function for the grating parameters dialog.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GratingParametersDialogCheck%(item%)
    var status% := 1;
    var i%;
    
    docase 
    case item% = 0 then
        for i% := 0 to grutilNDisable%-1 do
            DlgEnable(0, grutilDisable%[i%]);
        next
    endcase
    
    return status%;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' ParseGratingParameters%(gr$, &x, &y, &w, &h, &contrast%, &sf, &tf, &ori, &phase, &cv$, &pattern$, &aperture$)
' 
' Given a grating parameter list, parse the individual values in to the given variable list. 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func ParseGratingParameters%(gr$, &x, &y, &w, &h, &iw, &ih, &contrast%, &sf, &tf, &ori, &phase, &cv$, &pattern$, &aperture$)
    var status% := 0;
    var n%;
    var str1$, str2$, str3$, str4$, str5$, str6$, str7$, str8$;
    var str9$, str10$, str11$, str12$, str13$, str14$;
	ReadSetup("", "", "", "", ",");
    'Do initial read to determine how many variables are present
    n% := ReadStr(gr$, str1$, str2$, str3$, str4$, str5$, str6$, str7$, str8$, str9$, str10$, str11$, str12$, str13$, str14$);
    
    docase
    case n% = 8 or n% = 9 or n% = 12 then
        'If the read gets 8 (no phase or strings), 9 (no strings) or 12 (everything) variables this is the correct read
        n% := ReadStr(gr$, x, y, w, h, contrast%, sf, tf, ori, phase, cv$, pattern$, aperture$);
    case n% = 11 then
        'If there are 11 variables read (strings, no phase) the correct read omits phase
        n% := ReadStr(gr$, x, y, w, h, contrast%, sf, tf, ori, cv$, pattern$, aperture$); 
    case n% = 14 then
        'If 14 parameters are present, inner width and outer width are set
        n% := ReadStr(gr$, x, y, w, h, iw, ih, contrast%, sf, tf, ori, phase, cv$, pattern$, aperture$);
    else
        
    endcase; 
    ReadSetup();
    if n% < 11 then 'Return -1 as status if there is no cv$/pattern$/aperture$
        status% := -1; 'otherwise return 0 if cv$/pattern$/aperture$ are present
                       'there is currently no return scheme to indicate that phase is present
    endif;
    return status%;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' ParseGratingParametersBrief%(gr$, &x, &y, &w, &h);
' 
' Given a grating parameter list, parse the individual values in to the given variable list. 
' Simpler version than the full-blown one, as it doesn't return all values. 
' This version will work for all possible variable list lengths - with/without phase/cv/pattern/aperture/inner/outer
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func ParseGratingParametersBrief%(gr$, &x, &y, &w, &h)
    var status% := 0;
    var n%;
	ReadSetup("", "", "", "", ",");
	n% := ReadStr(gr$, x, y, w, h);
    ReadSetup();
    if n% <> 4 then status% := -1; endif;
    return n%;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' EncodeGratingParameters$(x, y, w, h, iw, ih, contrast%, sf, tf, ori, phase, cv$, pattern$, aperture$)
'
' Form a parameter string for a grating with the given parameters. The resulting string
' is suitable for feeding to a VSG application as a parameter arg for a grating. 
'
' Added iw, ih 1-20-12.  Phase, others added earlier.  ParseGratingParameters is backcompatible for all
' possible grating specs, but the encode version is not (nor has it ever been).  Once you encode, you're
' in the new format.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func EncodeGratingParameters$(x, y, w, h, iw, ih, contrast%, sf, tf, ori, phase, cv$, pattern$, aperture$)
    return Print$("%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%d,%.2f,%.2f,%.1f,%.1f,%s,%s,%s", x, y, w, h, iw, ih, contrast%, sf, tf, ori, phase, cv$, pattern$, aperture$);
end;
 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' FindMatchedStringIndex%(val$, list$[], nlist%, default%)
'
' Given a string value, find the index of an array item that matches it. The first nlist% 
' items in the array list$[] are checked sequentially until a match is found. 
' 
' Returns the index of the match found. If no match is found then the index value in default% 
' is returned. The default value can be outside the range allowed for the list 
' (e.g. it can be negative). 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
func FindMatchedStringIndex%(val$, list$[], nlist%, default%)
    var i% := 0;
    var isFound% := 0;
    var index%;
    index% := default%;
    while isFound% = 0 and i% < nlist% do
        if list$[i%] = val$ then
            index% := i%;
            isFound% := 1;
        else
            i% += 1;
        endif
    wend
    return index%;
end

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' FindMatchedIntIndex%(val%, list%[], nlist%, default%)
'
' Same as FindMatchedStringIndex$, but works on a list of ints in a list. Remember, 
' the val% is matched against the elements in the array, but the returned value
' is an index into the array, not the value itself! 
' 
' Returns the index of the match found. If no match is found then the index value in default% 
' is returned. The default value can be outside the range allowed for the list 
' (e.g. it can be negative). 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    
func FindMatchedIntIndex%(val%, list%[], nlist%, default%)
    var i% := 0;
    var isFound% := 0;
    var index%;
    index% := default%;
    while isFound% = 0 and i% < nlist% do
        if list%[i%] = val% then
            index% := i%;
            isFound% := 1;
        else
            i% += 1;
        endif
    wend
    return index%;
end



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' ParseCustomColor%(s$, rgb%[])
' 
' Attempts to parse an rgb custom color in the format (r/g/b). Each value is assumed to be an int
' between 0 and 255, but no check is made of that here. The array rgb%[] must have at least 3 
' elements. 
' 
' Returns 0 if successful (3 numbers found, correct format) or -1 otherwise. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


func ParseCustomColor%(s$, rgb%[])
    var status% := -1;
    var n;
    ReadSetup("", "/(", "(", ")");
    n := ReadStr(s$, rgb%[0], rgb%[1], rgb%[2]);
    ReadSetup();
    if n = 3 then
        status% := 0;
    endif
    return status%;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' EncodeCustomColor$(rgb%[])
'
' Encode the rgb values (assumed to be between 0 and 255) in rgb%[] (there must be at least 3 
' elements) into a color string (r/g/b). 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func EncodeCustomColor$(r%, g%, b%)
    var s$;
    s$ := Print$("(%d/%d/%d)", r%, g%, b%);
    return s$;
end



'---- Convert an input number to a value between -179.9999... and 180, useful for phase
Func Convert180(&x)
    var y;
    y := x mod 360;
    docase
    case y < -180 then
        y := y + 360;
    case y > 180 then
        y := y - 360;
    endcase
    if y = -0 then  'don't allow negative zero to be safe, might muck up the VSG call
        y := 0;
    endif;
    if y = -180 then  'don't allow -180 to be safe, might muck up the VSG call
        y := 180;
    endif;
    x := y;
    return 1;
end