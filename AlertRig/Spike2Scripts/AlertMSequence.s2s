' $Id: AlertMSequence.s2s,v 1.14 2006-09-18 19:13:30 dan Exp $

'========================================================================
'
' INPUTS
'
' Eye X, Y - ADC input 14, 15 respectively
' VSG trigger - assumed on DIGIN byte 0.  *** THE 1401 SHOULD HAVE PREFERENCES 
'               SET WITH THE "Event Ports 0 and 1 on read digital input connector" 
'               BOX CHECKED!!!
'
'========================================================================

' File system reference vars. Each var is a directory path, WITHOUT the trailing slash. 
var bin$, script$, config$;
script$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2);	' folder containing this script
bin$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\bin";	' Location of executables is ..\bin, relative to script dir
config$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\config";	' Location of executables is ..\bin, relative to script dir

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetCurrentConfiguration$()
	var key$;
	var s$;
	key$:="AlertRig";
	Profile(key$, "CurrentConfiguration", "default", s$);
	return s$;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Data parameters START
'
'	Vars that control where data is stored. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var dataPathRoot$;		' base path for data storage
var dataDataSet$;		' folder under data path where data files placed
var dataCellName$;		' part of base name for all data files
var dataDataSetTextItem%;	' 

proc GetDataParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\Data";

	Profile(key$, "PathRoot", "C:\\Experiments", dataPathRoot$);
	Profile(key$, "DataSet", "", dataDataSet$);
	Profile(key$, "CellName", "", dataCellName$);
	return;
end;

proc SaveDataParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\Data";

	Profile(key$, "PathRoot", dataPathRoot$);
	Profile(key$, "DataSet", dataDataSet$);
	Profile(key$, "CellName", dataCellName$);
	return;
end;

func DataParametersDialog%()
	var i%;
	GetDataParameters();
	DlgCreate("Data Storage Parameters", 25, 10, 50);
	DlgText("Data root path: " + dataPathRoot$, 0, 1);
	dataDataSetTextItem% := DlgText("Data set name: " + dataDataSet$, 0, 2);
	DlgString(1, "Cell name:", 10, "", 0, 3);
        DlgButton(2, "New Data Set", NewDataSet%);
	i% := DlgShow(dataCellName$);
	if (i% = 1) then
		if Len(dataDataSet$) = 0 then
			Message("Must specify a data set (try the button!)");
		else
			if Len(dataCellName$) = 0 then
				Message("Must specify a cell name");
			else
				FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
				SaveDataParameters();
			endif;
		endif;
	endif;
	return i%;
end;


func NewDataSet%()
	var d$;
	var i%;
	var dirs$[100];	' if there are ever more than 100 datasets in a single day there will be trouble
	d$ := Date$(2, 2, 3, 3, "-");
	PrintLog("NewDataSet: date string = " + d$ + "\n");

	' Change current dir to data path root, then get list of subdirs with this date string
	PrintLog("NewDataSet: dataPathRoot$=" + dataPathRoot$ + "\n");
	FilePathSet(dataPathRoot$, 0, 1);
	i% := FileList(dirs$, -2, d$ + "-??");
        PrintLog("NewDataSet: found " + str$(i%) + " dirs\n");

	' form new dataset name. The first will have "-01" appended, the second "-02", etc. 
	dataDataSet$ := Print$("%s-%02d", d$, i%+1);
	PrintLog("NewDataSet: dataset= " + dataDataSet$ + "\n");
	DlgValue$(dataDataSetTextItem%, "Data set name: " + dataDataSet$);
	return 1;
end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Data parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


var DistanceToScreenMM$;		' Distance to screen in MM
var DegreesPerVoltX;			' Conversion factor from ADC to visual degrees
var DegreesPerVoltY;			' Conversion factor from ADC to visual degrees
var EyeCoilSamplingFrequency%;		' Frequency to sample eye coil at
var NumberOfElectrodes%;		' Number of electrodes (i.e. wavemark inputs) in use
var JuicePerReward%;			' Number of juice squirts per reward


func DAQParametersDialog%()

	var iReturn%;
	var idist%;

	GetDAQParameters();

	idist% := val(DistanceToScreenMM$);
	DlgCreate("DAQ parameters: " + GetCurrentConfiguration$());
	DlgInteger(1, "Number of Electrodes:", 1, 7, 0, 0, 1);
	DlgInteger(2, "Screen Distance (MM):", 1, 5000);
	DlgReal(3, "Degrees/Volt (X):", 0, 100);
	DlgReal(4, "Degrees/Volt (Y):", 0, 100);
	DlgInteger(5, "Eye Coil Sampling Freq (Hz):", 1, 20000);
	DlgInteger(6, "Juice per reward:", 0, 10, 0, 0, 1);
	iReturn% := DlgShow(NumberOfElectrodes%, idist%, DegreesPerVoltX, DegreesPerVoltY, EyeCoilSamplingFrequency%, JuicePerReward%);

	if iReturn% = 1 then
		DistanceToScreenMM$ := str$(idist%);
		SaveDAQParameters();
	endif
	return iReturn%;
end;




	
proc GetDAQParameters()
	var key$;
	var DegreesPerVoltX$, DegreesPerVoltY$;

	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\DAQ";
	Profile(key$, "DistanceToScreenMM", "850", DistanceToScreenMM$);	' will just pass this to stimulus app
	Profile(key$, "DegreesPerVoltX", "", DegreesPerVoltX$);
	Profile(key$, "DegreesPerVoltY", "", DegreesPerVoltY$);
	Profile(key$, "EyeCoilSamplingFrequency", 1000, EyeCoilSamplingFrequency%);
	Profile(key$, "NumberOfElectrodes", 1, NumberOfElectrodes%);
	Profile(key$, "JuicePerReward", 1, JuicePerReward%);
	DegreesPerVoltX := val(DegreesPerVoltX$);
	DegreesPerVoltY := val(DegreesPerVoltY$);

end;

proc SaveDAQParameters()
	var key$;
	var DegreesPerVoltX$, DegreesPerVoltY$;
	DegreesPerVoltX$ := str$(DegreesPerVoltX);
	DegreesPerVoltY$ := str$(DegreesPerVoltY);
	
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\DAQ";
	Profile(key$, "DistanceToScreenMM", DistanceToScreenMM$);
	Profile(key$, "DegreesPerVoltX", DegreesPerVoltX$);
	Profile(key$, "DegreesPerVoltY", DegreesPerVoltY$);
	Profile(key$, "EyeCoilSamplingFrequency", EyeCoilSamplingFrequency%);
	Profile(key$, "NumberOfElectrodes", NumberOfElectrodes%);
	Profile(key$, "JuicePerReward", JuicePerReward%);

end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	DAQ Parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Fixation Point parameters START
'
'	These vars and funcs control the parameters for the fixation point stored in the registry. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



var WindowRadius;
var FixationX, FixationY;
var FixationColor$;
var iFixationColor%;
var FixationDiameter;
var FixationColorList$[3]; 
var FixationArg$;

proc GetFixationPointParameters()
	var stmp$;
	var key$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\FixationPoint";
	Profile(key$, "WindowRadius", "1", stmp$);
	WindowRadius := val(stmp$);

	Profile(key$, "FixationX", "0", stmp$);
	FixationX := val(stmp$);
	Profile(key$, "FixationY", "0", stmp$);
	FixationY := val(stmp$);
	Profile(key$, "FixationColor", "0", stmp$);
	iFixationColor% := val(stmp$);

	FixationColorList$[0]:="red"; 
	FixationColorList$[1]:="green"; 
	FixationColorList$[2]:="blue"; 
	FixationColor$ := FixationColorList$[iFixationColor%];

	Profile(key$, "FixationDiameter", "0.5", stmp$);
	FixationDiameter := val(stmp$);

	' Form the argument for applications. Convenience for passing args. 
	FixationArg$ := " -f " + str$(FixationX) + "," + str$(FixationY) + "," + str$(FixationDiameter) + "," + FixationColor$;
end;

proc SaveFixationPointParameters()
	var key$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\FixationPoint";
	Profile(key$, "WindowRadius", str$(WindowRadius));
	Profile(key$, "FixationX", str$(FixationX));
	Profile(key$, "FixationY", str$(FixationY));
	Profile(key$, "FixationColor", str$(iFixationColor%));
	Profile(key$, "FixationDiameter", str$(FixationDiameter));
end;


func FixationPointDialog%()

	var i%;
	GetFixationPointParameters();
	DlgCreate("Fixation parameters: " + GetCurrentConfiguration$(), 25, 10);
	DlgReal(1, "Fixation X:", -20, 20);
	DlgReal(2, "Fixation Y:", -20, 20);
	DlgReal(3, "Fixation diam:", .1, 5);
	DlgReal(4, "Window radius:", .1, 10);
	DlgList(5, "Color:", FixationColorList$[]);
	i% := DlgShow(FixationX, FixationY, FixationDiameter, WindowRadius, iFixationColor%);	

	' If user cancelled, reload params
	if i% = 0 then
		GetFixationPointParameters();
	else
		SaveFixationPointParameters();
	endif

	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Fixation Point parameters END
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Rig Daily Totals START
'
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


var TotalTrials%;
var TotalRewards%;
var TotalDate$;


proc GetDailyTotals()
	var key$;
	key$ := "AlertRig\\Daily";
	Profile(key$, "TotalDate", "", TotalDate$);
	Profile(key$, "TotalTrials", 0, TotalTrials%);
	Profile(key$, "TotalRewards", 0, TotalRewards%);

	' Get date string if needed
	if Len(TotalDate$) = 0 then
		TotalDate$ := GetDayString$();
		SaveDailyTotals();
	endif
end;

proc SaveDailyTotals()
	var key$;
	key$ := "AlertRig\\Daily";
	Profile(key$, "TotalDate", TotalDate$);
	Profile(key$, "TotalTrials", TotalTrials%);
	Profile(key$, "TotalRewards", TotalRewards%);
end;

func DailyTotalsDialog%()
	GetDailyTotals();
	DlgCreate("Daily Totals");
	DlgText("Date: " + TotalDate$, 0, 1);
	DlgText("Trials: " + str$(TotalTrials%), 0, 2);
	DlgText("Rewards: " + str$(TotalRewards%), 0, 3);
	DlgButton(2, "Reset", ResetDailyTotals%);
	DlgShow();
	return 1;
end;


func GetDayString$()
	return Date$(2, 1, 3, 2, "-");
end;


func ResetDailyTotals%()
	GetDailyTotals();
	TotalRewards%:=0;
	TotalTrials%:=0;
	TotalDate$:= GetDayString$();
	SaveDailyTotals();
        return 0;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Rig Daily Totals END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Msequence script parameters START
'
'	Vars that control the alert msequence script. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
var msqFixationDuration;			' Time required to maintain fixation, seconds
var msqAcquisitionTime;			' Time allowed to acquire target before fail trial, seconds
var msqInterTrialTime;			' Blank time following a trial (both successful and failed), seconds
var msqDotSize%;					' dot size (pixels)
var msqSegmentLength%;			' Terms in a segment of the msequence
var msqFramesPerTerm%;			' frames that each msequence term is shown

proc GetMSequenceScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\MSequence";

	Profile(key$, "FixationDuration", "1.0", stmp$);
	msqFixationDuration := val(stmp$);

	Profile(key$, "AcquisitionTime", "1.0", stmp$);
	msqAcquisitionTime := val(stmp$);

	Profile(key$, "InterTrialTime", "1.0", stmp$);
	msqInterTrialTime := val(stmp$);

	Profile(key$, "DotSize", 4, msqDotSize%);
	Profile(key$, "SegmentLength", 100, msqSegmentLength%);
	Profile(key$, "FramesPerTerm", 1, msqFramesPerTerm%);
	
end;
 	
proc SaveMSequenceScriptParameters()
	var stmp$;
	var key$;

	key$:="AlertRig\\" + GetCurrentConfiguration$() + "\\Scripts\\MSequence";

	Profile(key$, "FixationDuration", str$(msqFixationDuration));
	Profile(key$, "AcquisitionTime", str$(msqAcquisitionTime));
	Profile(key$, "InterTrialTime", str$(msqInterTrialTime));
	Profile(key$, "DotSize", msqDotSize%);
	Profile(key$, "SegmentLength", msqSegmentLength%);
	Profile(key$, "FramesPerTerm", msqFramesPerTerm%);
end;



func MSequenceScriptDialog%()
	var i%;
	GetMSequenceScriptParameters();
	DlgCreate("MSequence Script Parameters", 25, 10);
	DlgReal(1, "Fixation duration(s):", .01, 10);
	DlgReal(2, "Acquisition time(s):", .01, 10);
	DlgReal(3, "Intertrial time(s):", .01, 10);
	DlgInteger(4, "Dot Size(pixels):", 4, 28);
	DlgInteger(5, "Segment length (terms):", 1, 32767);
	DlgInteger(6, "Frames per term:", 1, 100);
	i%:=DlgShow(msqFixationDuration, msqAcquisitionTime, msqInterTrialTime, msqDotSize%, msqSegmentLength%, msqFramesPerTerm%);
	if i% = 1 then
		PrintLog("Saving params\n");
		SaveMSequenceScriptParameters();
	endif;
	return 1;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' MSequence script END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''










' Window handles and channel numbers
var XChannel%,YChannel%;		' Channel number assigned to eye x and y
var FrameChannel%;
var DotChannel%;				' Channel number assigned to vsg trigger for dot
var StimChannel%;				' Channel number assigned to vsg trigger for stim
var ReadyChannel%;			' channel number for VSG ready pulse signal
var DataWindow%;	' time view
var XYWindow%;		' window with eye pos shown
var iStimChannel%;	' channel number for stimulus in xy window
var iStimWindowChannel%;' channel number for stimulus window in xy window
var iMonitorChannel%;	' channel number for monitor position display in xy window
var StimHandle%;	' handle for stimulus application
' Experimental control
var Pause%:=0;		' When 1, expt is paused - no idle processing done

' Display stuff
var FixWindowX[36],FixWindowY[36];	' points for displaying fixation window in xy view
var windowX[36], windowY[36];
' Stimulus location stuff
var iStimX%[8];
var iStimY%[8];
var iStimIndex%;





' Fetch parameters
GetDailyTotals();
GetDAQParameters();
GetFixationPointParameters();
GetMSequenceScriptParameters();
GetDataParameters();


' Check for valid data file path
if Len(dataDataSet$) = 0 then
	Message("No data set is selected! Edit Data parameters...");
	' Might be nice to open the dialog here....
	halt;
else 
	' Set path for new data files
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
	FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 1, 1);
	SampleAutoName$(dataCellName$ + "_msq_000");
	SampleAutoFile(1);
	PrintLog("dataPathRoot=" + dataPathRoot$ + "\n");
	PrintLog("dataDataSet=" + dataDataSet$ + "\n");
	PrintLog("AutoFile status " + str$(SampleAutoFile()) + "\n");
endif





' Assign channel numbers for eye X,Y and trigger. 
XChannel% := NumberOfElectrodes% + 1;
YChannel% := NumberOfElectrodes% + 2;
FrameChannel% := NumberOfElectrodes% + 3;
DotChannel% := NumberOfElectrodes% + 4;
StimChannel% := NumberOfElectrodes% + 5;
ReadyChannel% := NumberOfElectrodes% + 6;
CreateSampleConfiguration();

' Get display windows ready
InitializeWindows();

' Prepare the toolbar buttons
InitializeToolbar();







const stateStartTrial%		:= 0;
const stateWaitForDot%		:= 1;
const stateWaitForAcquisition%	:= 2;
const stateHoldFixation%	:= 3;
const stateSuccess%		:= 4;
const stateFailure%		:= 5;
const stateStimOff%		:= 6;
const stateWaitForBlank%	:= 7;
const stateCheckTrial%		:= 8;
const stateInterval%		:= 9;
const stateDone%		:= 10;
const stateVSGWait%:=10;		' wait for vsg to send ready signal #1
const stateVSGWaitConfirm%:=11;		' waif for vsg to send ready signal #2
const stateAdvance% :=12;				' Extra state to advance stimulus


var tNow:=0;		' latest time for which there are values recorded. Used in IdleProcessing
var tLast:=-1;		' last time we checked for a trigger. 
var xEye, yEye;		' eye positions
var tLastUpdate:=-1;	' last time view was updated
var iState%:=stateVSGWait%;		' present state
var vTrigger;		' set by NextTime to indicate trigger transition
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 
var tLastTrigger:=-1;	' last trigger time. New triggers have to be greater than this
var tTrigger:=-1;	' temp var for newly discovered trigger times
var nTrialsStarted%:=0;
var nTrialsSuccess%:=0;
var nTrialsFail%:=0;

' vars for keeping track of the msequence. 
var tStartMsqSegment := 0;		' time when msequence segment was started (approx; this is guaranteed to be BEFORE the start of the segment)
var iMsqTriggerCount% := 0;	' running count of triggers during an msequence segment. 
const iMsqLength% := 32767;	' hardcode the msequence length! 

' OK this is to ensure we initialize just once
var iMsqInitializeDone% := 0;

' The next two vars are managed in SegmentManage%
var iMsqSegmentNumber% := 0;	' the segment of the msequence currently running
var iMsqSegmentLength%;			' the length (#frames) of the msequence currently running. Note - this is the same as the segment length, except for the very last segment run!
var iMsqTermsCompleted% := 0;				' running count of msequence terms completed (only counted after complete segments)
var iMsqNumberOfFullSegments% := 0;		' Number of full segments in the msequence. 
var iMsqPartialSegmentLength% := 0;		' If full segments do not complete the msequence, this is the length of the last partial segment

' These are the actions used in calling SegmentManage%
const iInitialize% := 100;
const iCurrentSegmentStart% := 101;
const iCurrentSegmentFail% := 102;
const iCurrentSegmentSuccess% := 103;
const iAdvanceSegmentStart% := 104;


' Run real time analysis here. 
func IdleProcessing%()
	var iStatus% := 1;	' this is return value. value of 1 (0) continues (stops) processing
	tNow := MaxTime();

	xEye := ChanMeasure(XChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltX;
	yEye := ChanMeasure(YChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltY;

	' Don't update display every time....
	if tNow-tLastUpdate > .005 then
		View(XYWindow%).XYAddData(1,xEye,yEye);
		tLastUpdate := tNow;
	endif

	' What state are we in? 
	docase 

	
		case iState% = stateVSGWait% then

			' Initialize msequence counters
			if iMsqInitializeDone% = 0 then
				SegmentManage%(iInitialize%);
				iMsqInitializeDone% := 1;
			endif

			' Waiting for VSG to indicate it is ready. The indication is a pulse (up, then down, 1 frame apart) on port 6.
			tTrigger := NextTime(ReadyChannel%, tLast, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 0 then
				PrintLog("state stateVSGWait: Got leading edge of trigger\n");
				tLastTrigger := tTrigger;
				iState% := stateVSGWaitConfirm%;
			endif;

		case iState% = stateVSGWaitConfirm% then

			' Waiting for VSG to confirm it is ready. The downward side of the pulse is expected...
			tTrigger := NextTime(ReadyChannel%, tLastTrigger, vTrigger);
			if tTrigger > tLastTrigger and vTrigger = 1 then
				PrintLog("state stateVSGWaitConfirm: Got trailing edge of trigger\n");
				tLastTrigger := tTrigger;
				iState% := stateStartTrial%;
			endif;

	
		case iState% = stateStartTrial% then

			' initial state on startup. 
			' DIGOUT to present stimulus
			' Enter state 1

			nTrialsStarted% += 1;
			SampleKey("D");
			iState% := stateWaitForDot%;
			PrintLog("StateStartTrial - dot trigger sent\n");

		case iState% = stateWaitForDot% then
	
			' Waiting for stimulus to be presented by vsg and trigger to return. 
			' NextTime returns a non-negative value whenever there is a TRANSITION. In that case, the 
			' value of 'vTrigger' returned is 1 (0) if the transition is high (low) to low (high). Maybe not
			' intuitive, but that's the way it is. 
			tTrigger := NextTime(DotChannel%,tLast,vTrigger);
			if tTrigger > tLastTrigger then

				if vTrigger = 0 then
		
					' Stimulus has been presented. Display stim location and window. Enter state 2
					DrawStim(1);
					iState% := stateWaitForAcquisition%;
					tStateStart := tNow;

				endif

			endif

		case iState% = stateWaitForAcquisition% then

			if tNow-tStateStart < msqAcquisitionTime then
				
				' Acquisition happens when the eye falls within the fixation window.
				if InFixationWindow%(xEye, yEye) > 0 then

					PrintLog("StateWaitForAcquisition - acquired target. Start stim.\n");


					' Start the current segment. This function call sets vars relating to the segment (number of terms, segment number)
					' and makes a mark in the data file indicating that this segment is starting
					' SegmentManage(iCurrentSegmentStart%);

					SegmentManage%(iCurrentSegmentStart%);
					SampleKey("S");
					iState% := stateHoldFixation%;
					tStateStart := tNow;
					tStartMsqSegment := tNow;
	
				endif

			else

				' Failed. Turn off stim and try again.
				PrintLog("StateWaitForAcquisition - failed.\n");
				SampleKey("d");
				iState% := stateFailure%;
				tStateStart := tNow;

			endif

		case iState% = stateHoldFixation% then

			' If fixation is broken stop the current segment. 
			' SegmentManage(iCurrentSegmentFail%);
			' Otherwise, count the number of frame triggers since tStartMsqSegment. If that count equals
			' the number of terms in the segment, the function call will mark the data file accordingly.
			' SegmentManage(iCurrentSegmentSuccess%);

			if InFixationWindow%(xEye, yEye) <= 0 then

				PrintLog("StateHoldFixation - broke fixation.\n");
				SegmentManage%(iCurrentSegmentFail%);
				SampleKey("s");
				iState% := stateFailure%;
				tStateStart := tNow;

			else

				iMsqTriggerCount% := View(DataWindow%).Count(FrameChannel%, tStartMsqSegment, tNow);
				if iMsqTriggerCount% = iMsqSegmentLength%+1 then
'				if tNow - tStateStart >= msqFixationDuration then

					' Fixation. Reward. New trial.
					PrintLog("StateHoldFixation - success.\n");
					SegmentManage%(iCurrentSegmentSuccess%);
					iState% := stateSuccess%;
					tStateStart := tNow;
'				else
'					PrintLog("c/l=" + str$(iMsqTriggerCount%) + "," + str$(iMsqSegmentLength%) + "\n");
				endif

			endif

		case iState% = stateSuccess% then

			PrintLog("StateSuccess - reward.\n");
			nTrialsSuccess% += 1;
			Reward%();
			iState% := stateAdvance%;

		' djs Split stateSuccess into two states. The reward call takes a finite amount of time. Previously we took the start of the msequence
		' segment to be the 'tNow' from this state. Well, since we're seeing crosstalk on the frame channel, and since the counting of frames
		' uses the tNow as its start point, the crosstalk events are counted as frames. There's no clean way to get around this without 
		' splitting the state in two. Now stateSuccess% is entirely devoted to reward, and stateAdvance% is devoted to advancing the stimulus. 

		case iState% = stateAdvance% then

			' Advance segment. The func will return 0 if the entire msequence is completed. 
			' SegmentManage(iAdvanceSegmentStart%)
			if SegmentManage%(iAdvanceSegmentStart%) = 1 then
			
				tStartMsqSegment := tNow;
				SampleKey("a");
				iState% := stateHoldFixation%;
				tStateStart := tNow;

			else

				' Done with msequence
				iState% := stateDone%;
				Stop%();
				istatus% := 0;

			endif

		case iState% = stateFailure% then

			PrintLog("StateFailure - wait interval starting.\n");
			nTrialsFail% += 1;
			iState% := stateInterval%;
			tStateStart := tNow;

		case iState% = stateInterval% then

			' Inter-trial wait time
			if tNow - tStateStart > msqInterTrialTime then
	
				' Back to state 0
				PrintLog("StateInterval - done, start new trial.\n");
				iState% := stateStartTrial%;
				tStateStart := tNow;
	
			endif

		else 

			' Unknown state!
			Message("Unknown state=" + str$(iState%));
			halt;

	endcase;

	tLast := tNow;
	
	return iStatus%;

end;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' SegmentManage
'
' This function manages the counters associated with the msequences. It also writes text marks in the data file for the start and end
' of each segment, indicating which segment it is and whether (for the end text mark) the segment was successful or not. Note that this
' function does NOT issue the SampleKey calls -- I decided to leave that call in the IdleProcessing function to keep it transparent
' with respect to where the SampleKey's are issued. 
'
' Returns 1 on success, 0 if the msequence is done and cannot advance, or -1 on error. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func SegmentManage%(iAction%)
var iStatus% := 1;
var sToolbarText$;
var sSegText$;
var sLengthText$;
docase

' Initialize. This action should be taken once prior to the start of the msequence. Counters are initialized and msequence parameters are
' written to the data file.
case iAction%=iInitialize% then

	iMsqTermsCompleted% := 0;
	iMsqSegmentLength% := msqSegmentLength%;	' first segment length. 
	iMsqSegmentNumber% := 1;
	iMsqNumberOfFullSegments% := iMsqLength%/msqSegmentLength%;
	iMsqPartialSegmentLength% := iMsqLength% - iMsqNumberOfFullSegments%*msqSegmentLength%;
	PrintLog("SegmentManage Initialize: #full segments=" + str$(iMsqNumberOfFullSegments%) + " partial segment length=" + str$(iMsqPartialSegmentLength%) + "\n");
	sToolbarText$ := str$(iMsqNumberOfFullSegments%) + " full segments of " + str$(msqSegmentLength%) + " terms, ";
	sLengthText$ := "/" + str$(iMsqLength%) + " terms completed.";
	if iMsqPartialSegmentLength% = 0 then
		sToolbarText$ += "no partial segment.";
		sSegText$ := "/" + str$(iMsqNumberOfFullSegments%) + "(+0) ";
	else
		sToolbarText$ += "1 partial segment of " + str$(iMsqPartialSegmentLength%) + " terms.";
		sSegText$ := "/" + str$(iMsqNumberOfFullSegments%) + "(+1) ";
	endif
	SampleText("INIT");

' Start current segment. The current segment counter is not advanced. Counters are initialized to reflect the current segment. Text mark written
' to data file. 
case iAction%=iCurrentSegmentStart% then

	sToolbarText$ := "Segment " + str$(iMsqSegmentNumber%) + sSegText$ + ": " + str$(iMsqTermsCompleted%) + sLengthText$;
	SampleText(str$(iMsqSegmentNumber%) + " A " + str$(iMsqSegmentLength%));

' Current segment failed. Text mark written to data file.
case iAction%=iCurrentSegmentFail% then

	SampleText(str$(iMsqSegmentNumber%) + " F");

' Current segment succeeded. Text mark written (segment is NOT advanced with this action!)
case iAction%=iCurrentSegmentSuccess% then

	iMsqTermsCompleted% += iMsqSegmentLength%;
	SampleText(str$(iMsqSegmentNumber%) + " Z");

' Advance to next segment. Counters re-initialized to reflect new segment (if there is one). Text mark written. If the previous segment was
' the last in the msequence, return 0 to indicate msequence is complete. 
case iAction%=iAdvanceSegmentStart% then

	iMsqSegmentNumber% += 1;
	docase 
	case iMsqSegmentNumber% = iMsqNumberOfFullSegments%+1 then
		if iMsqPartialSegmentLength% = 0 then
			' We're done!
			iStatus% := 0;
			sToolbarText$ := "MSequence completed.";
		else
			iMsqSegmentLength% := iMsqPartialSegmentLength%;
			sToolbarText$ := "Segment " + str$(iMsqSegmentNumber%) + sSegText$ + ": " + str$(iMsqTermsCompleted%) + sLengthText$;
			SampleText(str$(iMsqSegmentNumber%) + " A " + str$(iMsqSegmentLength%));
		endif
	case iMsqSegmentNumber% = iMsqNumberOfFullSegments%+2 then
		' the last segment was partial. Now we're really done.
		iStatus% := 0;
		sToolbarText$ := "MSequence completed.";
	else
		iMsqSegmentLength% := msqSegmentLength%;
		sToolbarText$ := "Segment " + str$(iMsqSegmentNumber%) + sSegText$ + ": " + str$(iMsqTermsCompleted%) + sLengthText$;
		SampleText(str$(iMsqSegmentNumber%) + " A " + str$(iMsqSegmentLength%));
	endcase;


' Unknown action. This is an error. 
else
	PrintLog("SegmentManage ERROR: Unknown action " + str$(iAction%) + "\n");
	iStatus% := -1;
endcase;


ToolbarText(sToolbarText$);
return iStatus%;
end;




' Advance the segment number and update the segment length. All segments except for the last one will have the same length (msqSegmentLength%). 
' Returns 1, unless the entire sequence is completed, in which case it returns 0.

func AdvanceSegment%()
var ireturn% := 1;
var iterms%;
iterms% := iMsqSegmentNumber% * msqSegmentLength%;		' number of terms completed

if iterms% >= iMsqLength% then
	ireturn% := 0;
else
	iMsqSegmentNumber% += 1;
	if iterms% + msqSegmentLength% > iMsqLength% then
		' shoirten segment - last one in msequence
		iMsqSegmentLength% := iMsqLength% - iterms%;
	else
		iMsqSegmentLength% := msqSegmentLength%;
	endif
	ToolbarText("Segment " + str$(iMsqSegmentNumber%) + ", completed " + str$(iterms%) + "/" + str$(iMsqLength%) + " terms.");
endif

return ireturn%;
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
	var index;
	SampleClear(); 'Set standard sampling state
'	SampleAutoFile(0); 'Enable automatic file naming
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit

	' Text mark channel for msequence indicators. The "10" is the max # of characters in a mark.
	SampleTextMark(15);

	'Channel recording definitions
	SampleEvent(FrameChannel%, 0, 0, 3600); 'Trigger channel, level
	SampleComment$(FrameChannel%, "Frame");
	SampleTitle$(FrameChannel%, "Frame");
	
	SampleEvent(DotChannel%, 1, 2, 3600); 'Trigger channel, level
	SampleComment$(DotChannel%, "Dot");
	SampleTitle$(DotChannel%, "Dot");

	SampleEvent(StimChannel%, 2, 2, 3600); 'Trigger channel, level
	SampleComment$(StimChannel%, "Stim");
	SampleTitle$(StimChannel%, "Stim");

	' channel to look for ready signal from vsg
	SampleEvent(ReadyChannel%,6,2,3600); 'Trigger channel, level
	SampleComment$(ReadyChannel%,"VSG Ready");
	SampleTitle$(ReadyChannel%,"VSG Ready");


	for index := 1 to NumberOfElectrodes% do
		SampleWaveMark(index,index-1,2000,34,15,28000); ' chan, port, event rate, points, pre-trigger, rate
		SampleTitle$(index, "Electrode_"+Str$(index)); 
	next

	'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
	SampleWaveform(XChannel%, 14, 1000);
	SampleTitle$(XChannel%,"Eye X");
	SampleWaveform(YChannel%, 15, 1000);
	SampleTitle$(YChannel%, "Eye Y");

	SampleSequencer(script$ + "AlertMSequence.pls");
	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DrawStim
' 
' Draws stimulus in xy window (iDraw%==1) or blanks it (0). 
proc DrawStim(iDraw%)

	if iDraw% > 0 then
'		var xstim:=0, ystim:=0;
'		xstim := GetStimX();
'		ystim := GetStimY();

		' Draw stimulus in xy window
		View(XYWindow%).XYAddData(iStimChannel%, FixationX, FixationY);
	
		' draw fixation window
		ArrConst(windowX[], FixWindowX[]);
		ArrAdd(windowX[], FixationX);
		ArrConst(windowY[], FixWindowY[]);
		ArrAdd(windowY[], FixationY);

		View(XYWindow%).XYAddData(iStimWindowChannel%, windowX[], windowY[]);		
	else 
		' erase the stim and the window from xy view
		View(XYWindow%).XYDelete(iStimChannel%);
		View(XYWindow%).XYDelete(iStimWindowChannel%);
	endif

end;


proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(-0.235849,52.746,97.2484,99.8856);
	View(DataWindow%).WindowVisible(1);

	'Open an XY view to display eye position
	XYWindow% := FileNew(12);
	XRange(-30,30);
	YRange(-2,-30,30);
	XYDrawMode(0,5,0);
	WindowVisible(1);
	Window(-0.550314,0.114416,41.5094,52.746);
	XYColour(1,16);
	XYSize(1,-1);

	'Calcuate the fixation window
	var index%;
	var twopi;
	twopi := 2.0*4.0*ATan(1.0);
	
	for index% := 0 to 35 do
		FixWindowX[index%] := WindowRadius * Cos(index% * twopi/36.0);
		FixWindowY[index%] := WindowRadius * Sin(index% * twopi/36.0);
	next;

	'Create a new channel in the XY view to display the fixation window
	iStimWindowChannel% := XYSetChan(0);
	XYColour(2,13);
	XYDrawMode(2,2,1);
	XYJoin(2,1);

	'Draw the fixation window ON SECOND THOUGHT, DON'T
	'XYAddData(2, FixWindowX[], FixWindowY[]);	

	'Create a new channel in the XY view to display the fixation point
	iStimChannel% := XYSetChan(0);

	'Create a new channel in the XY view to show the monitor's location
	iMonitorChannel% := XYSetChan(0);
	XYColour(4,13);
	XYDrawMode(4,3,1);
	XYJoin(4,2);
	XYAddData(4,-9,-7);
	XYAddData(4,9,-7);
	XYAddData(4,9,7);
	XYAddData(4,-9,7);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(1,"Sample start",Start%);
	ToolbarSet(2,"Sample stop", Stop%);
	ToolbarSet(3,"Juice",Reward%);
	ToolbarSet(4,"Quit",Quit%);
	ToolbarEnable(2,0);
	ToolbarEnable(4,0);
	Toolbar("Go", 0x3ff);

end;


' Get grating p[arameters from registry AlertRig\\(config)\\Gratings\\type$
func GetGratingParameters$(type$)
	var key$;
	var stmp$;
	key$ := "AlertRig\\" + GetCurrentConfiguration$() + "\\Gratings";
	Profile(key$, type$, "", stmp$);
	return stmp$;
end;


' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
	var CommandLine$;
	var FixationPoint$;
	var Extras$;
	var Distractors$:="";
	var gr$;
	var x, y, w, h;
	var i%;
	
	SampleStart(0); 'Start sampling
	SampleKey("0");	' clear trigger lines 
	GetMSequenceScriptParameters();

'	Get the grating stimulus parameters and skim off the xy position
	gr$ := GetGratingParameters$("Stimulus");
	if gr$ <> "" then
		ReadSetup("", "", "", "", ",");
		i% := ReadStr(gr$, x, y, w, h);
		if (i% <> 4) then
			Message("Cannot get stimulus settings from registry!");
			return 1;
		endif
	endif
	CommandLine$ := "cmd /k " + bin$ + "\\dalertmseq -m c:\\work\\acuterig\\msequenceterms";
	CommandLine$ += " -p " + str$(x) + "," + str$(y) + " -d " + str$(msqDotSize%) + " -l " + str$(msqSegmentLength%) + " -t " + str$(msqFramesPerTerm%) + " -D " + DistanceToScreenMM$ + " " + FixationArg$;

	'Begin the stimulus program. It will take a few seconds for the VSG to initialize.
	PrintLog(CommandLine$+"\n");
	StimHandle% := ProgRun(CommandLine$,1);
	if StimHandle% <0 then Message("Could not start stimulus."); halt; endif
'	Yield(5);	'Wait a few seconds to make sure the VSG has time to initialize.

	ToolbarSet(0,"",IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);
	ToolbarEnable(1,0);
	ToolbarEnable(4,1);

	View(DataWindow%);
	Yield(.1);
	return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()

	' Disable idle process func
	ToolbarSet(0,"");

	' Tell stim app to shut down
	SampleKey("q");
	Yield(.1);
	SampleStop();
	ProgKill(StimHandle%);
	while ProgStatus(StimHandle%) > 0 do
		Yield();
	wend
	ProgRun(bin$ + "\\ClearTrigger",0);

end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func InFixationWindow%(EyePosX,EyePosY)
	var i% := 0;
'	var xstim:=0, ystim:=0;
'	xstim := GetStimX();
'	ystim := GetStimY();
	'Determine if the eye position is within the fixation window
	if (Pow(EyePosX-FixationX, 2) + Pow(EyePosY-FixationY, 2)) <= Pow(WindowRadius,2) then 
		i% := 1;
	endif
	return i%;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
	var i;
	for i:=1 to JuicePerReward% do Yield(.05); SampleKey("J"); next
	Yield(.05);
	return 1;
end;







