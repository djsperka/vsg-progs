' $Id: KrubTuning.s2s,v 1.14 2015/05/13 22:07:03 devel Exp $
'
'

' Variables for cooling, pump control, etc.
'Will be used in KrubTuningDialogs, so they have to be set above
var ok%, status%;
var speedinput;
var tempval%, amp;                                         
var PumpStatus%, pumpspeed1:=16, timeslope:=0.25, dtfactor:=0.04, lnfactor:=400;
var FCStatus%,CT1:=26.6,T1Perc:=75,CT2:=26,T2Perc:=50,CT3:=25,T3Perc:=25,KillTemp:=24;
var FCStatus2%,CT12:=26.6,T1Perc2:=75,CT22:=26,T2Perc2:=50,CT32:=25,T3Perc2:=25,KillTemp2:=24;
var tempdif, max%, inflow, inflow2;
var dt[5], dt1[5], dtmean, dt1mean;
var t1[10], t2[10], mean1, mean2, slope, maxspeed:=20;
var x:=1, y:=1;
var TargetTemperature;
var CursorNum%;

#include "KrubTuningDialogs.s2s"
#include "KrubRigParameters.s2s"
#include "KrubGratings.s2s"
#include "../../Spike2Util/UsreyUtil.s2s"
#include "../../Spike2Util/FileUtilities.s2s"
#include "../../Spike2Util/MiscUtilities.s2s"
#include "../../Spike2Util/ChannelUtilities.s2s"

' tuning type-specific values
var tunFileLabel$ := "zzz";

' tuning daq parameters
var tunNChannels% := 1;  'currently this can't be changed.  Setting to 1 to get a data channel
var tunColorIndex%;
var tunColor$[4];

' daq channels for triggers from vsg
'note that channels 1-5 are reserved for spiking channels and 6-10 are reserved for waveform channels even though
'current code is hard coded for only one channel
const tunChanTrigger% := 11;
const tunChanVSGReady% := 12;
const tunChanPump% := 13;
const tunChanCoolingChip% := 14;
const tunChanFreezeControl1% := 15;
const tunChanFreezeControl2% := 16;  'for now, we'll assume that there will be a max of two FC channels, also maxed out at 2 in main dialog


' prog handles
var tunHandleStim := -1;

' window handles
var tunWindowData%;
var tunResultXYWindow%[50];  'there won't be 50 channels

' data holders
var tunTotalSpikeCount[50][100];  'Let's assume a max of 50 channels and 100 timepoints, can't be integer due to later math
var tunTotalSeconds[50][100];
var tunBlankTotalSpikeCount[50];  'And another for the blank periods
var tunBlankSeconds[50];

' folder for stim files
var tunStimFolder$;





' Initializations

tunBGColor$[0] := "gray";
tunBGColor$[1] := "black";
tunBGColor$[2] := "white";

tunColor$[0] := "Black and white";
tunColor$[1] := "S cone isolating";
tunColor$[2] := "M cone isolating";
tunColor$[3] := "L cone isolating";

tunGratingParams$ := GetGratingParameters$("Stimulus");
tunStimFolder$ := GetDataPathRoot$() + "\\stim";

' TODO: Resize window?
'View(App(0)).Window(0,0,75,95);




'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Script starts here

' Initialize logging
LogInit(1);


' Get experimental parameters. 
' tunFileLabel$ is set here! 
if KrubTuningDialog%() = 0 then
    halt;
endif

if tuntypeSelected% = tuntypeNone% and OnlyRecordDuringStimulus% = 1 then
    Message("No tuning type selected!");
    halt;
endif

' Sampling config
CreateSampleConfiguration();

' Prepare display windows, input channels, etc. 
InitializeWindows();

' If cooling, load cooling variables from registry before we start sampling
' this allows us to use the dialogs before sampling starts, they are also available after
if DoCooling% = 1 then
    GetKrubCoolingParameters();
endif;

	
ToolbarSet(1,"Quit",Quit%);
ToolbarSet(2,"Sample start",Start%);
ToolbarSet(3,"Sample stop", Stop%);
if DoCooling% = 1 then
    ToolbarSet(4,"Move Hcursor",MoveCursor%);
    ToolbarEnable(4,0);  'Do not allow move Hcursor until sampling has started
    ToolbarSet(5,"Auto Pump Settings",AutoPump%);
    ToolbarSet(6,"Manual Pump Speed",ManualPump%);
    if NFreezeControls% > 0 then
        ToolbarSet(7,"Freeze Control 1",FC1%);
    endif;
    if NFreezeControls% > 1 then
        ToolbarSet(8,"Freeze Control 2",FC2%);
    endif;
    ToolbarEnable(6,PumpStatus%);  'This will disable the manual pump speed if automatic pump speed is set
endif;
ToolbarEnable(3,0);
Toolbar("Go",1023);

' Oh no! Make sure sampling has stopped!
if SampleStatus() <> -1 then
    LogWarn("KrubTuning", "Toolbar exited and sampling status is " + str$(SampleStatus()) + ". Stopping sampling...");
    SampleStop();
    LogWarn("KrubTuning", "Sampling stopped.");
endif


proc CreateSampleConfiguration()
    
    var i%;
    var xy%;
    
	SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit
    
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 3);
    FilePathSet(GetDataPathRoot$() + "\\" + GetDataSetName$(), 1);
    SampleAutoName$(dataCellName$ + "_" + tunFileLabel$ + "_000");
	SampleAutoFile(1);
    
    SampleUsPerTime(10);
    SampleTimePerADC(1);

    if tunNChannels% > 1 and DoCooling% = 1 then
        message("Cooling and multiple electrodes do not play nicely - see Log File!");
        printlog("This script was set up such that previous ADC Port assignments for the cooling chip hardware were not changed.\n");
        printlog("However, this interferes with the port selections for multiple electrodes.  If you want to use multiple electrodes\n");
        printlog("and the cooling chip, you will have to change the ADC port assignment for the cooling chip.  This will obviously\n");
        printlog("eliminate the ability to have both the cooling setup and the regular setup plugged in at the same time!\n");
        printlog("Change port assignments in KrubTuning, function CreateSampleConfiguration\n");
        quit%();
    endif;
    
    
    'Channel recording definitions

    for i% := 1 to tunNChannels% do
        SampleWaveMark(i%, i%-1, 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
        SampleTitle$(i%, "Spike " + Str$(i%-1));
    next

    for i% := 1 to tunNChannels% do
        SampleWaveform(i%+5, i%-1, 28000); ' chan, port, event rate, points, pre-trigger, rate
        SampleTitle$(i%+5, "WF " + Str$(i%-1));
    next

    SampleEvent(tunChanTrigger%, 1, 2, 1000); 
    SampleTitle$(tunChanTrigger%, "Terms");

    'Make textmark channel for easier data extraction
    SampleTextMark(200);  'Channel 30 is textmark channel 
    
    'if we are cooling, we have to create some additional channels
    if DoCooling% = 1 then
        'Pump channel
        SampleWaveform(tunChanPump%,1,100);
        SampleTitle$(tunChanPump%, "Pump");
        SampleComment$(tunChanPump%, "PumpSpeed");
        SampleCalibrate(tunChanPump%, "RPM", 10, 0);  'scale 10, offset 0 is how it is set in original sampling configuration
        
        
        'Cooling Chip channel
        SampleWaveform(tunChanCoolingChip%,2,100);
        SampleTitle$(tunChanCoolingChip%, "SC_Chip");
        SampleCalibrate(tunChanCoolingChip%, "C", 10, 0);  'scale 10, offset 0 is how it is set in original sampling configuration
        
        
        if NFreezeControls% > 0 then
            'Freeze Control channel 1
            SampleWaveform(tunChanFreezeControl1%,3,100);
            SampleTitle$(tunChanFreezeControl1%, "FC1");
            SampleCalibrate(tunChanFreezeControl1%, "C", 10, 0);  'scale 10, offset 0 is how it is set in original sampling configuration
        endif;
        
        if NFreezeControls% > 1 then
            'Freeze Control channel 2
            SampleWaveform(tunChanFreezeControl2%,4,100);
            SampleTitle$(tunChanFreezeControl2%, "FC2");
            SampleCalibrate(tunChanFreezeControl2%, "C", 10, 0);  'scale 10, offset 0 is how it is set in original sampling configuration
        endif;
        
       ' There is only a sequencer script in use if doing cooling
       SampleSequencer("C:\\Documents and Settings\\Krubitzer Lab\\Desktop\\Mary\\SC Cooling Seq_MB1.pls");  'must get absolute location...
        
    endif;
    

    SampleOptimise(2, 2, 7, 2, 50);  'Set optimise mode (do this last)
    SampleMode(1); 'Continuous sampling
    
end;


proc InitializeWindows()
    var i%;
    var AutoCorr%;
    var tempTitle$;
    
	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
    
    tunWindowData% := FileNew(0,4);
    View(tunWindowData%).WindowVisible(1);
    View(tunWindowData%).Window(0,33,100,100);
    
'    ' Create results plot for each channel
'    for i% := 1 to tunNChannels% do
'        ' open xy window to display tuning results
'        tunResultXYWindow%[i%] := FileNew(12);
'        ' position in upper-right quadrant of screen
'        Window(50, 0, 100, 50);  'adjust this?
'        ' first channel is signal. specify color etc
'        XYDrawMode(0,5,1);  '0 ignored, set automtic axis range mode, axes set to update with new data
'        XYSort(1,1);  'sort by x-value
'        XYJoin(1,1);  'Join, do not connect first to last
'    '    WindowVisible(1);  
'        XYColour(1,16); ' I have no idea what color 16 is
'        ChanTitle$(1, "Signal");  'Sets title of channel 1
'        XYSetChan(0); ' create second channel. The first channel is automatically created with the FileNew(12) call.
'        XYColour(2,12); ' no idea what color 12 is either
'        ChanTitle$(2, "Bkgd");  'Sets title of channel 2
'        'Create labels
'        ChanTitle$(0, "Spikes/s");  ' y axis label
'        TuningCurveLabels(tuntypeSelected%);
'        tempTitle$ := WindowTitle$();
'        WindowTitle$(tempTitle$ + ", Electrode " + Str$(i%));
'        WindowVisible(1);  'XY plot starts out invisible, make it visible
'    next;
    
    SaveParameterFile();
end

proc SaveParameterFile()
    var handle;
    var filename$;
    
    filename$ := ReplaceFileExtension$(-1, "par");
    handle := FileOpen(filename$, 8, 1);
    if handle <0 then 
        Message("Could not create parameter file " + filename$);
    else
        LogInfo("TODO : Writing parameters to file " + filename$);
        FileClose();
    endif
    
    return;
end


' Make window title and axis labels for tuning curves.
' ttype% is the tuning type
' It is assumed that the xy window is the current view. 
proc TuningCurveLabels(ttype%)
    
    var minValue;
    var maxValue;
    
    minValue := tunParameterValues[min(tunParameterValues)];
    maxValue := tunParameterValues[max(tunParameterValues)];
    
	docase 
		case ttype% = tuntypeDom% then

			WindowTitle$("Contrast Tuning");
            XUnits$("Contrast (%)");
            XRange(minValue, maxValue);
			'XRange(tunContrastMinContrast, tunContrastMaxContrast);

		case ttype% = tuntypeOri% then

			WindowTitle$("Orientation Tuning");
            XUnits$("Orientation (degrees)");
            XRange(minValue, maxValue);
			'XRange(tunOriMinOrientation, tunOriMaxOrientation);

		case ttype% = tuntypeSF% then

			WindowTitle$("Spatial Frequency Tuning");
			XUnits$("Spatial Frequency");
            XRange(minValue, maxValue);
            'XRange(tunSpatialMinSF, tunSpatialMaxSF);
	
		case ttype% = tuntypeTF% then

			WindowTitle$("Temporal Frequency Tuning");
            XUnits$("Temporal Frequency");
            XRange(minValue, maxValue);
			'XRange(tunTemporalMinTF, tunTemporalMaxTF);

		case ttype% = tuntypeArea% then

			WindowTitle$("Aperture Area Tuning");
            XUnits$("Aperture Diameter");
            XRange(minValue, maxValue);
			'XRange(tunAreaMinDiam, tunAreaMaxDiam);
        
		else

			Message("TuningCurveLabels Error - unknown value for tuntypeSelected%: " + Str$(ttype%));

	endcase;

end;

' Quit is used to exit the script entirely. 
' If there are any VSG apps running they should be stopped now. 
' All VSG apps should be triggered off if possible - that allows for clean
' handling of the lock. 
' Could check if app is running, display error message. 

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Quit%()
'   TODO: Check for running vsg app.
    return 0;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' Start is used to start sampling and launch the visual stim. 
' Start must take things from post-dialog (i.e. all parameters can 
' be assumed to be expt-ready, but live, daq-related values (updated in Idle%() ) - tStateStart, 
' iState%, etc.) have only been initialized, not used.
' Start should start sampling, initiate the idle function, 
' THEN launch the visual stim script. The order is important so that the "ready" triggers from the 
' stim will be picked up.

func Start%()

    
    ' Start sampling
    SampleStart(0);
    View(tunWindowData%);  
    
    ' If cooling, set up a Horizontal Cursor on the cooling chip channel 
    ' and change the YRange of the temperature channels
    if DoCooling% = 1 then
        CursorNum% := HCursorNew(tunChanCoolingChip%,TargetTemperature);
        ToolbarEnable(4,1);  'and allow us to move the cursor
    
        YRange(tunChanPump%,0,100);  'Set Y range on pump speed channel
        YRange(tunChanCoolingChip%,15,35);  'Set Y range, in degrees C, on cooling chip channel
        if NFreezeControls% > 0 then
            YRange(tunChanFreezeControl1%,15,35); 'Set Y range, in degrees C, on FC1 channel
        endif;
        if NFreezeControls% > 1 then
            YRange(tunChanFreezeControl2%,15,35); 'Set Y range, in degrees C, on FC2 channel
        endif;
    endif
    
    if OnlyRecordDuringStimulus% = 1 then 'this is the original mode, where we start the stimulus immediately now that sampling has started
    
        ' Set idle here - before vsg launches so we cannot miss the ready signal. 
        ToolbarEnable(3,1); ' stop
        ToolbarEnable(2,0); ' start
        ToolbarEnable(1,0); ' quit
        ToolbarSet(0, "", Idle%);
        
        WriteStimFileToStartPresentation();
        
    else 'change toolbar "start" to allow us to select a tuning curve, recording is already started
        
        ToolbarSet(2,"Select Stimuli",KrubTuningDialog2%);
        
        ' Set idle here - before vsg launches so we cannot miss the ready signal. 
        ToolbarEnable(3,1); ' stop recording
        ToolbarEnable(2,1); ' select stimuli
        ToolbarEnable(1,0); ' quit
        ToolbarSet(0, "", Idle%);
        
    endif;
    
    
    
    return 1;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


' Stop must stop applications and sampling nicely. Adjust toolbar to wait for "quit", stop Idle%(). 
' Generate quit file for the visual stim application. 

func Stop%()

    SampleKey("H");  'stop the pump!!!!
    yield(3);

    ' remove the idle process. 
    ToolbarSet(0, "");
    ToolbarEnable(1, 1);
    ToolbarEnable(3, 0);
    
    ' send the quit command before stopping sampling
    FileOpen(tunStimFolder$ + "\\abort.txt", 8, 1);
    FileClose();
    
    '   TODO 
    ' Generate a "stop" command file for matlab/psychtbx script
    
    SampleStop();

    return 1;
end; 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var tNow;               ' Set on entering this func. For this invocation it is the latest time sampled. 
var tLast;              ' This is tNow from the last time Idle%() was called. 
var tStateStart := -1;  ' Start time of current state
var tStimStart := -1;   ' Time of stim ON trig
var tBlankStart := -1;  ' Time of blankON trig
var tBlankEnd := -1;    ' time of blankOFF trig
var iStimCounter% := 0;
var iBlankCounter% := 0;
var tTrigger := -1;
var vTrigger;
var tLastTrigger := -1;
var tPulseWindowStart := -1;
var tPulseUp := -1;
var tPulseDn := -1;
const tReadyPulseTimeout := 15;


' states
const stateStartup%             :=  1;
const stateWaitForReadyPulse1%  :=  2;
const stateWaitForReadyPulse2%  :=  3;
const stateStartTuning%         :=  4;
const stateNoStim%              :=  5;
const stateStimON%              :=  6;
const stateBlankON%             :=  7;
const stateDone%                := 99;
var iState% := stateStartup%;              ' This holds the current state
var iDummy% := 0;

func Idle%()
    var status% := 1;
    var i%;
    var i;
    var throttle%;
    var throttle2%;
    
    
    View(tunWindowData%);
	tNow := MaxTime();
    
    'First check to see if we are cooling, if so, adjust pump as required
    if DoCooling% = 1 then
        if NFreezeControls% > 0 then
            inflow:=ChanValue(tunChanFreezeControl1%,Maxtime(tunChanFreezeControl1%));  'JJ - this is the instantaneous value on thermocouple 1
        endif;
        if NFreezeControls% > 1 then
            inflow2:=ChanValue(tunChanFreezeControl2%,Maxtime(tunChanFreezeControl2%));  'JJ - this is the instantaneous value on thermocouple 2
        endif;
        tempval%:=ChanValue(tunChanCoolingChip%, MaxTime(tunChanCoolingChip%));       'Gives tempval% the value of cooling chip at current time
        tempdif:=ChanValue(tunChanCoolingChip%, maxTime(tunChanCoolingChip%))-Hcursor(CursorNum%);  'Gets difference of current value and cursor
        
        'Calculate long-term slope
        for i% := 0 to 4 do
        dt[i%]:=Chanvalue(tunChanCoolingChip%, maxTime(tunChanCoolingChip%)-i%) - Hcursor(CursorNum%); 
        dt1[i%]:=Chanvalue(tunChanCoolingChip%, maxTime(tunChanCoolingChip%)-(i%+5)) - Hcursor(CursorNum%);
        next;
        ArrSum(dt[], dtmean);  'JJ - mean value of cooling chip channel over past 4 seconds, referenced to the cursor
        ArrSum(dt1[], dt1mean); 'JJ - mean value of cooling chip channel over 5-9 seconds ago, referenced to the cursor
        
        'JJ - throttle pump if freezing at thermocouple 1
        if NFreezeControls% > 0 and FCStatus%=0 then 'JJ - if freeze control 1 is on
            docase
            case CT2<inflow and inflow<CT1 then 
                throttle%:=maxspeed*(T1Perc/100); 'JJ - if temp drops below critical1, throttle max speed to 75%
                'samplekey("P"); 
                SampleText("Temperature on thermocouple 1 is below " + Str$(CT1) + ", throttling to " + Str$(T1Perc) + " percent");
            case CT3<inflow and inflow<CT2 then 
                throttle%:=maxspeed*(T2Perc/100); 'JJ - if temp drops below critical2, throttle max speed to 50%
                SampleText("Temperature on thermocouple 1 is below " + Str$(CT2) + ", throttling to " + Str$(T2Perc) + " percent");
                'samplekey("P");  
            case KillTemp<inflow and inflow<CT3 then 
                throttle%:=maxspeed*(T3Perc/100); 'JJ - if temp drops below critical3, throttle max speed to 25%
                SampleText("Temperature on thermocouple 1 is below " + Str$(CT3) + ", throttling to " + Str$(T3Perc) + " percent");
                'samplekey("P");  
            case inflow<KillTemp then 
                throttle%:=0;  'JJ - if temp drops below killtemp, throttle max speed to 0, turning off pump
                SampleText("Temperature on thermocouple 1 is below " + Str$(KillTemp) + ", killing pump");
            else 
                throttle%:=maxspeed;
            endcase;
        else 
            throttle%:=maxspeed;
        endif        
        
        
        'JJ - throttle pump if freezing at thermocouple 2
        if NFreezeControls% > 1 and FCStatus2%=0 then 'JJ - if freeze control 2 is on
            docase
            case CT2<inflow2 and inflow2<CT1 then 
                throttle2%:=maxspeed*(T1Perc2/100); 'JJ - if temp drops below critical1, throttle max speed to 75%
                'samplekey("P"); 
                SampleText("Temperature on thermocouple 2 is below " + Str$(CT12) + ", throttling to " + Str$(T1Perc2) + " percent");
            case CT32<inflow2 and inflow2<CT22 then 
                throttle2%:=maxspeed*(T2Perc2/100); 'JJ - if temp drops below critical2, throttle max speed to 50%
                SampleText("Temperature on thermocouple 2 is below " + Str$(CT22) + ", throttling to " + Str$(T2Perc2) + " percent");
                'samplekey("P");  
            case KillTemp2<inflow2 and inflow2<CT32 then 
                throttle2%:=maxspeed*(T3Perc2/100); 'JJ - if temp drops below critical3, throttle max speed to 25%
                SampleText("Temperature on thermocouple 2 is below " + Str$(CT32) + ", throttling to " + Str$(T3Perc2) + " percent");
                'samplekey("P");  
            case inflow2<KillTemp2 then 
                throttle2%:=0;  'JJ - if temp drops below killtemp, throttle max speed to 0, turning off pump
                SampleText("Temperature on thermocouple 2 is below " + Str$(KillTemp2) + ", killing pump");
            else 
                throttle2%:=maxspeed;
            endcase;
        else 
            throttle2%:=maxspeed;
        endif 
        
        'Set maxmimum pump speed based of freeze control
        max% := Min(throttle%,throttle2%);
        
        'calculate short-term slope, determine pump speed (relative to max) based on current chip temperature
        if PumpStatus%=0 then  'JJ - if PumpStatus% is 0 then pump is ON
            for i% := 0 to 9 do
                i := i%;  'For non-integer calculations
                t1[i%]:=ChanValue(tunChanCoolingChip%,MaxTime(tunChanCoolingChip%)-(0.1*i));  
                t2[i%]:=ChanValue(tunChanCoolingChip%,MaxTime(tunChanCoolingChip%)-(1+(0.1*i)));
            next;
            ArrSum(t1[], mean1); 'JJ - mean value of cooling chip channel over past 0.9 seconds
            ArrSum(t2[], mean2); 'JJ - mean value of cooling chip channel over 1.0-1.9 seconds ago
            slope:=(mean1-mean2)/1;  'JJ - slope in (degrees)/sec, or close to it, since it's really 0.9 seconds but whatevs
            
            if tempdif<1 then  'JJ - if the cortex is NOT more than one degree warmer than the cursor
                x:=slope*timeslope;  'JJ - value is in degrees, estimates number of degrees of change on pump over last TIMESLOPE seconds
                y:=(ChanValue(6,MaxTime(6))+x)/Hcursor(1); 'JJ - calculates estimated temperature TIMESLOPE seconds in the future, divides by desired temperature
                
                'JJ - The following statement changes the pump speed, but only if 1) the temperature is off target and 2) the temperature is not changing
                if dtmean>dt1mean-0.01 then  'JJ - if long-term trend is warming or only very slightly cooling
                    if dtmean<dt1mean+0.01 then  'JJ - if long term trend is also cooling or only very slightly warming
                        'ergo, if temperature is very stable
                        if abs(dtmean)<0.1 then  'JJ - do nothing if temperature is within 0.1 C of target
                        else  
                            pumpspeed1:=pumpspeed1+(dtmean*dtfactor); 'JJ - pumpspeed is only changed here if the long term temperature is NOT changing and the chip is more than a tenth of a degree off target
                            SampleText("changing")
                        endif
                        
                    endif
                endif
                
                amp:=pumpspeed1+(ln(y)*lnfactor);
            else 'JJ - if the cortex is more than one degree warmer than the cursor, max out the pump, where max value is based on temperature of freeze-controlled cortex
                amp:=max%;
            endif
            
        endif;
        
        if amp>max% then  'JJ - cap amplitude at max - user settable to up to 95, may be throttled by thermocouple in other areas being too cold
            amp:=max%;    '     amplitude is taken from max when temperature is "far and too hot" 
        endif
        if pumpspeed1>95 then  'JJ - cap pumpspeed at hardcode maxspeed (again 95), amplitude taken from pumpspeed when temperature is "close (or too cold)"
            pumpspeed1:=95;
        endif
        if pumpspeed1<1 then  'JJ - floor pumpspeed
            pumpspeed1:=1;
        endif
        if amp<0 then  'JJ - floor amplitude at 0
            amp:=0;
        endif
        
        SampleSeqVar(1,Amp*327.68);               'Send DAC scaled value to sequencer 
        
    endif;
    
    
    
    
    docase 
    case iState% = stateStartup% then
        
        LogStatus("stateStartup", "Starting up.");
        ChangeStateTo(stateWaitForReadyPulse1%, tNow);
        
    case iState% = stateWaitForReadyPulse1% then
        
        ' Check for pulse, then for timeout
        
        docase 
        case FindPulseDown%(tunChanTrigger%, tStateStart, tPulseDn, tPulseUp) = 1 then
            ChangeStateTo(stateWaitForReadyPulse2%, tPulseUp);   ' start time in new state will be up time of first pulse
        case tNow-tStateStart > tReadyPulseTimeout and OnlyRecordDuringStimulus% = 1 then
            Message("Did not see first ready pulse from vis stim application. Check that it is running, and that the trigger device is ready.");
            ChangeStateTo(stateDone%, tNow);
        endcase
        
    case iState% = stateWaitForReadyPulse2% then
        
        ' Check for pulse, then for timeout
        docase 
        case FindPulseDown%(tunChanTrigger%, tStateStart, tPulseDn, tPulseUp) = 1 then
            ChangeStateTo(stateStartTuning%, tPulseUp);
        case tNow-tStateStart > tReadyPulseTimeout then
            Message("Did not see second ready pulse from vis stim application. Check that it is running, and that the trigger device is ready.");
            ChangeStateTo(stateDone%, tNow);
        endcase
        
    case iState% = stateStartTuning% then
        
        ' Issue sample key to start stim, then switch to looking for triggers
        LogStatus("stateStartTuning", "Ready for stim triggers.");
        'Yield(1.0);
        'SampleKey("s");
        ChangeStateTo(stateNoStim%, tNow);
        
    case iState% = stateNoStim% then
        
        ' Waiting for the first trig - which indicates the stim is on
        if FindPulseDown%(tunChanTrigger%, tStateStart, tStimStart, tPulseUp) = 1 then
            ChangeStateTo(stateNoStim%, tPulseUp);
            LogStatus("NoStim", "Pulse at " + str$(tPulseUp));
        ChangeStateTo(stateStimON%, tStimStart);
        SampleText("STIMON " + Str$(iStimCounter%+1),tStimStart); 'Record start time, which stimulus#
        endif
        
    case iState% = stateStimON% then
        
        ' Waiting for the second trig - which indicates the stim is off
        if FindPulseDown%(tunChanTrigger%, tStateStart, tBlankStart, tPulseUp) = 1 then
 '       if FindEvent%(tunChanTrigger%, tStimStart, tBlankStart) > 0 then
            ' TODO process spikes
            LogInfo("TODO: Process spikes for STIM " + str$(iStimCounter%) + " " + str$(tStimStart) + "-" + str$(tBlankStart) + " " + str$(tunParameterValues[tunParameterIndices%[iStimCounter%]]) + "\n");
            ' Plot data for this epoch, each channel
            for i% := 1 to tunNChannels% do
                tunTotalSpikeCount[i%][tunParameterIndices%[iStimCounter%]] := tunTotalSpikeCount[i%][tunParameterIndices%[iStimCounter%]]+View(tunWindowData%).Count(i%, tStimStart, tBlankStart);
                tunTotalSeconds[i%][tunParameterIndices%[iStimCounter%]] := tunTotalSeconds[i%][tunParameterIndices%[iStimCounter%]]+tBlankStart-tStimStart;
                'printlog("Total count is %d and total time is %f for a rate of %f\n",tunTotalSpikeCount[i%][tunParameterIndices%[iStimCounter%]],
                '         tunTotalSeconds[i%][tunParameterIndices%[iStimCounter%]],tunTotalSpikeCount[i%][tunParameterIndices%[iStimCounter%]]/tunTotalSeconds[i%][tunParameterIndices%[iStimCounter%]]);
                'printlog("Stim count is %d and index is %d and value is %f\n",iStimCounter%,tunParameterIndices%[iStimCounter%],tunParameterValues[tunParameterIndices%[iStimCounter%]]);
                if iStimCounter% > tunNSteps% then
                    View(tunResultXYWindow%[i%]).XYDelete(1,tunParameterIndices%[iStimCounter%],tunParameterIndices%[iStimCounter%]);
                    'View(tunResultXYWindow%[i%]).XYDelete(1,0,0);
                endif;
                View(tunResultXYWindow%[i%]).XYAddData(1,tunParameterValues[tunParameterIndices%[iStimCounter%]],tunTotalSpikeCount[i%][tunParameterIndices%[iStimCounter%]]/tunTotalSeconds[i%][tunParameterIndices%[iStimCounter%]]);
            next;
            ChangeStateTo(stateBlankON%, tBlankStart);
            SampleText("STIMOFF " + Str$(iStimCounter%+1),tBlankStart); 'Record off time, which stimulus#
            iStimCounter% += 1;
        endif
        
    case iState% = stateBlankON% then
        
        ' Waiting for the third trig - which indicates the blank is off
        'if FindEvent%(tunChanTrigger%, tBlankStart, tBlankEnd) > 0 then
        if FindPulseDown%(tunChanTrigger%, tStateStart, tBlankEnd, tPulseUp) = 1 then
             
            LogInfo("TODO: Process spikes for BLANK " + str$(iBlankCounter%) + " " + str$(tBlankStart) + "-" + str$(tBlankEnd) + "\n");
            for i% := 1 to tunNChannels% do
                tunBlankTotalSpikeCount[i%] := tunBlankTotalSpikeCount[i%]+View(tunWindowData%).Count(i%, tBlankStart, tBlankEnd);
                tunBlankSeconds[i%] := tunBlankSeconds[i%]+tBlankEnd-tBlankStart;
                'printlog("Blank count is %d and blank time is %f for a rate of %f\n",tunBlankTotalSpikeCount[i%],tunBlankSeconds[i%],tunBlankTotalSpikeCount[i%]/tunBlankSeconds[i%]);
                View(tunResultXYWindow%[i%]).XYDelete(2);
                View(tunResultXYWindow%[i%]).XYAddData(2,1,tunBlankTotalSpikeCount[i%]/tunBlankSeconds[i%]);
            next;
            
            iBlankCounter% += 1;            
            
            ' check whether all stim have been presented
            if iStimCounter% = (tunNSteps%+1) * tunNRepeats% then
                ChangeStateTo(stateDone%, tNow);
            else
                ChangeStateTo(stateNoStim%, tBlankEnd);
            endif
        endif
        
    case iState% = stateDone% then
        
        if OnlyRecordDuringStimulus% = 1 then        
            Stop%();
            status% := 1;
        else
            ToolbarEnable(2,1); ' allow select stimuli again
            ChangeStateTo(stateStartup%, tNow);
            iStimCounter% := 0;
            iBlankCounter% := 0;
        endif;
        
        
    else
        
        LogError("", "Unknown state " + str$(iState%));
        Stop%();
        status% := 0;
        
    endcase
    
    return status%;
end

proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;


'func SpikeRate(t1, t2, window%, chan%)
'    if t2-t1 <= 0 then
'        return -999999;     ' end time before or equal to start time
'    else
'        View(window%).Count(chan%, t1, t2)/(t2-t1);
'    endif
'end


proc WriteStimFileToStartPresentation()
    var cmd$;
    var i%;
    var h%;
    var s$;
    var screenWidth;
    var x, y, w, h, contrast%, sf, tf, ori, mo$, pattern$, aperture$;
    var stimfile$, quitfile$;
    

    SetTuningCurveLabels();  'set up tuning curve labels once we're ready to start recording

    ' Before generating command file, fetch the base grating parameters.
    ParseGratingParameters%(tunGratingParams$, x, y, w, h, contrast%, sf, tf, ori, mo$, pattern$, aperture$);
    
    ' Delete old stim file if there is one sitting there. 
    stimfile$ := tunStimFolder$ + "\\stim.txt";
    quitfile$ := tunStimFolder$ + "\\quit.txt";
    FileDelete(stimfile$);
    FileDelete(quitfile$);
    
    ' Open text file
    h% := FileOpen(stimfile$, 8, 1);
    if h% < 0 then
        LogError("Start", "Cannot open text file!");
        halt;
    endif
    
    ' Write header
    screenWidth := GetKrubScreenWidth%()/10.0;
    Print("header,%.1f,%s,%d,1,%d,%d,%d\n", screenWidth, GetAcuteDistanceToScreenMM$(), GetKrubMaskType%(), GetKrubTriggerSqPixels%(), GetKrubTriggerSqFrames%(), GetKrubBgColor%());
    
    ' Ready pulses (2)
    Print("ready,2\n");
    
    ' Stim/blank/blank for each stim 
    ' Encoding Y in the negative, which will make the placement make sense on the Krub screen
    for i% := 0 to ((tunNSteps%+1)*tunNRepeats%)-1 do
        docase 
        case tuntypeSelected% = tuntypeOri% then
            s$ := EncodeGratingParameters$(x, -y, w, h, contrast%, sf, tf, tunParameterValues[tunParameterIndices%[i%]], mo$, pattern$, aperture$);
        case tuntypeSelected% = tuntypeDom% then
            s$ := EncodeGratingParameters$(x, -y, w, h, tunParameterValues[tunParameterIndices%[i%]], sf, tf, ori, mo$, pattern$, aperture$);
        case tuntypeSelected% = tuntypeSF% then
            s$ := EncodeGratingParameters$(x, -y, w, h, contrast%, tunParameterValues[tunParameterIndices%[i%]], tf, ori, mo$, pattern$, aperture$);
        case tuntypeSelected% = tuntypeTF% then
            s$ := EncodeGratingParameters$(x, -y, w, h, contrast%, sf, tunParameterValues[tunParameterIndices%[i%]], ori, mo$, pattern$, aperture$);
        else
            LogError("Start", "Unknown tuning curve type (" + str$(tuntypeSelected%) + ")");
            halt;
        endcase
        
        View(h%).Print("grating," + s$ + "," + str$(tunStimTime) + "\n");
        View(h%).Print("tblank," + str$(tunBlankTime) + "\n");
        View(h%).Print("tblank,0.5\n");
        
    next
    
    ' Close file
    FileClose();
    
    
end


Proc SetTuningCurveLabels()

var i%;
var tempTitle$;

    ' Create results plot for each channel
    for i% := 1 to tunNChannels% do
        ' open xy window to display tuning results
        tunResultXYWindow%[i%] := FileNew(12);
        ' position in upper-right quadrant of screen
        Window(50, 0, 100, 50);  'adjust this?
        ' first channel is signal. specify color etc
        XYDrawMode(0,5,1);  '0 ignored, set automtic axis range mode, axes set to update with new data
        XYSort(1,1);  'sort by x-value
        XYJoin(1,1);  'Join, do not connect first to last
    '    WindowVisible(1);  
        XYColour(1,16); ' I have no idea what color 16 is
        ChanTitle$(1, "Signal");  'Sets title of channel 1
        XYSetChan(0); ' create second channel. The first channel is automatically created with the FileNew(12) call.
        XYColour(2,12); ' no idea what color 12 is either
        ChanTitle$(2, "Bkgd");  'Sets title of channel 2
        'Create labels
        ChanTitle$(0, "Spikes/s");  ' y axis label
        TuningCurveLabels(tuntypeSelected%);
        tempTitle$ := WindowTitle$();
        WindowTitle$(tempTitle$ + ", Electrode " + Str$(i%));
        WindowVisible(1);  'XY plot starts out invisible, make it visible
next;

end
